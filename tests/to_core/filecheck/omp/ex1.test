// RUN: xftn %S/../../../../examples/omp/ex1.F90 --openmp --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu", omp.is_gpu = false, omp.is_target_device = false, omp.target_triples = [], omp.version = #omp<version <version = 11>>} {
//CHECK-NEXT:    func.func @_QMex1_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %3 = arith.constant 100 : index
//CHECK-NEXT:      %4 = memref.alloc(%3) : memref<?xf32>
//CHECK-NEXT:      memref.store %4, %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %5 = arith.constant 100 : index
//CHECK-NEXT:      %6 = memref.alloc(%5) : memref<?xf32>
//CHECK-NEXT:      memref.store %6, %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %7 = arith.constant 100 : index
//CHECK-NEXT:      %8 = memref.alloc(%7) : memref<?xf32>
//CHECK-NEXT:      memref.store %8, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      "omp.parallel"() <{operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 0>}> ({
//CHECK-NEXT:        %9 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        %10 = arith.constant 1 : i32
//CHECK-NEXT:        %11 = arith.constant 100 : i32
//CHECK-NEXT:        %12 = arith.constant 1 : i32
//CHECK-NEXT:        "omp.wsloop"() <{operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 0, 0>}> ({
//CHECK-NEXT:          "omp.loop_nest"(%10, %11, %12) <{loop_inclusive}> ({
//CHECK-NEXT:          ^0(%13 : i32):
//CHECK-NEXT:            memref.store %13, %9[] : memref<i32>
//CHECK-NEXT:            %14 = memref.load %9[] : memref<i32>
//CHECK-NEXT:            %15 = arith.extui %14 : i32 to i64
//CHECK-NEXT:            %16 = arith.index_cast %15 : i64 to index
//CHECK-NEXT:            %17 = arith.constant 1 : index
//CHECK-NEXT:            %18 = arith.subi %16, %17 : index
//CHECK-NEXT:            %19 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:            %20 = memref.load %19[%18] : memref<?xf32>
//CHECK-NEXT:            %21 = memref.load %9[] : memref<i32>
//CHECK-NEXT:            %22 = arith.extui %21 : i32 to i64
//CHECK-NEXT:            %23 = arith.index_cast %22 : i64 to index
//CHECK-NEXT:            %24 = arith.constant 1 : index
//CHECK-NEXT:            %25 = arith.subi %23, %24 : index
//CHECK-NEXT:            %26 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:            %27 = memref.load %26[%25] : memref<?xf32>
//CHECK-NEXT:            %28 = arith.addf %20, %27 fastmath<contract> : f32
//CHECK-NEXT:            %29 = memref.load %9[] : memref<i32>
//CHECK-NEXT:            %30 = arith.extui %29 : i32 to i64
//CHECK-NEXT:            %31 = arith.index_cast %30 : i64 to index
//CHECK-NEXT:            %32 = arith.constant 1 : index
//CHECK-NEXT:            %33 = arith.subi %31, %32 : index
//CHECK-NEXT:            %34 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:            memref.store %28, %34[%33] : memref<?xf32>
//CHECK-NEXT:            omp.yield
//CHECK-NEXT:          }) : (i32, i32, i32) -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "omp.terminator"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMex1_testPcalc() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
