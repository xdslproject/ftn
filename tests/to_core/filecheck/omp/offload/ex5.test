// RUN: xftn %S/../../../../../examples/omp/offload/ex5.F90 --stdout -t %S/tmp --cleanup --offload -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu", omp.is_gpu = false, omp.is_target_device = false, omp.requires = #omp<clause_requires none>, omp.target_triples = [], omp.version = #omp<version <version = 11>>} {
//CHECK-NEXT:    omp.private {type = private} @_QMex5_testFcalcEi_private_ref_i32 : memref<i32> alloc {
//CHECK-NEXT:    ^0(%0 : !fir.ref<i32>):
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      omp.yield(%1 : memref<i32>)
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMex5_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = arith.constant 100 : index
//CHECK-NEXT:      %5 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %5, %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %6 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %6, %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %7 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %7, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %8 = "omp.map.info"(%3) <{map_capture_type = #omp<variable_capture_kind (ByCopy)>, map_type = 512 : ui64, name = "i", partial_map = false, var_type = i32, operandSegmentSizes = array<i32: 1, 0, 0, 0>}> : (memref<i32>) -> memref<i32>
//CHECK-NEXT:      %9 = "memref.extract_aligned_pointer_as_index"(%2) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %10 = arith.index_cast %9 : index to i64
//CHECK-NEXT:      %11 = "llvm.inttoptr"(%10) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %12 = arith.constant 0 : index
//CHECK-NEXT:      %13 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %14 = arith.constant 1 : index
//CHECK-NEXT:      %15 = "memref.dim"(%13, %12) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %16 = arith.subi %15, %14 : index
//CHECK-NEXT:      %17 = "omp.map.bounds"(%12, %16, %15, %14, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %18 = "omp.map.info"(%2, %11, %17) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 515 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %19 = "omp.map.info"(%2, %18) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 513 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      %20 = "memref.extract_aligned_pointer_as_index"(%0) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %21 = arith.index_cast %20 : index to i64
//CHECK-NEXT:      %22 = "llvm.inttoptr"(%21) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %23 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %24 = "memref.dim"(%23, %12) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %25 = arith.subi %24, %14 : index
//CHECK-NEXT:      %26 = "omp.map.bounds"(%12, %25, %24, %14, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %27 = "omp.map.info"(%0, %22, %26) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 515 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %28 = "omp.map.info"(%0, %27) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 513 : ui64, members_index = [[0 : i64]], name = "a", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      %29 = "memref.extract_aligned_pointer_as_index"(%1) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %30 = arith.index_cast %29 : index to i64
//CHECK-NEXT:      %31 = "llvm.inttoptr"(%30) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %32 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %33 = "memref.dim"(%32, %12) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %34 = arith.subi %33, %14 : index
//CHECK-NEXT:      %35 = "omp.map.bounds"(%12, %34, %33, %14, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %36 = "omp.map.info"(%1, %31, %35) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 515 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %37 = "omp.map.info"(%1, %36) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 513 : ui64, members_index = [[0 : i64]], name = "b", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      "omp.target"(%8, %19, %28, %37, %18, %27, %36) <{operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0>}> ({
//CHECK-NEXT:      ^0(%38 : memref<i32>, %39 : memref<memref<?xf32>>, %40 : memref<memref<?xf32>>, %41 : memref<memref<?xf32>>, %42 : memref<memref<?xf32>>, %43 : memref<memref<?xf32>>, %44 : memref<memref<?xf32>>):
//CHECK-NEXT:        %45 = arith.constant 1 : i32
//CHECK-NEXT:        %46 = arith.constant 100 : i32
//CHECK-NEXT:        "omp.simd"(%38) <{private_syms = [@_QMex5_testFcalcEi_private_ref_i32], simdlen = 16 : i64, operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 1, 0>}> ({
//CHECK-NEXT:        ^1(%47 : memref<i32>):
//CHECK-NEXT:          "omp.loop_nest"(%45, %46, %45) <{loop_inclusive}> ({
//CHECK-NEXT:          ^2(%48 : i32):
//CHECK-NEXT:            memref.store %48, %47[] : memref<i32>
//CHECK-NEXT:            %49 = memref.load %47[] : memref<i32>
//CHECK-NEXT:            %50 = arith.extui %49 : i32 to i64
//CHECK-NEXT:            %51 = arith.index_cast %50 : i64 to index
//CHECK-NEXT:            %52 = arith.constant 1 : index
//CHECK-NEXT:            %53 = arith.subi %51, %52 : index
//CHECK-NEXT:            %54 = memref.load %40[] : memref<memref<?xf32>>
//CHECK-NEXT:            %55 = memref.load %54[%53] : memref<?xf32>
//CHECK-NEXT:            %56 = memref.load %41[] : memref<memref<?xf32>>
//CHECK-NEXT:            %57 = memref.load %56[%53] : memref<?xf32>
//CHECK-NEXT:            %58 = arith.addf %55, %57 fastmath<contract> : f32
//CHECK-NEXT:            %59 = memref.load %39[] : memref<memref<?xf32>>
//CHECK-NEXT:            memref.store %58, %59[%53] : memref<?xf32>
//CHECK-NEXT:            omp.yield
//CHECK-NEXT:          }) : (i32, i32, i32) -> ()
//CHECK-NEXT:        }) : (memref<i32>) -> ()
//CHECK-NEXT:        "omp.terminator"() : () -> ()
//CHECK-NEXT:      }) : (memref<i32>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMex5_testPcalc() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
