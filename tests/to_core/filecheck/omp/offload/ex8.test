// RUN: xftn %S/../../../../../examples/omp/offload/ex8.F90 --stdout -t %S/tmp --cleanup --offload -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu", omp.is_gpu = false, omp.is_target_device = false, omp.requires = #omp<clause_requires none>, omp.target_triples = [], omp.version = #omp<version <version = 11>>} {
//CHECK-NEXT:    func.func @_QMex8_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = arith.constant 100 : index
//CHECK-NEXT:      %5 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %5, %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %6 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %6, %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %7 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %7, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %8 = "memref.extract_aligned_pointer_as_index"(%2) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %9 = arith.index_cast %8 : index to i64
//CHECK-NEXT:      %10 = "llvm.inttoptr"(%9) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %11 = arith.constant 0 : index
//CHECK-NEXT:      %12 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %13 = arith.constant 1 : index
//CHECK-NEXT:      %14 = "memref.dim"(%12, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %15 = arith.subi %14, %13 : index
//CHECK-NEXT:      %16 = "omp.map.bounds"(%11, %15, %14, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %17 = "omp.map.info"(%2, %10, %16) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 0 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %18 = "omp.map.info"(%2, %17) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      "omp.target_enter_data"(%18, %17) <{operandSegmentSizes = array<i32: 0, 0, 0, 2>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:      %19 = "memref.extract_aligned_pointer_as_index"(%0) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %20 = arith.index_cast %19 : index to i64
//CHECK-NEXT:      %21 = "llvm.inttoptr"(%20) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %22 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %23 = "memref.dim"(%22, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %24 = arith.subi %23, %13 : index
//CHECK-NEXT:      %25 = "omp.map.bounds"(%11, %24, %23, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %26 = "omp.map.info"(%0, %21, %25) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %27 = "omp.map.info"(%0, %26) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "a", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      %28 = "memref.extract_aligned_pointer_as_index"(%1) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %29 = arith.index_cast %28 : index to i64
//CHECK-NEXT:      %30 = "llvm.inttoptr"(%29) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %31 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %32 = "memref.dim"(%31, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %33 = arith.subi %32, %13 : index
//CHECK-NEXT:      %34 = "omp.map.bounds"(%11, %33, %32, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %35 = "omp.map.info"(%1, %30, %34) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %36 = "omp.map.info"(%1, %35) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "b", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      %37 = "omp.map.info"(%3) <{map_capture_type = #omp<variable_capture_kind (ByCopy)>, map_type = 512 : ui64, name = "i", partial_map = false, var_type = i32, operandSegmentSizes = array<i32: 1, 0, 0, 0>}> : (memref<i32>) -> memref<i32>
//CHECK-NEXT:      %38 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %39 = "memref.dim"(%38, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %40 = arith.subi %39, %13 : index
//CHECK-NEXT:      %41 = "omp.map.bounds"(%11, %40, %39, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %42 = "omp.map.info"(%2, %10, %41) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 515 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %43 = "omp.map.info"(%2, %42) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 513 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      "omp.target"(%27, %36, %37, %43, %26, %35, %42) <{operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0>}> ({
//CHECK-NEXT:      ^0(%44 : memref<memref<?xf32>>, %45 : memref<memref<?xf32>>, %46 : memref<i32>, %47 : memref<memref<?xf32>>, %48 : memref<memref<?xf32>>, %49 : memref<memref<?xf32>>, %50 : memref<memref<?xf32>>):
//CHECK-NEXT:        %51 = arith.constant 1 : i32
//CHECK-NEXT:        %52 = arith.index_cast %51 : i32 to index
//CHECK-NEXT:        %53 = arith.constant 100 : i32
//CHECK-NEXT:        %54 = arith.index_cast %53 : i32 to index
//CHECK-NEXT:        %55 = arith.constant 1 : index
//CHECK-NEXT:        %56 = arith.index_cast %52 : index to i32
//CHECK-NEXT:        %57 = arith.addi %54, %55 : index
//CHECK-NEXT:        %58 = scf.for %59 = %52 to %57 step %55 iter_args(%60 = %56) -> (i32) {
//CHECK-NEXT:          memref.store %60, %46[] : memref<i32>
//CHECK-NEXT:          %61 = memref.load %46[] : memref<i32>
//CHECK-NEXT:          %62 = arith.extui %61 : i32 to i64
//CHECK-NEXT:          %63 = arith.index_cast %62 : i64 to index
//CHECK-NEXT:          %64 = arith.subi %63, %55 : index
//CHECK-NEXT:          %65 = memref.load %44[] : memref<memref<?xf32>>
//CHECK-NEXT:          %66 = memref.load %65[%64] : memref<?xf32>
//CHECK-NEXT:          %67 = memref.load %45[] : memref<memref<?xf32>>
//CHECK-NEXT:          %68 = memref.load %67[%64] : memref<?xf32>
//CHECK-NEXT:          %69 = arith.addf %66, %68 fastmath<contract> : f32
//CHECK-NEXT:          %70 = memref.load %47[] : memref<memref<?xf32>>
//CHECK-NEXT:          memref.store %69, %70[%64] : memref<?xf32>
//CHECK-NEXT:          %71 = memref.load %46[] : memref<i32>
//CHECK-NEXT:          %72 = arith.index_cast %55 : index to i32
//CHECK-NEXT:          %73 = arith.addi %71, %72 : i32
//CHECK-NEXT:          scf.yield %73 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %58, %46[] : memref<i32>
//CHECK-NEXT:        "omp.terminator"() : () -> ()
//CHECK-NEXT:      }) : (memref<memref<?xf32>>, memref<memref<?xf32>>, memref<i32>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:      %44 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %45 = "memref.dim"(%44, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %46 = arith.subi %45, %13 : index
//CHECK-NEXT:      %47 = "omp.map.bounds"(%11, %46, %45, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %48 = "omp.map.info"(%2, %10, %47) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %49 = "omp.map.info"(%2, %48) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      "omp.target_exit_data"(%49, %48) <{operandSegmentSizes = array<i32: 0, 0, 0, 2>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMex8_testPcalc() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
