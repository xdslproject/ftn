// RUN: xftn %S/../../../../../examples/omp/offload/ex8.F90 --stdout -t %S/tmp --cleanup --offload -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu", omp.is_gpu = false, omp.is_target_device = false, omp.requires = #omp<clause_requires none>, omp.target_triples = [], omp.version = #omp<version <version = 11>>} {
//CHECK-NEXT:    func.func @_QMex8_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<100xf32>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<100xf32>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = arith.constant 100 : index
//CHECK-NEXT:      %5 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %5, %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %6 = arith.constant 0 : index
//CHECK-NEXT:      %7 = arith.constant 1 : index
//CHECK-NEXT:      %8 = arith.constant 99 : index
//CHECK-NEXT:      %9 = "omp.map.bounds"(%6, %8, %4, %7, %7) <{stride_in_bytes = false, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %10 = "omp.map.info"(%2, %9) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 0 : ui64, name = "c", partial_map = false, var_type = memref<100xf32>, operandSegmentSizes = array<i32: 1, 0, 0, 1>}> : (memref<100xf32>, !omp.map_bounds_ty) -> memref<100xf32>
//CHECK-NEXT:      "omp.target_enter_data"(%10) <{operandSegmentSizes = array<i32: 0, 0, 0, 1>}> : (memref<100xf32>) -> ()
//CHECK-NEXT:      %11 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %12 = "memref.extract_aligned_pointer_as_index"(%0) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %13 = arith.index_cast %12 : index to i64
//CHECK-NEXT:      %14 = "llvm.inttoptr"(%13) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %15 = "memref.rank"(%11) : (memref<?xf32>) -> index
//CHECK-NEXT:      %16 = arith.subi %15, %7 : index
//CHECK-NEXT:      %17 = "memref.dim"(%11, %16) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %18 = arith.subi %17, %7 : index
//CHECK-NEXT:      %19 = "omp.map.bounds"(%6, %18, %17, %7, %7) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %20 = "omp.map.info"(%11, %14, %19) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<?xf32>, !llvm.ptr, !omp.map_bounds_ty) -> memref<?xf32>
//CHECK-NEXT{LITERAL}:      %21 = "omp.map.info"(%11, %20) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "a", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<?xf32>, memref<?xf32>) -> memref<?xf32>
//CHECK-NEXT:      %22 = "omp.map.info"(%1, %9) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "b", partial_map = false, var_type = memref<100xf32>, operandSegmentSizes = array<i32: 1, 0, 0, 1>}> : (memref<100xf32>, !omp.map_bounds_ty) -> memref<100xf32>
//CHECK-NEXT:      %23 = "omp.map.info"(%3) <{map_capture_type = #omp<variable_capture_kind (ByCopy)>, map_type = 512 : ui64, name = "i", partial_map = false, var_type = i32, operandSegmentSizes = array<i32: 1, 0, 0, 0>}> : (memref<i32>) -> memref<i32>
//CHECK-NEXT:      %24 = "omp.map.info"(%2, %9) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 515 : ui64, name = "c", partial_map = false, var_type = memref<100xf32>, operandSegmentSizes = array<i32: 1, 0, 0, 1>}> : (memref<100xf32>, !omp.map_bounds_ty) -> memref<100xf32>
//CHECK-NEXT:      "omp.target"(%21, %22, %23, %24, %20) <{operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0>}> ({
//CHECK-NEXT:      ^0(%25 : memref<?xf32>, %26 : memref<100xf32>, %27 : memref<i32>, %28 : memref<100xf32>, %29 : memref<?xf32>):
//CHECK-NEXT:        %30 = arith.constant 1 : i32
//CHECK-NEXT:        %31 = arith.index_cast %30 : i32 to index
//CHECK-NEXT:        %32 = arith.constant 100 : i32
//CHECK-NEXT:        %33 = arith.index_cast %32 : i32 to index
//CHECK-NEXT:        %34 = arith.constant 1 : index
//CHECK-NEXT:        %35 = arith.index_cast %31 : index to i32
//CHECK-NEXT:        %36 = arith.addi %33, %34 : index
//CHECK-NEXT:        %37 = scf.for %38 = %31 to %36 step %34 iter_args(%39 = %35) -> (i32) {
//CHECK-NEXT:          memref.store %39, %27[] : memref<i32>
//CHECK-NEXT:          %40 = memref.load %27[] : memref<i32>
//CHECK-NEXT:          %41 = arith.extui %40 : i32 to i64
//CHECK-NEXT:          %42 = arith.index_cast %41 : i64 to index
//CHECK-NEXT:          %43 = arith.subi %42, %34 : index
//CHECK-NEXT:          %44 = memref.load %25[%43] : memref<?xf32>
//CHECK-NEXT:          %45 = memref.load %26[%43] : memref<100xf32>
//CHECK-NEXT:          %46 = arith.addf %44, %45 fastmath<contract> : f32
//CHECK-NEXT:          memref.store %46, %28[%43] : memref<100xf32>
//CHECK-NEXT:          %47 = memref.load %27[] : memref<i32>
//CHECK-NEXT:          %48 = arith.index_cast %34 : index to i32
//CHECK-NEXT:          %49 = arith.addi %47, %48 : i32
//CHECK-NEXT:          scf.yield %49 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %37, %27[] : memref<i32>
//CHECK-NEXT:        "omp.terminator"() : () -> ()
//CHECK-NEXT:      }) : (memref<?xf32>, memref<100xf32>, memref<i32>, memref<100xf32>, memref<?xf32>) -> ()
//CHECK-NEXT:      %25 = "omp.map.info"(%2, %9) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, name = "c", partial_map = false, var_type = memref<100xf32>, operandSegmentSizes = array<i32: 1, 0, 0, 1>}> : (memref<100xf32>, !omp.map_bounds_ty) -> memref<100xf32>
//CHECK-NEXT:      "omp.target_exit_data"(%25) <{operandSegmentSizes = array<i32: 0, 0, 0, 1>}> : (memref<100xf32>) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMex8_testPcalc() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
