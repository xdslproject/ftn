// RUN: xftn %S/../../../../../examples/omp/offload/ex7.F90 --stdout -t %S/tmp --cleanup --offload -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu", omp.is_gpu = false, omp.is_target_device = false, omp.requires = #omp<clause_requires none>, omp.target_triples = [], omp.version = #omp<version <version = 11>>} {
//CHECK-NEXT:    func.func @_QMex7_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = arith.constant 100 : index
//CHECK-NEXT:      %5 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %5, %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %6 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %6, %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %7 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %7, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %8 = "memref.extract_aligned_pointer_as_index"(%2) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %9 = arith.index_cast %8 : index to i64
//CHECK-NEXT:      %10 = "llvm.inttoptr"(%9) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %11 = arith.constant 0 : index
//CHECK-NEXT:      %12 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %13 = arith.constant 1 : index
//CHECK-NEXT:      %14 = "memref.rank"(%12) : (memref<?xf32>) -> index
//CHECK-NEXT:      %15 = arith.subi %14, %13 : index
//CHECK-NEXT:      %16 = "memref.dim"(%12, %15) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %17 = arith.subi %16, %13 : index
//CHECK-NEXT:      %18 = "omp.map.bounds"(%11, %17, %16, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %19 = "omp.map.info"(%2, %10, %18) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %20 = "omp.map.info"(%2, %19) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      "omp.target_data"(%20, %19) <{operandSegmentSizes = array<i32: 0, 0, 2, 0, 0>}> ({
//CHECK-NEXT:      ^0(%21 : memref<memref<?xf32>>, %22 : memref<memref<?xf32>>):
//CHECK-NEXT:        %23 = "memref.extract_aligned_pointer_as_index"(%0) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %24 = arith.index_cast %23 : index to i64
//CHECK-NEXT:        %25 = "llvm.inttoptr"(%24) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %26 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:        %27 = "memref.rank"(%26) : (memref<?xf32>) -> index
//CHECK-NEXT:        %28 = arith.subi %27, %13 : index
//CHECK-NEXT:        %29 = "memref.dim"(%26, %28) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %30 = arith.subi %29, %13 : index
//CHECK-NEXT:        %31 = "omp.map.bounds"(%11, %30, %29, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %32 = "omp.map.info"(%0, %25, %31) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:        %33 = "omp.map.info"(%0, %32) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "a", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:        %34 = "memref.extract_aligned_pointer_as_index"(%1) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %35 = arith.index_cast %34 : index to i64
//CHECK-NEXT:        %36 = "llvm.inttoptr"(%35) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %37 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:        %38 = "memref.rank"(%37) : (memref<?xf32>) -> index
//CHECK-NEXT:        %39 = arith.subi %38, %13 : index
//CHECK-NEXT:        %40 = "memref.dim"(%37, %39) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %41 = arith.subi %40, %13 : index
//CHECK-NEXT:        %42 = "omp.map.bounds"(%11, %41, %40, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %43 = "omp.map.info"(%1, %36, %42) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:        %44 = "omp.map.info"(%1, %43) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "b", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:        %45 = "omp.map.info"(%3) <{map_capture_type = #omp<variable_capture_kind (ByCopy)>, map_type = 512 : ui64, name = "i", partial_map = false, var_type = i32, operandSegmentSizes = array<i32: 1, 0, 0, 0>}> : (memref<i32>) -> memref<i32>
//CHECK-NEXT:        %46 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %47 = "memref.rank"(%46) : (memref<?xf32>) -> index
//CHECK-NEXT:        %48 = arith.subi %47, %13 : index
//CHECK-NEXT:        %49 = "memref.dim"(%46, %48) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %50 = arith.subi %49, %13 : index
//CHECK-NEXT:        %51 = "omp.map.bounds"(%11, %50, %49, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %52 = "omp.map.info"(%2, %10, %51) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 515 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:        %53 = "omp.map.info"(%2, %52) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 513 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:        "omp.target"(%33, %44, %45, %53, %32, %43, %52) <{operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0>}> ({
//CHECK-NEXT:        ^1(%54 : memref<memref<?xf32>>, %55 : memref<memref<?xf32>>, %56 : memref<i32>, %57 : memref<memref<?xf32>>, %58 : memref<memref<?xf32>>, %59 : memref<memref<?xf32>>, %60 : memref<memref<?xf32>>):
//CHECK-NEXT:          %61 = arith.constant 1 : i32
//CHECK-NEXT:          %62 = arith.index_cast %61 : i32 to index
//CHECK-NEXT:          %63 = arith.constant 100 : i32
//CHECK-NEXT:          %64 = arith.index_cast %63 : i32 to index
//CHECK-NEXT:          %65 = arith.constant 1 : index
//CHECK-NEXT:          %66 = arith.index_cast %62 : index to i32
//CHECK-NEXT:          %67 = arith.addi %64, %65 : index
//CHECK-NEXT:          %68 = scf.for %69 = %62 to %67 step %65 iter_args(%70 = %66) -> (i32) {
//CHECK-NEXT:            memref.store %70, %56[] : memref<i32>
//CHECK-NEXT:            %71 = memref.load %56[] : memref<i32>
//CHECK-NEXT:            %72 = arith.extui %71 : i32 to i64
//CHECK-NEXT:            %73 = arith.index_cast %72 : i64 to index
//CHECK-NEXT:            %74 = arith.subi %73, %65 : index
//CHECK-NEXT:            %75 = memref.load %54[] : memref<memref<?xf32>>
//CHECK-NEXT:            %76 = memref.load %75[%74] : memref<?xf32>
//CHECK-NEXT:            %77 = memref.load %55[] : memref<memref<?xf32>>
//CHECK-NEXT:            %78 = memref.load %77[%74] : memref<?xf32>
//CHECK-NEXT:            %79 = arith.addf %76, %78 fastmath<contract> : f32
//CHECK-NEXT:            %80 = memref.load %57[] : memref<memref<?xf32>>
//CHECK-NEXT:            memref.store %79, %80[%74] : memref<?xf32>
//CHECK-NEXT:            %81 = memref.load %56[] : memref<i32>
//CHECK-NEXT:            %82 = arith.index_cast %65 : index to i32
//CHECK-NEXT:            %83 = arith.addi %81, %82 : i32
//CHECK-NEXT:            scf.yield %83 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %68, %56[] : memref<i32>
//CHECK-NEXT:          "omp.terminator"() : () -> ()
//CHECK-NEXT:        }) : (memref<memref<?xf32>>, memref<memref<?xf32>>, memref<i32>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:        %54 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %55 = "memref.rank"(%54) : (memref<?xf32>) -> index
//CHECK-NEXT:        %56 = arith.subi %55, %13 : index
//CHECK-NEXT:        %57 = "memref.dim"(%54, %56) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %58 = arith.subi %57, %13 : index
//CHECK-NEXT:        %59 = "omp.map.bounds"(%11, %58, %57, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %60 = "omp.map.info"(%2, %10, %59) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:        %61 = "omp.map.info"(%2, %60) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:        "omp.target_update"(%61, %60) <{operandSegmentSizes = array<i32: 0, 0, 0, 2>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:        "omp.terminator"() : () -> ()
//CHECK-NEXT:      }) : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMex7_testPcalc() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
