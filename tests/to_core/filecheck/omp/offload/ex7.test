// RUN: xftn %S/../../../../../examples/omp/offload/ex7.F90 --stdout -t %S/tmp --cleanup --offload -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu", omp.is_gpu = false, omp.is_target_device = false, omp.requires = #omp<clause_requires none>, omp.target_triples = [], omp.version = #omp<version <version = 11>>} {
//CHECK-NEXT:    func.func @_QMex7_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = arith.constant 100 : index
//CHECK-NEXT:      %5 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %5, %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %6 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %6, %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %7 = memref.alloc(%4) : memref<?xf32>
//CHECK-NEXT:      memref.store %7, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %8 = "memref.extract_aligned_pointer_as_index"(%2) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:      %9 = arith.index_cast %8 : index to i64
//CHECK-NEXT:      %10 = "llvm.inttoptr"(%9) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %11 = arith.constant 0 : index
//CHECK-NEXT:      %12 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %13 = arith.constant 1 : index
//CHECK-NEXT:      %14 = "memref.dim"(%12, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %15 = arith.subi %14, %13 : index
//CHECK-NEXT:      %16 = "omp.map.bounds"(%11, %15, %14, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %17 = "omp.map.info"(%2, %10, %16) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:      %18 = "omp.map.info"(%2, %17) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:      "omp.target_data"(%18, %17) <{operandSegmentSizes = array<i32: 0, 0, 2, 0, 0>}> ({
//CHECK-NEXT:      ^0(%19 : memref<memref<?xf32>>, %20 : memref<memref<?xf32>>):
//CHECK-NEXT:        %21 = "memref.extract_aligned_pointer_as_index"(%0) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %22 = arith.index_cast %21 : index to i64
//CHECK-NEXT:        %23 = "llvm.inttoptr"(%22) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %24 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:        %25 = "memref.dim"(%24, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %26 = arith.subi %25, %13 : index
//CHECK-NEXT:        %27 = "omp.map.bounds"(%11, %26, %25, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %28 = "omp.map.info"(%0, %23, %27) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:        %29 = "omp.map.info"(%0, %28) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "a", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:        %30 = "memref.extract_aligned_pointer_as_index"(%1) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %31 = arith.index_cast %30 : index to i64
//CHECK-NEXT:        %32 = "llvm.inttoptr"(%31) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %33 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:        %34 = "memref.dim"(%33, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %35 = arith.subi %34, %13 : index
//CHECK-NEXT:        %36 = "omp.map.bounds"(%11, %35, %34, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %37 = "omp.map.info"(%1, %32, %36) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:        %38 = "omp.map.info"(%1, %37) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "b", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:        %39 = "omp.map.info"(%3) <{map_capture_type = #omp<variable_capture_kind (ByCopy)>, map_type = 512 : ui64, name = "i", partial_map = false, var_type = i32, operandSegmentSizes = array<i32: 1, 0, 0, 0>}> : (memref<i32>) -> memref<i32>
//CHECK-NEXT:        %40 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %41 = "memref.dim"(%40, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %42 = arith.subi %41, %13 : index
//CHECK-NEXT:        %43 = "omp.map.bounds"(%11, %42, %41, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %44 = "omp.map.info"(%2, %10, %43) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 515 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:        %45 = "omp.map.info"(%2, %44) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 513 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:        "omp.target"(%29, %38, %39, %45, %28, %37, %44) <{operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0>}> ({
//CHECK-NEXT:        ^1(%46 : memref<memref<?xf32>>, %47 : memref<memref<?xf32>>, %48 : memref<i32>, %49 : memref<memref<?xf32>>, %50 : memref<memref<?xf32>>, %51 : memref<memref<?xf32>>, %52 : memref<memref<?xf32>>):
//CHECK-NEXT:          %53 = arith.constant 1 : i32
//CHECK-NEXT:          %54 = arith.index_cast %53 : i32 to index
//CHECK-NEXT:          %55 = arith.constant 100 : i32
//CHECK-NEXT:          %56 = arith.index_cast %55 : i32 to index
//CHECK-NEXT:          %57 = arith.constant 1 : index
//CHECK-NEXT:          %58 = arith.index_cast %54 : index to i32
//CHECK-NEXT:          %59 = arith.addi %56, %57 : index
//CHECK-NEXT:          %60 = scf.for %61 = %54 to %59 step %57 iter_args(%62 = %58) -> (i32) {
//CHECK-NEXT:            memref.store %62, %48[] : memref<i32>
//CHECK-NEXT:            %63 = memref.load %48[] : memref<i32>
//CHECK-NEXT:            %64 = arith.extui %63 : i32 to i64
//CHECK-NEXT:            %65 = arith.index_cast %64 : i64 to index
//CHECK-NEXT:            %66 = arith.subi %65, %57 : index
//CHECK-NEXT:            %67 = memref.load %46[] : memref<memref<?xf32>>
//CHECK-NEXT:            %68 = memref.load %67[%66] : memref<?xf32>
//CHECK-NEXT:            %69 = memref.load %47[] : memref<memref<?xf32>>
//CHECK-NEXT:            %70 = memref.load %69[%66] : memref<?xf32>
//CHECK-NEXT:            %71 = arith.addf %68, %70 fastmath<contract> : f32
//CHECK-NEXT:            %72 = memref.load %49[] : memref<memref<?xf32>>
//CHECK-NEXT:            memref.store %71, %72[%66] : memref<?xf32>
//CHECK-NEXT:            %73 = memref.load %48[] : memref<i32>
//CHECK-NEXT:            %74 = arith.index_cast %57 : index to i32
//CHECK-NEXT:            %75 = arith.addi %73, %74 : i32
//CHECK-NEXT:            scf.yield %75 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %60, %48[] : memref<i32>
//CHECK-NEXT:          "omp.terminator"() : () -> ()
//CHECK-NEXT:        }) : (memref<memref<?xf32>>, memref<memref<?xf32>>, memref<i32>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:        %46 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %47 = "memref.dim"(%46, %11) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %48 = arith.subi %47, %13 : index
//CHECK-NEXT:        %49 = "omp.map.bounds"(%11, %48, %47, %13, %13) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %50 = "omp.map.info"(%2, %10, %49) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 1>}> : (memref<memref<?xf32>>, !llvm.ptr, !omp.map_bounds_ty) -> memref<memref<?xf32>>
//CHECK-NEXT{LITERAL}:        %51 = "omp.map.info"(%2, %50) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> memref<memref<?xf32>>
//CHECK-NEXT:        "omp.target_update"(%51, %50) <{operandSegmentSizes = array<i32: 0, 0, 0, 2>}> : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:        "omp.terminator"() : () -> ()
//CHECK-NEXT:      }) : (memref<memref<?xf32>>, memref<memref<?xf32>>) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMex7_testPcalc() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
