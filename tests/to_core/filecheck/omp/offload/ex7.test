// RUN: xftn %S/../../../../../examples/omp/offload/ex7.F90 --stdout -t %S/tmp --cleanup --offload -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu", omp.is_gpu = false, omp.is_target_device = false, omp.requires = #omp<clause_requires none>, omp.target_triples = [], omp.version = #omp<version <version = 11>>} {
//CHECK-NEXT:    func.func @_QMex7_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<100xf32>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?xf32>>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = arith.constant 100 : index
//CHECK-NEXT:      %5 = arith.constant 2 : index
//CHECK-NEXT:      %6 = memref.alloc(%5, %4) : memref<?x?xf32>
//CHECK-NEXT:      memref.store %6, %0[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %7 = arith.constant 50 : index
//CHECK-NEXT:      %8 = memref.alloc(%7, %4) : memref<?x?xf32>
//CHECK-NEXT:      memref.store %8, %2[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %9 = memref.load %2[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %10 = "memref.extract_aligned_pointer_as_index"(%2) : (memref<memref<?x?xf32>>) -> index
//CHECK-NEXT:      %11 = arith.index_cast %10 : index to i64
//CHECK-NEXT:      %12 = "llvm.inttoptr"(%11) : (i64) -> !llvm.ptr
//CHECK-NEXT:      %13 = arith.constant 0 : index
//CHECK-NEXT:      %14 = arith.constant 1 : index
//CHECK-NEXT:      %15 = "memref.rank"(%9) : (memref<?x?xf32>) -> index
//CHECK-NEXT:      %16 = arith.subi %15, %14 : index
//CHECK-NEXT:      %17 = "memref.dim"(%9, %16) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %18 = arith.subi %17, %14 : index
//CHECK-NEXT:      %19 = "omp.map.bounds"(%13, %18, %17, %14, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %20 = arith.subi %16, %14 : index
//CHECK-NEXT:      %21 = "memref.dim"(%9, %20) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %22 = arith.subi %21, %14 : index
//CHECK-NEXT:      %23 = "omp.map.bounds"(%13, %22, %21, %17, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:      %24 = "omp.map.info"(%9, %12, %19, %23) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 2 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 2>}> : (memref<?x?xf32>, !llvm.ptr, !omp.map_bounds_ty, !omp.map_bounds_ty) -> memref<?x?xf32>
//CHECK-NEXT{LITERAL}:      %25 = "omp.map.info"(%9, %24) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?x?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<?x?xf32>, memref<?x?xf32>) -> memref<?x?xf32>
//CHECK-NEXT:      "omp.target_data"(%25, %24) <{operandSegmentSizes = array<i32: 0, 0, 2, 0, 0>}> ({
//CHECK-NEXT:      ^0(%26 : memref<?x?xf32>, %27 : memref<?x?xf32>):
//CHECK-NEXT:        %28 = memref.load %0[] : memref<memref<?x?xf32>>
//CHECK-NEXT:        %29 = "memref.extract_aligned_pointer_as_index"(%0) : (memref<memref<?x?xf32>>) -> index
//CHECK-NEXT:        %30 = arith.index_cast %29 : index to i64
//CHECK-NEXT:        %31 = "llvm.inttoptr"(%30) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %32 = "memref.rank"(%28) : (memref<?x?xf32>) -> index
//CHECK-NEXT:        %33 = arith.subi %32, %14 : index
//CHECK-NEXT:        %34 = "memref.dim"(%28, %33) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:        %35 = arith.subi %34, %14 : index
//CHECK-NEXT:        %36 = "omp.map.bounds"(%13, %35, %34, %14, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %37 = arith.subi %33, %14 : index
//CHECK-NEXT:        %38 = "memref.dim"(%28, %37) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:        %39 = arith.subi %38, %14 : index
//CHECK-NEXT:        %40 = "omp.map.bounds"(%13, %39, %38, %34, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %41 = "omp.map.info"(%28, %31, %36, %40) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 2>}> : (memref<?x?xf32>, !llvm.ptr, !omp.map_bounds_ty, !omp.map_bounds_ty) -> memref<?x?xf32>
//CHECK-NEXT{LITERAL}:        %42 = "omp.map.info"(%28, %41) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, members_index = [[0 : i64]], name = "a", partial_map = false, var_type = memref<?x?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<?x?xf32>, memref<?x?xf32>) -> memref<?x?xf32>
//CHECK-NEXT:        %43 = arith.constant 99 : index
//CHECK-NEXT:        %44 = "omp.map.bounds"(%13, %43, %4, %14, %14) <{stride_in_bytes = false, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %45 = "omp.map.info"(%1, %44) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 1 : ui64, name = "b", partial_map = false, var_type = memref<100xf32>, operandSegmentSizes = array<i32: 1, 0, 0, 1>}> : (memref<100xf32>, !omp.map_bounds_ty) -> memref<100xf32>
//CHECK-NEXT:        %46 = "omp.map.info"(%3) <{map_capture_type = #omp<variable_capture_kind (ByCopy)>, map_type = 512 : ui64, name = "i", partial_map = false, var_type = i32, operandSegmentSizes = array<i32: 1, 0, 0, 0>}> : (memref<i32>) -> memref<i32>
//CHECK-NEXT:        %47 = memref.load %2[] : memref<memref<?x?xf32>>
//CHECK-NEXT:        %48 = "memref.rank"(%47) : (memref<?x?xf32>) -> index
//CHECK-NEXT:        %49 = arith.subi %48, %14 : index
//CHECK-NEXT:        %50 = "memref.dim"(%47, %49) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:        %51 = arith.subi %50, %14 : index
//CHECK-NEXT:        %52 = "omp.map.bounds"(%13, %51, %50, %14, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %53 = arith.subi %49, %14 : index
//CHECK-NEXT:        %54 = "memref.dim"(%47, %53) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:        %55 = arith.subi %54, %14 : index
//CHECK-NEXT:        %56 = "omp.map.bounds"(%13, %55, %54, %50, %14) <{stride_in_bytes = true, operandSegmentSizes = array<i32: 1, 1, 1, 1, 1>}> : (index, index, index, index, index) -> !omp.map_bounds_ty
//CHECK-NEXT:        %57 = "omp.map.info"(%47, %12, %52, %56) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 515 : ui64, name = "", partial_map = false, var_type = f32, operandSegmentSizes = array<i32: 1, 1, 0, 2>}> : (memref<?x?xf32>, !llvm.ptr, !omp.map_bounds_ty, !omp.map_bounds_ty) -> memref<?x?xf32>
//CHECK-NEXT{LITERAL}:        %58 = "omp.map.info"(%47, %57) <{map_capture_type = #omp<variable_capture_kind (ByRef)>, map_type = 513 : ui64, members_index = [[0 : i64]], name = "c", partial_map = false, var_type = memref<?x?xf32>, operandSegmentSizes = array<i32: 1, 0, 1, 0>}> : (memref<?x?xf32>, memref<?x?xf32>) -> memref<?x?xf32>
//CHECK-NEXT:        "omp.target"(%42, %45, %46, %58, %41, %57) <{operandSegmentSizes = array<i32: 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0>}> ({
//CHECK-NEXT:        ^1(%59 : memref<?x?xf32>, %60 : memref<100xf32>, %61 : memref<i32>, %62 : memref<?x?xf32>, %63 : memref<?x?xf32>, %64 : memref<?x?xf32>):
//CHECK-NEXT:          %65 = arith.constant 1 : i32
//CHECK-NEXT:          %66 = arith.index_cast %65 : i32 to index
//CHECK-NEXT:          %67 = arith.constant 100 : i32
//CHECK-NEXT:          %68 = arith.index_cast %67 : i32 to index
//CHECK-NEXT:          %69 = arith.constant 1 : index
//CHECK-NEXT:          %70 = arith.index_cast %66 : index to i32
//CHECK-NEXT:          %71 = arith.addi %68, %69 : index
//CHECK-NEXT:          %72 = arith.constant 0 : index
//CHECK-NEXT:          %73 = arith.constant 4 : index
//CHECK-NEXT:          %74 = scf.for %75 = %66 to %71 step %69 iter_args(%76 = %70) -> (i32) {
//CHECK-NEXT:            memref.store %76, %61[] : memref<i32>
//CHECK-NEXT:            %77 = memref.load %61[] : memref<i32>
//CHECK-NEXT:            %78 = arith.extui %77 : i32 to i64
//CHECK-NEXT:            %79 = arith.index_cast %78 : i64 to index
//CHECK-NEXT:            %80 = arith.subi %79, %69 : index
//CHECK-NEXT:            %81 = memref.load %59[%72, %80] : memref<?x?xf32>
//CHECK-NEXT:            %82 = memref.load %60[%80] : memref<100xf32>
//CHECK-NEXT:            %83 = arith.addf %81, %82 fastmath<contract> : f32
//CHECK-NEXT:            memref.store %83, %62[%73, %80] : memref<?x?xf32>
//CHECK-NEXT:            %84 = memref.load %61[] : memref<i32>
//CHECK-NEXT:            %85 = arith.index_cast %69 : index to i32
//CHECK-NEXT:            %86 = arith.addi %84, %85 : i32
//CHECK-NEXT:            scf.yield %86 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %74, %61[] : memref<i32>
//CHECK-NEXT:          "omp.terminator"() : () -> ()
//CHECK-NEXT:        }) : (memref<?x?xf32>, memref<100xf32>, memref<i32>, memref<?x?xf32>, memref<?x?xf32>, memref<?x?xf32>) -> ()
//CHECK-NEXT:        "omp.terminator"() : () -> ()
//CHECK-NEXT:      }) : (memref<?x?xf32>, memref<?x?xf32>) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMex7_testPcalc() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
