// RUN: xftn %S/../../../../examples/fragments/pointers.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMpointers_testEptr3", type = memref<memref<?xf32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    func.func @_QMpointers_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %2 = memref.get_global @_QMpointers_testEptr3 : memref<memref<?xf32>>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %6 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %8 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %9 = memref.get_global @_QMpointers_testFcalcEptr1 : memref<memref<?xf32>>
//CHECK-NEXT:      %10 = memref.get_global @_QMpointers_testFcalcEptr2 : memref<memref<?xf32>>
//CHECK-NEXT:      %11 = memref.get_global @_QMpointers_testFcalcEptr_md : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %12 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:      %13 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %14 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %15 = arith.constant 100 : index
//CHECK-NEXT:      %16 = memref.alloc(%15) : memref<?xf32>
//CHECK-NEXT:      memref.store %16, %3[] : memref<memref<?xf32>>
//CHECK-NEXT:      %17 = memref.alloc(%15) : memref<?xf32>
//CHECK-NEXT:      memref.store %17, %4[] : memref<memref<?xf32>>
//CHECK-NEXT:      %18 = arith.constant 10 : index
//CHECK-NEXT:      %19 = memref.alloc(%18, %18, %18) : memref<?x?x?xi32>
//CHECK-NEXT:      memref.store %19, %5[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %20 = memref.alloc(%18) : memref<?xf32>
//CHECK-NEXT:      memref.store %20, %14[] : memref<memref<?xf32>>
//CHECK-NEXT:      %21 = memref.alloc(%18) : memref<?xf32>
//CHECK-NEXT:      memref.store %21, %13[] : memref<memref<?xf32>>
//CHECK-NEXT:      %22 = memref.load %14[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %22, %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      %23 = memref.load %13[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %23, %10[] : memref<memref<?xf32>>
//CHECK-NEXT:      %24 = memref.get_global @_QQro.10xr4.0 : memref<10xf32>
//CHECK-NEXT:      %25 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      %26 = "memref.cast"(%24) : (memref<10xf32>) -> memref<?xf32>
//CHECK-NEXT:      "memref.copy"(%26, %25) : (memref<?xf32>, memref<?xf32>) -> ()
//CHECK-NEXT:      %27 = memref.get_global @_QQro.10xr4.1 : memref<10xf32>
//CHECK-NEXT:      %28 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:      %29 = "memref.cast"(%27) : (memref<10xf32>) -> memref<?xf32>
//CHECK-NEXT:      "memref.copy"(%29, %28) : (memref<?xf32>, memref<?xf32>) -> ()
//CHECK-NEXT:      %30 = arith.constant 1 : i32
//CHECK-NEXT:      %31 = arith.index_cast %30 : i32 to index
//CHECK-NEXT:      %32 = arith.constant 10 : i32
//CHECK-NEXT:      %33 = arith.index_cast %32 : i32 to index
//CHECK-NEXT:      %34 = arith.constant 1 : index
//CHECK-NEXT:      %35 = arith.index_cast %31 : index to i32
//CHECK-NEXT:      %36 = arith.addi %33, %34 : index
//CHECK-NEXT:      %37 = scf.for %38 = %31 to %36 step %34 iter_args(%39 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %39, %6[] : memref<i32>
//CHECK-NEXT:        %40 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %41 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %42 = arith.extui %41 : i32 to i64
//CHECK-NEXT:          %43 = arith.index_cast %42 : i64 to index
//CHECK-NEXT:          %44 = arith.subi %43, %34 : index
//CHECK-NEXT:          %45 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:          %46 = memref.load %45[%44] : memref<?xf32>
//CHECK-NEXT:          %47 = arith.sitofp %41 : i32 to f32
//CHECK-NEXT:          %48 = arith.cmpf oeq, %46, %47 : f32
//CHECK-NEXT:          %49 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %48, %49[] : memref<i1>
//CHECK-NEXT:          %50 = arith.constant {{.*}} : index
//CHECK-NEXT:          %51 = arith.index_cast %50 : index to i64
//CHECK-NEXT:          %52 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %53 = "llvm.insertvalue"(%52, %40) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %54 = "llvm.insertvalue"(%53, %51) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %55 = arith.constant 29 : i32
//CHECK-NEXT:          %56 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %55, %56[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%49, %54, %56) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %57 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %58 = arith.extui %57 : i32 to i64
//CHECK-NEXT:          %59 = arith.index_cast %58 : i64 to index
//CHECK-NEXT:          %60 = arith.subi %59, %34 : index
//CHECK-NEXT:          %61 = memref.load %14[] : memref<memref<?xf32>>
//CHECK-NEXT:          %62 = memref.load %61[%60] : memref<?xf32>
//CHECK-NEXT:          %63 = arith.sitofp %57 : i32 to f32
//CHECK-NEXT:          %64 = arith.cmpf oeq, %62, %63 : f32
//CHECK-NEXT:          %65 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %64, %65[] : memref<i1>
//CHECK-NEXT:          %66 = arith.constant {{.*}} : index
//CHECK-NEXT:          %67 = arith.index_cast %66 : index to i64
//CHECK-NEXT:          %68 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %69 = "llvm.insertvalue"(%68, %40) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %70 = "llvm.insertvalue"(%69, %67) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %71 = arith.constant 30 : i32
//CHECK-NEXT:          %72 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %71, %72[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%65, %70, %72) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %73 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %74 = arith.extui %73 : i32 to i64
//CHECK-NEXT:          %75 = arith.index_cast %74 : i64 to index
//CHECK-NEXT:          %76 = arith.subi %75, %34 : index
//CHECK-NEXT:          %77 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:          %78 = memref.load %77[%76] : memref<?xf32>
//CHECK-NEXT:          %79 = arith.addi %73, %32 : i32
//CHECK-NEXT:          %80 = arith.sitofp %79 : i32 to f32
//CHECK-NEXT:          %81 = arith.cmpf oeq, %78, %80 : f32
//CHECK-NEXT:          %82 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %81, %82[] : memref<i1>
//CHECK-NEXT:          %83 = arith.constant {{.*}} : index
//CHECK-NEXT:          %84 = arith.index_cast %83 : index to i64
//CHECK-NEXT:          %85 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %86 = "llvm.insertvalue"(%85, %40) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %87 = "llvm.insertvalue"(%86, %84) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %88 = arith.constant 31 : i32
//CHECK-NEXT:          %89 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %88, %89[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%82, %87, %89) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %90 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %91 = arith.extui %90 : i32 to i64
//CHECK-NEXT:          %92 = arith.index_cast %91 : i64 to index
//CHECK-NEXT:          %93 = arith.subi %92, %34 : index
//CHECK-NEXT:          %94 = memref.load %13[] : memref<memref<?xf32>>
//CHECK-NEXT:          %95 = memref.load %94[%93] : memref<?xf32>
//CHECK-NEXT:          %96 = arith.addi %90, %32 : i32
//CHECK-NEXT:          %97 = arith.sitofp %96 : i32 to f32
//CHECK-NEXT:          %98 = arith.cmpf oeq, %95, %97 : f32
//CHECK-NEXT:          %99 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %98, %99[] : memref<i1>
//CHECK-NEXT:          %100 = arith.constant {{.*}} : index
//CHECK-NEXT:          %101 = arith.index_cast %100 : index to i64
//CHECK-NEXT:          %102 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %103 = "llvm.insertvalue"(%102, %40) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %104 = "llvm.insertvalue"(%103, %101) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %105 = arith.constant 32 : i32
//CHECK-NEXT:          %106 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %105, %106[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%99, %104, %106) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %107 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %108 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %109 = arith.addi %107, %108 : i32
//CHECK-NEXT:        scf.yield %109 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %37, %6[] : memref<i32>
//CHECK-NEXT:      %110 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      %111 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:      "memref.copy"(%110, %111) : (memref<?xf32>, memref<?xf32>) -> ()
//CHECK-NEXT:      %112 = scf.for %113 = %31 to %36 step %34 iter_args(%114 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %114, %6[] : memref<i32>
//CHECK-NEXT:        %115 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %116 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %117 = arith.extui %116 : i32 to i64
//CHECK-NEXT:          %118 = arith.index_cast %117 : i64 to index
//CHECK-NEXT:          %119 = arith.subi %118, %34 : index
//CHECK-NEXT:          %120 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:          %121 = memref.load %120[%119] : memref<?xf32>
//CHECK-NEXT:          %122 = arith.sitofp %116 : i32 to f32
//CHECK-NEXT:          %123 = arith.cmpf oeq, %121, %122 : f32
//CHECK-NEXT:          %124 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %123, %124[] : memref<i1>
//CHECK-NEXT:          %125 = arith.constant {{.*}} : index
//CHECK-NEXT:          %126 = arith.index_cast %125 : index to i64
//CHECK-NEXT:          %127 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %128 = "llvm.insertvalue"(%127, %115) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %129 = "llvm.insertvalue"(%128, %126) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %130 = arith.constant 39 : i32
//CHECK-NEXT:          %131 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %130, %131[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%124, %129, %131) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %132 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %133 = arith.extui %132 : i32 to i64
//CHECK-NEXT:          %134 = arith.index_cast %133 : i64 to index
//CHECK-NEXT:          %135 = arith.subi %134, %34 : index
//CHECK-NEXT:          %136 = memref.load %13[] : memref<memref<?xf32>>
//CHECK-NEXT:          %137 = memref.load %136[%135] : memref<?xf32>
//CHECK-NEXT:          %138 = arith.sitofp %132 : i32 to f32
//CHECK-NEXT:          %139 = arith.cmpf oeq, %137, %138 : f32
//CHECK-NEXT:          %140 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %139, %140[] : memref<i1>
//CHECK-NEXT:          %141 = arith.constant {{.*}} : index
//CHECK-NEXT:          %142 = arith.index_cast %141 : index to i64
//CHECK-NEXT:          %143 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %144 = "llvm.insertvalue"(%143, %115) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %145 = "llvm.insertvalue"(%144, %142) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %146 = arith.constant 40 : i32
//CHECK-NEXT:          %147 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %146, %147[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%140, %145, %147) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %148 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %149 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %150 = arith.addi %148, %149 : i32
//CHECK-NEXT:        scf.yield %150 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %112, %6[] : memref<i32>
//CHECK-NEXT:      %151 = arith.constant 100 : i32
//CHECK-NEXT:      %152 = arith.index_cast %151 : i32 to index
//CHECK-NEXT:      %153 = arith.addi %152, %34 : index
//CHECK-NEXT:      %154 = scf.for %155 = %31 to %153 step %34 iter_args(%156 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %156, %6[] : memref<i32>
//CHECK-NEXT:        %157 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %158 = arith.sitofp %157 : i32 to f32
//CHECK-NEXT:        %159 = arith.extui %157 : i32 to i64
//CHECK-NEXT:        %160 = arith.index_cast %159 : i64 to index
//CHECK-NEXT:        %161 = arith.subi %160, %34 : index
//CHECK-NEXT:        %162 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:        memref.store %158, %162[%161] : memref<?xf32>
//CHECK-NEXT:        %163 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %164 = arith.subi %151, %163 : i32
//CHECK-NEXT:        %165 = arith.sitofp %164 : i32 to f32
//CHECK-NEXT:        %166 = arith.extui %163 : i32 to i64
//CHECK-NEXT:        %167 = arith.index_cast %166 : i64 to index
//CHECK-NEXT:        %168 = arith.subi %167, %34 : index
//CHECK-NEXT:        %169 = memref.load %4[] : memref<memref<?xf32>>
//CHECK-NEXT:        memref.store %165, %169[%168] : memref<?xf32>
//CHECK-NEXT:        %170 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %171 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %172 = arith.addi %170, %171 : i32
//CHECK-NEXT:        scf.yield %172 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %154, %6[] : memref<i32>
//CHECK-NEXT:      %173 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %173, %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      %174 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %175 = arith.constant true
//CHECK-NEXT:        %176 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %175, %176[] : memref<i1>
//CHECK-NEXT:        %177 = arith.constant {{.*}} : index
//CHECK-NEXT:        %178 = arith.index_cast %177 : index to i64
//CHECK-NEXT:        %179 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %180 = "llvm.insertvalue"(%179, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %181 = "llvm.insertvalue"(%180, %178) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %182 = arith.constant 51 : i32
//CHECK-NEXT:        %183 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %182, %183[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%176, %181, %183) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %184 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %185 = arith.constant 0 : index
//CHECK-NEXT:        %186 = "memref.dim"(%184, %185) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %187 = arith.index_cast %186 : index to i64
//CHECK-NEXT:        %188 = arith.trunci %187 : i64 to i32
//CHECK-NEXT:        %189 = arith.cmpi eq, %188, %151 : i32
//CHECK-NEXT:        %190 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %189, %190[] : memref<i1>
//CHECK-NEXT:        %191 = arith.constant {{.*}} : index
//CHECK-NEXT:        %192 = arith.index_cast %191 : index to i64
//CHECK-NEXT:        %193 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %194 = "llvm.insertvalue"(%193, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %195 = "llvm.insertvalue"(%194, %192) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %196 = arith.constant 52 : i32
//CHECK-NEXT:        %197 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %196, %197[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%190, %195, %197) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %198 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %199 = arith.constant 0 : index
//CHECK-NEXT:        %200 = "memref.dim"(%198, %199) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %201 = arith.index_cast %200 : index to i64
//CHECK-NEXT:        %202 = arith.trunci %201 : i64 to i32
//CHECK-NEXT:        %203 = arith.cmpi eq, %202, %151 : i32
//CHECK-NEXT:        %204 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %203, %204[] : memref<i1>
//CHECK-NEXT:        %205 = arith.constant {{.*}} : index
//CHECK-NEXT:        %206 = arith.index_cast %205 : index to i64
//CHECK-NEXT:        %207 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %208 = "llvm.insertvalue"(%207, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %209 = "llvm.insertvalue"(%208, %206) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %210 = arith.constant 53 : i32
//CHECK-NEXT:        %211 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %210, %211[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%204, %209, %211) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %212 = scf.for %213 = %31 to %153 step %34 iter_args(%214 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %214, %6[] : memref<i32>
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %215 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %216 = arith.extui %215 : i32 to i64
//CHECK-NEXT:          %217 = arith.index_cast %216 : i64 to index
//CHECK-NEXT:          %218 = arith.subi %217, %34 : index
//CHECK-NEXT:          %219 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:          %220 = memref.load %219[%218] : memref<?xf32>
//CHECK-NEXT:          %221 = arith.sitofp %215 : i32 to f32
//CHECK-NEXT:          %222 = arith.cmpf oeq, %220, %221 : f32
//CHECK-NEXT:          %223 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %222, %223[] : memref<i1>
//CHECK-NEXT:          %224 = arith.constant {{.*}} : index
//CHECK-NEXT:          %225 = arith.index_cast %224 : index to i64
//CHECK-NEXT:          %226 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %227 = "llvm.insertvalue"(%226, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %228 = "llvm.insertvalue"(%227, %225) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %229 = arith.constant 55 : i32
//CHECK-NEXT:          %230 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %229, %230[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%223, %228, %230) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %231 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %232 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %233 = arith.addi %231, %232 : i32
//CHECK-NEXT:        scf.yield %233 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %212, %6[] : memref<i32>
//CHECK-NEXT:      %234 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %234, %10[] : memref<memref<?xf32>>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %235 = arith.constant true
//CHECK-NEXT:        %236 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %235, %236[] : memref<i1>
//CHECK-NEXT:        %237 = arith.constant {{.*}} : index
//CHECK-NEXT:        %238 = arith.index_cast %237 : index to i64
//CHECK-NEXT:        %239 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %240 = "llvm.insertvalue"(%239, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %241 = "llvm.insertvalue"(%240, %238) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %242 = arith.constant 60 : i32
//CHECK-NEXT:        %243 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %242, %243[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%236, %241, %243) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %244 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:        %245 = arith.constant 0 : index
//CHECK-NEXT:        %246 = "memref.dim"(%244, %245) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %247 = arith.index_cast %246 : index to i64
//CHECK-NEXT:        %248 = arith.trunci %247 : i64 to i32
//CHECK-NEXT:        %249 = arith.cmpi eq, %248, %151 : i32
//CHECK-NEXT:        %250 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %249, %250[] : memref<i1>
//CHECK-NEXT:        %251 = arith.constant {{.*}} : index
//CHECK-NEXT:        %252 = arith.index_cast %251 : index to i64
//CHECK-NEXT:        %253 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %254 = "llvm.insertvalue"(%253, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %255 = "llvm.insertvalue"(%254, %252) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %256 = arith.constant 61 : i32
//CHECK-NEXT:        %257 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %256, %257[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%250, %255, %257) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %258 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:        %259 = arith.constant 0 : index
//CHECK-NEXT:        %260 = "memref.dim"(%258, %259) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %261 = arith.index_cast %260 : index to i64
//CHECK-NEXT:        %262 = arith.trunci %261 : i64 to i32
//CHECK-NEXT:        %263 = arith.cmpi eq, %262, %151 : i32
//CHECK-NEXT:        %264 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %263, %264[] : memref<i1>
//CHECK-NEXT:        %265 = arith.constant {{.*}} : index
//CHECK-NEXT:        %266 = arith.index_cast %265 : index to i64
//CHECK-NEXT:        %267 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %268 = "llvm.insertvalue"(%267, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %269 = "llvm.insertvalue"(%268, %266) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %270 = arith.constant 62 : i32
//CHECK-NEXT:        %271 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %270, %271[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%264, %269, %271) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %272 = scf.for %273 = %31 to %153 step %34 iter_args(%274 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %274, %6[] : memref<i32>
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %275 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %276 = arith.extui %275 : i32 to i64
//CHECK-NEXT:          %277 = arith.index_cast %276 : i64 to index
//CHECK-NEXT:          %278 = arith.subi %277, %34 : index
//CHECK-NEXT:          %279 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:          %280 = memref.load %279[%278] : memref<?xf32>
//CHECK-NEXT:          %281 = arith.sitofp %275 : i32 to f32
//CHECK-NEXT:          %282 = arith.cmpf oeq, %280, %281 : f32
//CHECK-NEXT:          %283 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %282, %283[] : memref<i1>
//CHECK-NEXT:          %284 = arith.constant {{.*}} : index
//CHECK-NEXT:          %285 = arith.index_cast %284 : index to i64
//CHECK-NEXT:          %286 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %287 = "llvm.insertvalue"(%286, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %288 = "llvm.insertvalue"(%287, %285) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %289 = arith.constant 64 : i32
//CHECK-NEXT:          %290 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %289, %290[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%283, %288, %290) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %291 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %292 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %293 = arith.addi %291, %292 : i32
//CHECK-NEXT:        scf.yield %293 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %272, %6[] : memref<i32>
//CHECK-NEXT:      %294 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %294, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %295 = arith.constant true
//CHECK-NEXT:        %296 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %295, %296[] : memref<i1>
//CHECK-NEXT:        %297 = arith.constant {{.*}} : index
//CHECK-NEXT:        %298 = arith.index_cast %297 : index to i64
//CHECK-NEXT:        %299 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %300 = "llvm.insertvalue"(%299, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %301 = "llvm.insertvalue"(%300, %298) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %302 = arith.constant 69 : i32
//CHECK-NEXT:        %303 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %302, %303[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%296, %301, %303) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %304 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %305 = arith.constant 0 : index
//CHECK-NEXT:        %306 = "memref.dim"(%304, %305) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %307 = arith.index_cast %306 : index to i64
//CHECK-NEXT:        %308 = arith.trunci %307 : i64 to i32
//CHECK-NEXT:        %309 = arith.cmpi eq, %308, %151 : i32
//CHECK-NEXT:        %310 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %309, %310[] : memref<i1>
//CHECK-NEXT:        %311 = arith.constant {{.*}} : index
//CHECK-NEXT:        %312 = arith.index_cast %311 : index to i64
//CHECK-NEXT:        %313 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %314 = "llvm.insertvalue"(%313, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %315 = "llvm.insertvalue"(%314, %312) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %316 = arith.constant 70 : i32
//CHECK-NEXT:        %317 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %316, %317[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%310, %315, %317) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %318 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %319 = arith.constant 0 : index
//CHECK-NEXT:        %320 = "memref.dim"(%318, %319) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %321 = arith.index_cast %320 : index to i64
//CHECK-NEXT:        %322 = arith.trunci %321 : i64 to i32
//CHECK-NEXT:        %323 = arith.cmpi eq, %322, %151 : i32
//CHECK-NEXT:        %324 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %323, %324[] : memref<i1>
//CHECK-NEXT:        %325 = arith.constant {{.*}} : index
//CHECK-NEXT:        %326 = arith.index_cast %325 : index to i64
//CHECK-NEXT:        %327 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %328 = "llvm.insertvalue"(%327, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %329 = "llvm.insertvalue"(%328, %326) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %330 = arith.constant 71 : i32
//CHECK-NEXT:        %331 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %330, %331[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%324, %329, %331) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %332 = scf.for %333 = %31 to %153 step %34 iter_args(%334 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %334, %6[] : memref<i32>
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %335 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %336 = arith.extui %335 : i32 to i64
//CHECK-NEXT:          %337 = arith.index_cast %336 : i64 to index
//CHECK-NEXT:          %338 = arith.subi %337, %34 : index
//CHECK-NEXT:          %339 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:          %340 = memref.load %339[%338] : memref<?xf32>
//CHECK-NEXT:          %341 = arith.sitofp %335 : i32 to f32
//CHECK-NEXT:          %342 = arith.cmpf oeq, %340, %341 : f32
//CHECK-NEXT:          %343 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %342, %343[] : memref<i1>
//CHECK-NEXT:          %344 = arith.constant {{.*}} : index
//CHECK-NEXT:          %345 = arith.index_cast %344 : index to i64
//CHECK-NEXT:          %346 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %347 = "llvm.insertvalue"(%346, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %348 = "llvm.insertvalue"(%347, %345) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %349 = arith.constant 73 : i32
//CHECK-NEXT:          %350 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %349, %350[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%343, %348, %350) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %351 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %352 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %353 = arith.addi %351, %352 : i32
//CHECK-NEXT:        scf.yield %353 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %332, %6[] : memref<i32>
//CHECK-NEXT:      %354 = arith.constant 3.400000e+01 : f32
//CHECK-NEXT:      %355 = arith.constant 19 : index
//CHECK-NEXT:      %356 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %354, %356[%355] : memref<?xf32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %357 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:        %358 = memref.load %357[%355] : memref<?xf32>
//CHECK-NEXT:        %359 = arith.cmpf oeq, %358, %354 : f32
//CHECK-NEXT:        %360 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %359, %360[] : memref<i1>
//CHECK-NEXT:        %361 = arith.constant {{.*}} : index
//CHECK-NEXT:        %362 = arith.index_cast %361 : index to i64
//CHECK-NEXT:        %363 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %364 = "llvm.insertvalue"(%363, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %365 = "llvm.insertvalue"(%364, %362) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %366 = arith.constant 78 : i32
//CHECK-NEXT:        %367 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %366, %367[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%360, %365, %367) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %368 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %369 = memref.load %368[%355] : memref<?xf32>
//CHECK-NEXT:        %370 = arith.cmpf oeq, %369, %354 : f32
//CHECK-NEXT:        %371 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %370, %371[] : memref<i1>
//CHECK-NEXT:        %372 = arith.constant {{.*}} : index
//CHECK-NEXT:        %373 = arith.index_cast %372 : index to i64
//CHECK-NEXT:        %374 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %375 = "llvm.insertvalue"(%374, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %376 = "llvm.insertvalue"(%375, %373) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %377 = arith.constant 79 : i32
//CHECK-NEXT:        %378 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %377, %378[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%371, %376, %378) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %379 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:        %380 = memref.load %379[%355] : memref<?xf32>
//CHECK-NEXT:        %381 = arith.cmpf oeq, %380, %354 : f32
//CHECK-NEXT:        %382 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %381, %382[] : memref<i1>
//CHECK-NEXT:        %383 = arith.constant {{.*}} : index
//CHECK-NEXT:        %384 = arith.index_cast %383 : index to i64
//CHECK-NEXT:        %385 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %386 = "llvm.insertvalue"(%385, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %387 = "llvm.insertvalue"(%386, %384) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %388 = arith.constant 80 : i32
//CHECK-NEXT:        %389 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %388, %389[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%382, %387, %389) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %390 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %391 = memref.load %390[%355] : memref<?xf32>
//CHECK-NEXT:        %392 = arith.cmpf oeq, %391, %354 : f32
//CHECK-NEXT:        %393 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %392, %393[] : memref<i1>
//CHECK-NEXT:        %394 = arith.constant {{.*}} : index
//CHECK-NEXT:        %395 = arith.index_cast %394 : index to i64
//CHECK-NEXT:        %396 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %397 = "llvm.insertvalue"(%396, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %398 = "llvm.insertvalue"(%397, %395) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %399 = arith.constant 81 : i32
//CHECK-NEXT:        %400 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %399, %400[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%393, %398, %400) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %401 = memref.load %4[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %401, %10[] : memref<memref<?xf32>>
//CHECK-NEXT:      %402 = arith.constant 20 : i32
//CHECK-NEXT:      %403 = scf.for %404 = %31 to %153 step %34 iter_args(%405 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %405, %6[] : memref<i32>
//CHECK-NEXT:        %406 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %407 = arith.cmpi eq, %406, %402 : i32
//CHECK-NEXT:        scf.if %407 {
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %408 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %409 = arith.extui %408 : i32 to i64
//CHECK-NEXT:            %410 = arith.index_cast %409 : i64 to index
//CHECK-NEXT:            %411 = arith.subi %410, %34 : index
//CHECK-NEXT:            %412 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:            %413 = memref.load %412[%411] : memref<?xf32>
//CHECK-NEXT:            %414 = arith.cmpf oeq, %413, %354 : f32
//CHECK-NEXT:            %415 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %414, %415[] : memref<i1>
//CHECK-NEXT:            %416 = arith.constant {{.*}} : index
//CHECK-NEXT:            %417 = arith.index_cast %416 : index to i64
//CHECK-NEXT:            %418 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %419 = "llvm.insertvalue"(%418, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %420 = "llvm.insertvalue"(%419, %417) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %421 = arith.constant 87 : i32
//CHECK-NEXT:            %422 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %421, %422[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%415, %420, %422) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:        } else {
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %423 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %424 = arith.extui %423 : i32 to i64
//CHECK-NEXT:            %425 = arith.index_cast %424 : i64 to index
//CHECK-NEXT:            %426 = arith.subi %425, %34 : index
//CHECK-NEXT:            %427 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:            %428 = memref.load %427[%426] : memref<?xf32>
//CHECK-NEXT:            %429 = arith.sitofp %423 : i32 to f32
//CHECK-NEXT:            %430 = arith.cmpf oeq, %428, %429 : f32
//CHECK-NEXT:            %431 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %430, %431[] : memref<i1>
//CHECK-NEXT:            %432 = arith.constant {{.*}} : index
//CHECK-NEXT:            %433 = arith.index_cast %432 : index to i64
//CHECK-NEXT:            %434 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %435 = "llvm.insertvalue"(%434, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %436 = "llvm.insertvalue"(%435, %433) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %437 = arith.constant 89 : i32
//CHECK-NEXT:            %438 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %437, %438[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%431, %436, %438) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:        }
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %439 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %440 = arith.extui %439 : i32 to i64
//CHECK-NEXT:          %441 = arith.index_cast %440 : i64 to index
//CHECK-NEXT:          %442 = arith.subi %441, %34 : index
//CHECK-NEXT:          %443 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:          %444 = memref.load %443[%442] : memref<?xf32>
//CHECK-NEXT:          %445 = arith.subi %151, %439 : i32
//CHECK-NEXT:          %446 = arith.sitofp %445 : i32 to f32
//CHECK-NEXT:          %447 = arith.cmpf oeq, %444, %446 : f32
//CHECK-NEXT:          %448 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %447, %448[] : memref<i1>
//CHECK-NEXT:          %449 = arith.constant {{.*}} : index
//CHECK-NEXT:          %450 = arith.index_cast %449 : index to i64
//CHECK-NEXT:          %451 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %452 = "llvm.insertvalue"(%451, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %453 = "llvm.insertvalue"(%452, %450) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %454 = arith.constant 91 : i32
//CHECK-NEXT:          %455 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %454, %455[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%448, %453, %455) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %456 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %457 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %458 = arith.addi %456, %457 : i32
//CHECK-NEXT:        scf.yield %458 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %403, %6[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %459 = "memref.extract_aligned_pointer_as_index"(%9) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %460 = arith.index_cast %459 : index to i64
//CHECK-NEXT:        %461 = "llvm.inttoptr"(%460) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %462 = "memref.extract_aligned_pointer_as_index"(%10) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %463 = arith.index_cast %462 : index to i64
//CHECK-NEXT:        %464 = "llvm.inttoptr"(%463) : (i64) -> !llvm.ptr
//CHECK-NEXT:        func.call @_QMpointers_testPswap(%461, %464) : (!llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %465 = scf.for %466 = %31 to %153 step %34 iter_args(%467 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %467, %6[] : memref<i32>
//CHECK-NEXT:        %468 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %469 = arith.cmpi eq, %468, %402 : i32
//CHECK-NEXT:        scf.if %469 {
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %470 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %471 = arith.extui %470 : i32 to i64
//CHECK-NEXT:            %472 = arith.index_cast %471 : i64 to index
//CHECK-NEXT:            %473 = arith.subi %472, %34 : index
//CHECK-NEXT:            %474 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:            %475 = memref.load %474[%473] : memref<?xf32>
//CHECK-NEXT:            %476 = arith.cmpf oeq, %475, %354 : f32
//CHECK-NEXT:            %477 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %476, %477[] : memref<i1>
//CHECK-NEXT:            %478 = arith.constant {{.*}} : index
//CHECK-NEXT:            %479 = arith.index_cast %478 : index to i64
//CHECK-NEXT:            %480 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %481 = "llvm.insertvalue"(%480, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %482 = "llvm.insertvalue"(%481, %479) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %483 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %151, %483[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%477, %482, %483) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:        } else {
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %484 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %485 = arith.extui %484 : i32 to i64
//CHECK-NEXT:            %486 = arith.index_cast %485 : i64 to index
//CHECK-NEXT:            %487 = arith.subi %486, %34 : index
//CHECK-NEXT:            %488 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:            %489 = memref.load %488[%487] : memref<?xf32>
//CHECK-NEXT:            %490 = arith.sitofp %484 : i32 to f32
//CHECK-NEXT:            %491 = arith.cmpf oeq, %489, %490 : f32
//CHECK-NEXT:            %492 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %491, %492[] : memref<i1>
//CHECK-NEXT:            %493 = arith.constant {{.*}} : index
//CHECK-NEXT:            %494 = arith.index_cast %493 : index to i64
//CHECK-NEXT:            %495 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %496 = "llvm.insertvalue"(%495, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %497 = "llvm.insertvalue"(%496, %494) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %498 = arith.constant 102 : i32
//CHECK-NEXT:            %499 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %498, %499[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%492, %497, %499) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:        }
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %500 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %501 = arith.extui %500 : i32 to i64
//CHECK-NEXT:          %502 = arith.index_cast %501 : i64 to index
//CHECK-NEXT:          %503 = arith.subi %502, %34 : index
//CHECK-NEXT:          %504 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:          %505 = memref.load %504[%503] : memref<?xf32>
//CHECK-NEXT:          %506 = arith.subi %151, %500 : i32
//CHECK-NEXT:          %507 = arith.sitofp %506 : i32 to f32
//CHECK-NEXT:          %508 = arith.cmpf oeq, %505, %507 : f32
//CHECK-NEXT:          %509 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %508, %509[] : memref<i1>
//CHECK-NEXT:          %510 = arith.constant {{.*}} : index
//CHECK-NEXT:          %511 = arith.index_cast %510 : index to i64
//CHECK-NEXT:          %512 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %513 = "llvm.insertvalue"(%512, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %514 = "llvm.insertvalue"(%513, %511) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %515 = arith.constant 104 : i32
//CHECK-NEXT:          %516 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %515, %516[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%509, %514, %516) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %517 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %518 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %519 = arith.addi %517, %518 : i32
//CHECK-NEXT:        scf.yield %519 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %465, %6[] : memref<i32>
//CHECK-NEXT:      %520 = arith.constant 2 : index
//CHECK-NEXT:      %521 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      %522 = memref.load %521[%520] : memref<?xf32>
//CHECK-NEXT:      memref.store %522, %12[] : memref<f32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %523 = memref.load %12[] : memref<f32>
//CHECK-NEXT:        %524 = arith.constant 9.700000e+01 : f32
//CHECK-NEXT:        %525 = arith.cmpf oeq, %523, %524 : f32
//CHECK-NEXT:        %526 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %525, %526[] : memref<i1>
//CHECK-NEXT:        %527 = arith.constant {{.*}} : index
//CHECK-NEXT:        %528 = arith.index_cast %527 : index to i64
//CHECK-NEXT:        %529 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %530 = "llvm.insertvalue"(%529, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %531 = "llvm.insertvalue"(%530, %528) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %532 = arith.constant 109 : i32
//CHECK-NEXT:        %533 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %532, %533[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%526, %531, %533) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %534 = "memref.extract_aligned_pointer_as_index"(%9) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %535 = arith.index_cast %534 : index to i64
//CHECK-NEXT:        %536 = "llvm.inttoptr"(%535) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %537 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %402, %537[] : memref<i32>
//CHECK-NEXT:        %538 = arith.constant 3.100000e+00 : f32
//CHECK-NEXT:        %539 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %538, %539[] : memref<f32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_array_ptr_one(%536, %537, %539) : (!llvm.ptr, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %540 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %541 = memref.load %540[%355] : memref<?xf32>
//CHECK-NEXT:        %542 = arith.constant 3.100000e+00 : f32
//CHECK-NEXT:        %543 = arith.cmpf oeq, %541, %542 : f32
//CHECK-NEXT:        %544 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %543, %544[] : memref<i1>
//CHECK-NEXT:        %545 = arith.constant {{.*}} : index
//CHECK-NEXT:        %546 = arith.index_cast %545 : index to i64
//CHECK-NEXT:        %547 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %548 = "llvm.insertvalue"(%547, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %549 = "llvm.insertvalue"(%548, %546) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %550 = arith.constant 112 : i32
//CHECK-NEXT:        %551 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %550, %551[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%544, %549, %551) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %552 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %553 = arith.constant 19 : i32
//CHECK-NEXT:        %554 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %553, %554[] : memref<i32>
//CHECK-NEXT:        %555 = arith.constant 8.764000e+01 : f32
//CHECK-NEXT:        %556 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %555, %556[] : memref<f32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_array_one(%552, %554, %556) : (memref<?xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %557 = arith.constant 18 : index
//CHECK-NEXT:        %558 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %559 = memref.load %558[%557] : memref<?xf32>
//CHECK-NEXT:        %560 = arith.constant 8.764000e+01 : f32
//CHECK-NEXT:        %561 = arith.cmpf oeq, %559, %560 : f32
//CHECK-NEXT:        %562 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %561, %562[] : memref<i1>
//CHECK-NEXT:        %563 = arith.constant {{.*}} : index
//CHECK-NEXT:        %564 = arith.index_cast %563 : index to i64
//CHECK-NEXT:        %565 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %566 = "llvm.insertvalue"(%565, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %567 = "llvm.insertvalue"(%566, %564) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %568 = arith.constant 115 : i32
//CHECK-NEXT:        %569 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %568, %569[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%562, %567, %569) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %570 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %571 = "memref.cast"(%570) : (memref<?xf32>) -> memref<100xf32>
//CHECK-NEXT:        %572 = arith.constant 76 : i32
//CHECK-NEXT:        %573 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %572, %573[] : memref<i32>
//CHECK-NEXT:        %574 = arith.constant 9.923200e+02 : f32
//CHECK-NEXT:        %575 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %574, %575[] : memref<f32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_array_two(%571, %573, %575) : (memref<100xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %576 = arith.constant 75 : index
//CHECK-NEXT:        %577 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %578 = memref.load %577[%576] : memref<?xf32>
//CHECK-NEXT:        %579 = arith.constant 9.923200e+02 : f32
//CHECK-NEXT:        %580 = arith.cmpf oeq, %578, %579 : f32
//CHECK-NEXT:        %581 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %580, %581[] : memref<i1>
//CHECK-NEXT:        %582 = arith.constant {{.*}} : index
//CHECK-NEXT:        %583 = arith.index_cast %582 : index to i64
//CHECK-NEXT:        %584 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %585 = "llvm.insertvalue"(%584, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %586 = "llvm.insertvalue"(%585, %583) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %587 = arith.constant 118 : i32
//CHECK-NEXT:        %588 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %587, %588[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%581, %586, %588) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %589 = scf.for %590 = %31 to %36 step %34 iter_args(%591 = %35) -> (i32) {
//CHECK-NEXT:        memref.store %591, %6[] : memref<i32>
//CHECK-NEXT:        %592 = scf.for %593 = %31 to %36 step %34 iter_args(%594 = %35) -> (i32) {
//CHECK-NEXT:          memref.store %594, %7[] : memref<i32>
//CHECK-NEXT:          %595 = scf.for %596 = %31 to %36 step %34 iter_args(%597 = %35) -> (i32) {
//CHECK-NEXT:            memref.store %597, %8[] : memref<i32>
//CHECK-NEXT:            %598 = memref.load %8[] : memref<i32>
//CHECK-NEXT:            %599 = memref.load %7[] : memref<i32>
//CHECK-NEXT:            %600 = arith.muli %599, %32 : i32
//CHECK-NEXT:            %601 = arith.addi %598, %600 : i32
//CHECK-NEXT:            %602 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %603 = arith.muli %602, %151 : i32
//CHECK-NEXT:            %604 = arith.addi %601, %603 : i32
//CHECK-NEXT:            %605 = arith.extui %598 : i32 to i64
//CHECK-NEXT:            %606 = arith.index_cast %605 : i64 to index
//CHECK-NEXT:            %607 = arith.subi %606, %34 : index
//CHECK-NEXT:            %608 = arith.extui %599 : i32 to i64
//CHECK-NEXT:            %609 = arith.index_cast %608 : i64 to index
//CHECK-NEXT:            %610 = arith.subi %609, %34 : index
//CHECK-NEXT:            %611 = arith.extui %602 : i32 to i64
//CHECK-NEXT:            %612 = arith.index_cast %611 : i64 to index
//CHECK-NEXT:            %613 = arith.subi %612, %34 : index
//CHECK-NEXT:            %614 = memref.load %5[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:            memref.store %604, %614[%613, %610, %607] : memref<?x?x?xi32>
//CHECK-NEXT:            %615 = memref.load %8[] : memref<i32>
//CHECK-NEXT:            %616 = arith.index_cast %34 : index to i32
//CHECK-NEXT:            %617 = arith.addi %615, %616 : i32
//CHECK-NEXT:            scf.yield %617 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %595, %8[] : memref<i32>
//CHECK-NEXT:          %618 = memref.load %7[] : memref<i32>
//CHECK-NEXT:          %619 = arith.index_cast %34 : index to i32
//CHECK-NEXT:          %620 = arith.addi %618, %619 : i32
//CHECK-NEXT:          scf.yield %620 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %592, %7[] : memref<i32>
//CHECK-NEXT:        %621 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %622 = arith.index_cast %34 : index to i32
//CHECK-NEXT:        %623 = arith.addi %621, %622 : i32
//CHECK-NEXT:        scf.yield %623 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %589, %6[] : memref<i32>
//CHECK-NEXT:      %624 = memref.load %5[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      memref.store %624, %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %625 = arith.constant true
//CHECK-NEXT:        %626 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %625, %626[] : memref<i1>
//CHECK-NEXT:        %627 = arith.constant {{.*}} : index
//CHECK-NEXT:        %628 = arith.index_cast %627 : index to i64
//CHECK-NEXT:        %629 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %630 = "llvm.insertvalue"(%629, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %631 = "llvm.insertvalue"(%630, %628) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %632 = arith.constant 129 : i32
//CHECK-NEXT:        %633 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %632, %633[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%626, %631, %633) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %634 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %635 = arith.constant 0 : index
//CHECK-NEXT:        %636 = "memref.dim"(%634, %635) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %637 = arith.index_cast %636 : index to i64
//CHECK-NEXT:        %638 = "memref.dim"(%634, %34) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %639 = arith.index_cast %638 : index to i64
//CHECK-NEXT:        %640 = arith.muli %637, %639 : i64
//CHECK-NEXT:        %641 = "memref.dim"(%634, %520) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %642 = arith.index_cast %641 : index to i64
//CHECK-NEXT:        %643 = arith.muli %640, %642 : i64
//CHECK-NEXT:        %644 = arith.trunci %643 : i64 to i32
//CHECK-NEXT:        %645 = arith.constant 1000 : i32
//CHECK-NEXT:        %646 = arith.cmpi eq, %644, %645 : i32
//CHECK-NEXT:        %647 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %646, %647[] : memref<i1>
//CHECK-NEXT:        %648 = arith.constant {{.*}} : index
//CHECK-NEXT:        %649 = arith.index_cast %648 : index to i64
//CHECK-NEXT:        %650 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %651 = "llvm.insertvalue"(%650, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %652 = "llvm.insertvalue"(%651, %649) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %653 = arith.constant 130 : i32
//CHECK-NEXT:        %654 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %653, %654[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%647, %652, %654) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %655 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %656 = "memref.dim"(%655, %34) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %657 = arith.index_cast %656 : index to i64
//CHECK-NEXT:        %658 = arith.trunci %657 : i64 to i32
//CHECK-NEXT:        %659 = arith.cmpi eq, %658, %32 : i32
//CHECK-NEXT:        %660 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %659, %660[] : memref<i1>
//CHECK-NEXT:        %661 = arith.constant {{.*}} : index
//CHECK-NEXT:        %662 = arith.index_cast %661 : index to i64
//CHECK-NEXT:        %663 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %664 = "llvm.insertvalue"(%663, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %665 = "llvm.insertvalue"(%664, %662) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %666 = arith.constant 131 : i32
//CHECK-NEXT:        %667 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %666, %667[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%660, %665, %667) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %668 = arith.constant 3 : index
//CHECK-NEXT:        %669 = arith.constant 4 : index
//CHECK-NEXT:        %670 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %671 = memref.load %670[%669, %668, %520] : memref<?x?x?xi32>
//CHECK-NEXT:        %672 = arith.constant 543 : i32
//CHECK-NEXT:        %673 = arith.cmpi eq, %671, %672 : i32
//CHECK-NEXT:        %674 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %673, %674[] : memref<i1>
//CHECK-NEXT:        %675 = arith.constant {{.*}} : index
//CHECK-NEXT:        %676 = arith.index_cast %675 : index to i64
//CHECK-NEXT:        %677 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %678 = "llvm.insertvalue"(%677, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %679 = "llvm.insertvalue"(%678, %676) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %680 = arith.constant 132 : i32
//CHECK-NEXT:        %681 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %680, %681[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%674, %679, %681) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %682 = arith.constant 7 : index
//CHECK-NEXT:        %683 = arith.constant 8 : index
//CHECK-NEXT:        %684 = arith.constant 0 : index
//CHECK-NEXT:        %685 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %686 = memref.load %685[%684, %683, %682] : memref<?x?x?xi32>
//CHECK-NEXT:        %687 = arith.constant 198 : i32
//CHECK-NEXT:        %688 = arith.cmpi eq, %686, %687 : i32
//CHECK-NEXT:        %689 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %688, %689[] : memref<i1>
//CHECK-NEXT:        %690 = arith.constant {{.*}} : index
//CHECK-NEXT:        %691 = arith.index_cast %690 : index to i64
//CHECK-NEXT:        %692 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %693 = "llvm.insertvalue"(%692, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %694 = "llvm.insertvalue"(%693, %691) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %695 = arith.constant 133 : i32
//CHECK-NEXT:        %696 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %695, %696[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%689, %694, %696) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %697 = "memref.extract_aligned_pointer_as_index"(%11) : (memref<memref<?x?x?xi32>>) -> index
//CHECK-NEXT:        %698 = arith.index_cast %697 : index to i64
//CHECK-NEXT:        %699 = "llvm.inttoptr"(%698) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %700 = arith.constant 2 : i32
//CHECK-NEXT:        %701 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %700, %701[] : memref<i32>
//CHECK-NEXT:        %702 = arith.constant 3 : i32
//CHECK-NEXT:        %703 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %702, %703[] : memref<i32>
//CHECK-NEXT:        %704 = arith.constant 4 : i32
//CHECK-NEXT:        %705 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %704, %705[] : memref<i32>
//CHECK-NEXT:        %706 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %151, %706[] : memref<i32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_3darray_ptr_one(%699, %701, %703, %705, %706) : (!llvm.ptr, memref<i32>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %707 = arith.constant 3 : index
//CHECK-NEXT:        %708 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %709 = memref.load %708[%707, %520, %34] : memref<?x?x?xi32>
//CHECK-NEXT:        %710 = arith.cmpi eq, %709, %151 : i32
//CHECK-NEXT:        %711 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %710, %711[] : memref<i1>
//CHECK-NEXT:        %712 = arith.constant {{.*}} : index
//CHECK-NEXT:        %713 = arith.index_cast %712 : index to i64
//CHECK-NEXT:        %714 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %715 = "llvm.insertvalue"(%714, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %716 = "llvm.insertvalue"(%715, %713) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %717 = arith.constant 136 : i32
//CHECK-NEXT:        %718 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %717, %718[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%711, %716, %718) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %719 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %720 = arith.constant 4 : i32
//CHECK-NEXT:        %721 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %720, %721[] : memref<i32>
//CHECK-NEXT:        %722 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %720, %722[] : memref<i32>
//CHECK-NEXT:        %723 = arith.constant 7 : i32
//CHECK-NEXT:        %724 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %723, %724[] : memref<i32>
//CHECK-NEXT:        %725 = arith.constant 87 : i32
//CHECK-NEXT:        %726 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %725, %726[] : memref<i32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_3darray_one(%719, %721, %722, %724, %726) : (memref<?x?x?xi32>, memref<i32>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %727 = arith.constant 3 : index
//CHECK-NEXT:        %728 = arith.constant 6 : index
//CHECK-NEXT:        %729 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %730 = memref.load %729[%728, %727, %727] : memref<?x?x?xi32>
//CHECK-NEXT:        %731 = arith.constant 87 : i32
//CHECK-NEXT:        %732 = arith.cmpi eq, %730, %731 : i32
//CHECK-NEXT:        %733 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %732, %733[] : memref<i1>
//CHECK-NEXT:        %734 = arith.constant {{.*}} : index
//CHECK-NEXT:        %735 = arith.index_cast %734 : index to i64
//CHECK-NEXT:        %736 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %737 = "llvm.insertvalue"(%736, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %738 = "llvm.insertvalue"(%737, %735) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %739 = arith.constant 139 : i32
//CHECK-NEXT:        %740 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %739, %740[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%733, %738, %740) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %741 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %742 = "memref.cast"(%741) : (memref<?x?x?xi32>) -> memref<10x10x10xi32>
//CHECK-NEXT:        %743 = arith.constant 7 : i32
//CHECK-NEXT:        %744 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %743, %744[] : memref<i32>
//CHECK-NEXT:        %745 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %30, %745[] : memref<i32>
//CHECK-NEXT:        %746 = arith.constant 3 : i32
//CHECK-NEXT:        %747 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %746, %747[] : memref<i32>
//CHECK-NEXT:        %748 = arith.constant 13 : i32
//CHECK-NEXT:        %749 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %748, %749[] : memref<i32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_3darray_two(%742, %744, %745, %747, %749) : (memref<10x10x10xi32>, memref<i32>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %750 = arith.constant 6 : index
//CHECK-NEXT:        %751 = arith.constant 0 : index
//CHECK-NEXT:        %752 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %753 = memref.load %752[%520, %751, %750] : memref<?x?x?xi32>
//CHECK-NEXT:        %754 = arith.constant 13 : i32
//CHECK-NEXT:        %755 = arith.cmpi eq, %753, %754 : i32
//CHECK-NEXT:        %756 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %755, %756[] : memref<i1>
//CHECK-NEXT:        %757 = arith.constant {{.*}} : index
//CHECK-NEXT:        %758 = arith.index_cast %757 : index to i64
//CHECK-NEXT:        %759 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %760 = "llvm.insertvalue"(%759, %174) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %761 = "llvm.insertvalue"(%760, %758) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %762 = arith.constant 142 : i32
//CHECK-NEXT:        %763 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %762, %763[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%756, %761, %763) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %764 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.dealloc %764 : memref<?xf32>
//CHECK-NEXT:      %765 = memref.load %4[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.dealloc %765 : memref<?xf32>
//CHECK-NEXT:      %766 = memref.load %5[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      memref.dealloc %766 : memref<?x?x?xi32>
//CHECK-NEXT:      %767 = memref.load %14[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.dealloc %767 : memref<?xf32>
//CHECK-NEXT:      %768 = memref.load %13[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.dealloc %768 : memref<?xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPswap(%0 : !llvm.ptr {fir.bindc_name = "swp1"}, %1 : !llvm.ptr {fir.bindc_name = "swp2"}) {
//CHECK-NEXT:      %2 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %3 = "llvm.insertvalue"(%2, %0) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %4 = "llvm.insertvalue"(%3, %0) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %5 = arith.constant 0 : i64
//CHECK-NEXT:      %6 = "llvm.insertvalue"(%4, %5) <{position = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %7 = builtin.unrealized_conversion_cast %6 : !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)> to memref<memref<?xf32>>
//CHECK-NEXT:      %8 = "llvm.insertvalue"(%2, %1) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %9 = "llvm.insertvalue"(%8, %1) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %10 = "llvm.insertvalue"(%9, %5) <{position = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %11 = builtin.unrealized_conversion_cast %10 : !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)> to memref<memref<?xf32>>
//CHECK-NEXT:      %12 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %13 = memref.load %7[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %13, %12[] : memref<memref<?xf32>>
//CHECK-NEXT:      %14 = memref.load %11[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %14, %7[] : memref<memref<?xf32>>
//CHECK-NEXT:      %15 = memref.load %12[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %15, %11[] : memref<memref<?xf32>>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_array_ptr_one(%0 : !llvm.ptr {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %4 = "llvm.insertvalue"(%3, %0) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %5 = "llvm.insertvalue"(%4, %0) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %6 = arith.constant 0 : i64
//CHECK-NEXT:      %7 = "llvm.insertvalue"(%5, %6) <{position = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %8 = builtin.unrealized_conversion_cast %7 : !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)> to memref<memref<?xf32>>
//CHECK-NEXT:      %9 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %10 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %11 = arith.extui %10 : i32 to i64
//CHECK-NEXT:      %12 = arith.index_cast %11 : i64 to index
//CHECK-NEXT:      %13 = arith.constant 1 : index
//CHECK-NEXT:      %14 = arith.subi %12, %13 : index
//CHECK-NEXT:      %15 = memref.load %8[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %9, %15[%14] : memref<?xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_3darray_ptr_one(%0 : !llvm.ptr {fir.bindc_name = "array"}, %1 : memref<i32> {fir.bindc_name = "k"}, %2 : memref<i32> {fir.bindc_name = "j"}, %3 : memref<i32> {fir.bindc_name = "i"}, %4 : memref<i32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %5 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %6 = "llvm.insertvalue"(%5, %0) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %7 = "llvm.insertvalue"(%6, %0) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %8 = arith.constant 0 : i64
//CHECK-NEXT:      %9 = "llvm.insertvalue"(%7, %8) <{position = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %10 = builtin.unrealized_conversion_cast %9 : !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)> to memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %11 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %12 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %13 = arith.extui %12 : i32 to i64
//CHECK-NEXT:      %14 = arith.index_cast %13 : i64 to index
//CHECK-NEXT:      %15 = arith.constant 1 : index
//CHECK-NEXT:      %16 = arith.subi %14, %15 : index
//CHECK-NEXT:      %17 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %18 = arith.extui %17 : i32 to i64
//CHECK-NEXT:      %19 = arith.index_cast %18 : i64 to index
//CHECK-NEXT:      %20 = arith.subi %19, %15 : index
//CHECK-NEXT:      %21 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %22 = arith.extui %21 : i32 to i64
//CHECK-NEXT:      %23 = arith.index_cast %22 : i64 to index
//CHECK-NEXT:      %24 = arith.subi %23, %15 : index
//CHECK-NEXT:      %25 = memref.load %10[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      memref.store %11, %25[%24, %20, %16] : memref<?x?x?xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_array_one(%0 : memref<?xf32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %4 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %5 = arith.extui %4 : i32 to i64
//CHECK-NEXT:      %6 = arith.index_cast %5 : i64 to index
//CHECK-NEXT:      %7 = arith.constant 1 : index
//CHECK-NEXT:      %8 = arith.subi %6, %7 : index
//CHECK-NEXT:      memref.store %3, %0[%8] : memref<?xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_array_two(%0 : memref<100xf32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %4 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %5 = arith.extui %4 : i32 to i64
//CHECK-NEXT:      %6 = arith.index_cast %5 : i64 to index
//CHECK-NEXT:      %7 = arith.constant 1 : index
//CHECK-NEXT:      %8 = arith.subi %6, %7 : index
//CHECK-NEXT:      memref.store %3, %0[%8] : memref<100xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_3darray_one(%0 : memref<?x?x?xi32> {fir.bindc_name = "array"}, %1 : memref<i32> {fir.bindc_name = "k"}, %2 : memref<i32> {fir.bindc_name = "j"}, %3 : memref<i32> {fir.bindc_name = "i"}, %4 : memref<i32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %5 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %6 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %7 = arith.extui %6 : i32 to i64
//CHECK-NEXT:      %8 = arith.index_cast %7 : i64 to index
//CHECK-NEXT:      %9 = arith.constant 1 : index
//CHECK-NEXT:      %10 = arith.subi %8, %9 : index
//CHECK-NEXT:      %11 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %12 = arith.extui %11 : i32 to i64
//CHECK-NEXT:      %13 = arith.index_cast %12 : i64 to index
//CHECK-NEXT:      %14 = arith.subi %13, %9 : index
//CHECK-NEXT:      %15 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %16 = arith.extui %15 : i32 to i64
//CHECK-NEXT:      %17 = arith.index_cast %16 : i64 to index
//CHECK-NEXT:      %18 = arith.subi %17, %9 : index
//CHECK-NEXT:      memref.store %5, %0[%18, %14, %10] : memref<?x?x?xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_3darray_two(%0 : memref<10x10x10xi32> {fir.bindc_name = "array"}, %1 : memref<i32> {fir.bindc_name = "k"}, %2 : memref<i32> {fir.bindc_name = "j"}, %3 : memref<i32> {fir.bindc_name = "i"}, %4 : memref<i32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %5 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %6 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %7 = arith.extui %6 : i32 to i64
//CHECK-NEXT:      %8 = arith.index_cast %7 : i64 to index
//CHECK-NEXT:      %9 = arith.constant 1 : index
//CHECK-NEXT:      %10 = arith.subi %8, %9 : index
//CHECK-NEXT:      %11 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %12 = arith.extui %11 : i32 to i64
//CHECK-NEXT:      %13 = arith.index_cast %12 : i64 to index
//CHECK-NEXT:      %14 = arith.subi %13, %9 : index
//CHECK-NEXT:      %15 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %16 = arith.extui %15 : i32 to i64
//CHECK-NEXT:      %17 = arith.index_cast %16 : i64 to index
//CHECK-NEXT:      %18 = arith.subi %17, %9 : index
//CHECK-NEXT:      memref.store %5, %0[%18, %14, %10] : memref<10x10x10xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMpointers_testFcalcEptr1", type = memref<memref<?xf32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMpointers_testFcalcEptr2", type = memref<memref<?xf32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMpointers_testFcalcEptr_md", type = memref<memref<?x?x?xi32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QQro.10xr4.0", type = memref<10xf32>, initial_value = dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00, 7.000000e+00, 8.000000e+00, 9.000000e+00, 1.000000e+01]> : tensor<10xf32>, sym_visibility = "private", constant}> : () -> ()
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QQro.10xr4.1", type = memref<10xf32>, initial_value = dense<[1.100000e+01, 1.200000e+01, 1.300000e+01, 1.400000e+01, 1.500000e+01, 1.600000e+01, 1.700000e+01, 1.800000e+01, 1.900000e+01, 2.000000e+01]> : tensor<10xf32>, sym_visibility = "private", constant}> : () -> ()
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
