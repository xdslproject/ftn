// RUN: xftn %S/../../../../examples/fragments/pointers.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMpointers_testEptr3", type = memref<memref<?xf32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    func.func @_QMpointers_testPcalc() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %2 = memref.get_global @_QMpointers_testEptr3 : memref<memref<?xf32>>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %6 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %8 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %9 = memref.get_global @_QMpointers_testFcalcEptr1 : memref<memref<?xf32>>
//CHECK-NEXT:      %10 = memref.get_global @_QMpointers_testFcalcEptr2 : memref<memref<?xf32>>
//CHECK-NEXT:      %11 = memref.get_global @_QMpointers_testFcalcEptr_md : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %12 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:      %13 = arith.constant 100 : index
//CHECK-NEXT:      %14 = memref.alloc(%13) : memref<?xf32>
//CHECK-NEXT:      memref.store %14, %3[] : memref<memref<?xf32>>
//CHECK-NEXT:      %15 = memref.alloc(%13) : memref<?xf32>
//CHECK-NEXT:      memref.store %15, %4[] : memref<memref<?xf32>>
//CHECK-NEXT:      %16 = arith.constant 10 : index
//CHECK-NEXT:      %17 = memref.alloc(%16, %16, %16) : memref<?x?x?xi32>
//CHECK-NEXT:      memref.store %17, %5[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %18 = arith.constant 1 : i32
//CHECK-NEXT:      %19 = arith.index_cast %18 : i32 to index
//CHECK-NEXT:      %20 = arith.constant 100 : i32
//CHECK-NEXT:      %21 = arith.index_cast %20 : i32 to index
//CHECK-NEXT:      %22 = arith.constant 1 : index
//CHECK-NEXT:      %23 = arith.index_cast %19 : index to i32
//CHECK-NEXT:      %24 = arith.addi %21, %22 : index
//CHECK-NEXT:      %25 = scf.for %26 = %19 to %24 step %22 iter_args(%27 = %23) -> (i32) {
//CHECK-NEXT:        memref.store %27, %6[] : memref<i32>
//CHECK-NEXT:        %28 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %29 = arith.sitofp %28 : i32 to f32
//CHECK-NEXT:        %30 = arith.extui %28 : i32 to i64
//CHECK-NEXT:        %31 = arith.index_cast %30 : i64 to index
//CHECK-NEXT:        %32 = arith.subi %31, %22 : index
//CHECK-NEXT:        %33 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:        memref.store %29, %33[%32] : memref<?xf32>
//CHECK-NEXT:        %34 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %35 = arith.subi %20, %34 : i32
//CHECK-NEXT:        %36 = arith.sitofp %35 : i32 to f32
//CHECK-NEXT:        %37 = arith.extui %34 : i32 to i64
//CHECK-NEXT:        %38 = arith.index_cast %37 : i64 to index
//CHECK-NEXT:        %39 = arith.subi %38, %22 : index
//CHECK-NEXT:        %40 = memref.load %4[] : memref<memref<?xf32>>
//CHECK-NEXT:        memref.store %36, %40[%39] : memref<?xf32>
//CHECK-NEXT:        %41 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %42 = arith.index_cast %22 : index to i32
//CHECK-NEXT:        %43 = arith.addi %41, %42 : i32
//CHECK-NEXT:        scf.yield %43 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %25, %6[] : memref<i32>
//CHECK-NEXT:      %44 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %44, %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      %45 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %46 = arith.constant true
//CHECK-NEXT:        %47 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %46, %47[] : memref<i1>
//CHECK-NEXT:        %48 = arith.constant {{.*}} : index
//CHECK-NEXT:        %49 = arith.index_cast %48 : index to i64
//CHECK-NEXT:        %50 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %51 = "llvm.insertvalue"(%50, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %52 = "llvm.insertvalue"(%51, %49) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %53 = arith.constant 29 : i32
//CHECK-NEXT:        %54 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %53, %54[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%47, %52, %54) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %55 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %56 = arith.constant 0 : index
//CHECK-NEXT:        %57 = "memref.dim"(%55, %56) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %58 = arith.index_cast %57 : index to i64
//CHECK-NEXT:        %59 = arith.trunci %58 : i64 to i32
//CHECK-NEXT:        %60 = arith.cmpi eq, %59, %20 : i32
//CHECK-NEXT:        %61 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %60, %61[] : memref<i1>
//CHECK-NEXT:        %62 = arith.constant {{.*}} : index
//CHECK-NEXT:        %63 = arith.index_cast %62 : index to i64
//CHECK-NEXT:        %64 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %65 = "llvm.insertvalue"(%64, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %66 = "llvm.insertvalue"(%65, %63) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %67 = arith.constant 30 : i32
//CHECK-NEXT:        %68 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %67, %68[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%61, %66, %68) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %69 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %70 = arith.constant 0 : index
//CHECK-NEXT:        %71 = "memref.dim"(%69, %70) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %72 = arith.index_cast %71 : index to i64
//CHECK-NEXT:        %73 = arith.trunci %72 : i64 to i32
//CHECK-NEXT:        %74 = arith.cmpi eq, %73, %20 : i32
//CHECK-NEXT:        %75 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %74, %75[] : memref<i1>
//CHECK-NEXT:        %76 = arith.constant {{.*}} : index
//CHECK-NEXT:        %77 = arith.index_cast %76 : index to i64
//CHECK-NEXT:        %78 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %79 = "llvm.insertvalue"(%78, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %80 = "llvm.insertvalue"(%79, %77) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %81 = arith.constant 31 : i32
//CHECK-NEXT:        %82 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %81, %82[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%75, %80, %82) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %83 = scf.for %84 = %19 to %24 step %22 iter_args(%85 = %23) -> (i32) {
//CHECK-NEXT:        memref.store %85, %6[] : memref<i32>
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %86 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %87 = arith.extui %86 : i32 to i64
//CHECK-NEXT:          %88 = arith.index_cast %87 : i64 to index
//CHECK-NEXT:          %89 = arith.subi %88, %22 : index
//CHECK-NEXT:          %90 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:          %91 = memref.load %90[%89] : memref<?xf32>
//CHECK-NEXT:          %92 = arith.sitofp %86 : i32 to f32
//CHECK-NEXT:          %93 = arith.cmpf oeq, %91, %92 : f32
//CHECK-NEXT:          %94 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %93, %94[] : memref<i1>
//CHECK-NEXT:          %95 = arith.constant {{.*}} : index
//CHECK-NEXT:          %96 = arith.index_cast %95 : index to i64
//CHECK-NEXT:          %97 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %98 = "llvm.insertvalue"(%97, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %99 = "llvm.insertvalue"(%98, %96) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %100 = arith.constant 33 : i32
//CHECK-NEXT:          %101 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %100, %101[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%94, %99, %101) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %102 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %103 = arith.index_cast %22 : index to i32
//CHECK-NEXT:        %104 = arith.addi %102, %103 : i32
//CHECK-NEXT:        scf.yield %104 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %83, %6[] : memref<i32>
//CHECK-NEXT:      %105 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %105, %10[] : memref<memref<?xf32>>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %106 = arith.constant true
//CHECK-NEXT:        %107 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %106, %107[] : memref<i1>
//CHECK-NEXT:        %108 = arith.constant {{.*}} : index
//CHECK-NEXT:        %109 = arith.index_cast %108 : index to i64
//CHECK-NEXT:        %110 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %111 = "llvm.insertvalue"(%110, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %112 = "llvm.insertvalue"(%111, %109) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %113 = arith.constant 38 : i32
//CHECK-NEXT:        %114 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %113, %114[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%107, %112, %114) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %115 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:        %116 = arith.constant 0 : index
//CHECK-NEXT:        %117 = "memref.dim"(%115, %116) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %118 = arith.index_cast %117 : index to i64
//CHECK-NEXT:        %119 = arith.trunci %118 : i64 to i32
//CHECK-NEXT:        %120 = arith.cmpi eq, %119, %20 : i32
//CHECK-NEXT:        %121 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %120, %121[] : memref<i1>
//CHECK-NEXT:        %122 = arith.constant {{.*}} : index
//CHECK-NEXT:        %123 = arith.index_cast %122 : index to i64
//CHECK-NEXT:        %124 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %125 = "llvm.insertvalue"(%124, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %126 = "llvm.insertvalue"(%125, %123) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %127 = arith.constant 39 : i32
//CHECK-NEXT:        %128 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %127, %128[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%121, %126, %128) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %129 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:        %130 = arith.constant 0 : index
//CHECK-NEXT:        %131 = "memref.dim"(%129, %130) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %132 = arith.index_cast %131 : index to i64
//CHECK-NEXT:        %133 = arith.trunci %132 : i64 to i32
//CHECK-NEXT:        %134 = arith.cmpi eq, %133, %20 : i32
//CHECK-NEXT:        %135 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %134, %135[] : memref<i1>
//CHECK-NEXT:        %136 = arith.constant {{.*}} : index
//CHECK-NEXT:        %137 = arith.index_cast %136 : index to i64
//CHECK-NEXT:        %138 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %139 = "llvm.insertvalue"(%138, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %140 = "llvm.insertvalue"(%139, %137) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %141 = arith.constant 40 : i32
//CHECK-NEXT:        %142 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %141, %142[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%135, %140, %142) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %143 = scf.for %144 = %19 to %24 step %22 iter_args(%145 = %23) -> (i32) {
//CHECK-NEXT:        memref.store %145, %6[] : memref<i32>
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %146 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %147 = arith.extui %146 : i32 to i64
//CHECK-NEXT:          %148 = arith.index_cast %147 : i64 to index
//CHECK-NEXT:          %149 = arith.subi %148, %22 : index
//CHECK-NEXT:          %150 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:          %151 = memref.load %150[%149] : memref<?xf32>
//CHECK-NEXT:          %152 = arith.sitofp %146 : i32 to f32
//CHECK-NEXT:          %153 = arith.cmpf oeq, %151, %152 : f32
//CHECK-NEXT:          %154 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %153, %154[] : memref<i1>
//CHECK-NEXT:          %155 = arith.constant {{.*}} : index
//CHECK-NEXT:          %156 = arith.index_cast %155 : index to i64
//CHECK-NEXT:          %157 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %158 = "llvm.insertvalue"(%157, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %159 = "llvm.insertvalue"(%158, %156) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %160 = arith.constant 42 : i32
//CHECK-NEXT:          %161 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %160, %161[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%154, %159, %161) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %162 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %163 = arith.index_cast %22 : index to i32
//CHECK-NEXT:        %164 = arith.addi %162, %163 : i32
//CHECK-NEXT:        scf.yield %164 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %143, %6[] : memref<i32>
//CHECK-NEXT:      %165 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %165, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %166 = arith.constant true
//CHECK-NEXT:        %167 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %166, %167[] : memref<i1>
//CHECK-NEXT:        %168 = arith.constant {{.*}} : index
//CHECK-NEXT:        %169 = arith.index_cast %168 : index to i64
//CHECK-NEXT:        %170 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %171 = "llvm.insertvalue"(%170, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %172 = "llvm.insertvalue"(%171, %169) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %173 = arith.constant 47 : i32
//CHECK-NEXT:        %174 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %173, %174[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%167, %172, %174) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %175 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %176 = arith.constant 0 : index
//CHECK-NEXT:        %177 = "memref.dim"(%175, %176) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %178 = arith.index_cast %177 : index to i64
//CHECK-NEXT:        %179 = arith.trunci %178 : i64 to i32
//CHECK-NEXT:        %180 = arith.cmpi eq, %179, %20 : i32
//CHECK-NEXT:        %181 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %180, %181[] : memref<i1>
//CHECK-NEXT:        %182 = arith.constant {{.*}} : index
//CHECK-NEXT:        %183 = arith.index_cast %182 : index to i64
//CHECK-NEXT:        %184 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %185 = "llvm.insertvalue"(%184, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %186 = "llvm.insertvalue"(%185, %183) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %187 = arith.constant 48 : i32
//CHECK-NEXT:        %188 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %187, %188[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%181, %186, %188) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %189 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %190 = arith.constant 0 : index
//CHECK-NEXT:        %191 = "memref.dim"(%189, %190) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %192 = arith.index_cast %191 : index to i64
//CHECK-NEXT:        %193 = arith.trunci %192 : i64 to i32
//CHECK-NEXT:        %194 = arith.cmpi eq, %193, %20 : i32
//CHECK-NEXT:        %195 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %194, %195[] : memref<i1>
//CHECK-NEXT:        %196 = arith.constant {{.*}} : index
//CHECK-NEXT:        %197 = arith.index_cast %196 : index to i64
//CHECK-NEXT:        %198 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %199 = "llvm.insertvalue"(%198, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %200 = "llvm.insertvalue"(%199, %197) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %201 = arith.constant 49 : i32
//CHECK-NEXT:        %202 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %201, %202[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%195, %200, %202) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %203 = scf.for %204 = %19 to %24 step %22 iter_args(%205 = %23) -> (i32) {
//CHECK-NEXT:        memref.store %205, %6[] : memref<i32>
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %206 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %207 = arith.extui %206 : i32 to i64
//CHECK-NEXT:          %208 = arith.index_cast %207 : i64 to index
//CHECK-NEXT:          %209 = arith.subi %208, %22 : index
//CHECK-NEXT:          %210 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:          %211 = memref.load %210[%209] : memref<?xf32>
//CHECK-NEXT:          %212 = arith.sitofp %206 : i32 to f32
//CHECK-NEXT:          %213 = arith.cmpf oeq, %211, %212 : f32
//CHECK-NEXT:          %214 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %213, %214[] : memref<i1>
//CHECK-NEXT:          %215 = arith.constant {{.*}} : index
//CHECK-NEXT:          %216 = arith.index_cast %215 : index to i64
//CHECK-NEXT:          %217 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %218 = "llvm.insertvalue"(%217, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %219 = "llvm.insertvalue"(%218, %216) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %220 = arith.constant 51 : i32
//CHECK-NEXT:          %221 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %220, %221[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%214, %219, %221) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %222 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %223 = arith.index_cast %22 : index to i32
//CHECK-NEXT:        %224 = arith.addi %222, %223 : i32
//CHECK-NEXT:        scf.yield %224 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %203, %6[] : memref<i32>
//CHECK-NEXT:      %225 = arith.constant 3.400000e+01 : f32
//CHECK-NEXT:      %226 = arith.constant 19 : index
//CHECK-NEXT:      %227 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %225, %227[%226] : memref<?xf32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %228 = memref.load %3[] : memref<memref<?xf32>>
//CHECK-NEXT:        %229 = memref.load %228[%226] : memref<?xf32>
//CHECK-NEXT:        %230 = arith.cmpf oeq, %229, %225 : f32
//CHECK-NEXT:        %231 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %230, %231[] : memref<i1>
//CHECK-NEXT:        %232 = arith.constant {{.*}} : index
//CHECK-NEXT:        %233 = arith.index_cast %232 : index to i64
//CHECK-NEXT:        %234 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %235 = "llvm.insertvalue"(%234, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %236 = "llvm.insertvalue"(%235, %233) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %237 = arith.constant 56 : i32
//CHECK-NEXT:        %238 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %237, %238[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%231, %236, %238) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %239 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %240 = memref.load %239[%226] : memref<?xf32>
//CHECK-NEXT:        %241 = arith.cmpf oeq, %240, %225 : f32
//CHECK-NEXT:        %242 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %241, %242[] : memref<i1>
//CHECK-NEXT:        %243 = arith.constant {{.*}} : index
//CHECK-NEXT:        %244 = arith.index_cast %243 : index to i64
//CHECK-NEXT:        %245 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %246 = "llvm.insertvalue"(%245, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %247 = "llvm.insertvalue"(%246, %244) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %248 = arith.constant 57 : i32
//CHECK-NEXT:        %249 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %248, %249[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%242, %247, %249) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %250 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:        %251 = memref.load %250[%226] : memref<?xf32>
//CHECK-NEXT:        %252 = arith.cmpf oeq, %251, %225 : f32
//CHECK-NEXT:        %253 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %252, %253[] : memref<i1>
//CHECK-NEXT:        %254 = arith.constant {{.*}} : index
//CHECK-NEXT:        %255 = arith.index_cast %254 : index to i64
//CHECK-NEXT:        %256 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %257 = "llvm.insertvalue"(%256, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %258 = "llvm.insertvalue"(%257, %255) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %259 = arith.constant 58 : i32
//CHECK-NEXT:        %260 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %259, %260[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%253, %258, %260) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %261 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %262 = memref.load %261[%226] : memref<?xf32>
//CHECK-NEXT:        %263 = arith.cmpf oeq, %262, %225 : f32
//CHECK-NEXT:        %264 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %263, %264[] : memref<i1>
//CHECK-NEXT:        %265 = arith.constant {{.*}} : index
//CHECK-NEXT:        %266 = arith.index_cast %265 : index to i64
//CHECK-NEXT:        %267 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %268 = "llvm.insertvalue"(%267, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %269 = "llvm.insertvalue"(%268, %266) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %270 = arith.constant 59 : i32
//CHECK-NEXT:        %271 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %270, %271[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%264, %269, %271) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %272 = memref.load %4[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %272, %10[] : memref<memref<?xf32>>
//CHECK-NEXT:      %273 = arith.constant 20 : i32
//CHECK-NEXT:      %274 = scf.for %275 = %19 to %24 step %22 iter_args(%276 = %23) -> (i32) {
//CHECK-NEXT:        memref.store %276, %6[] : memref<i32>
//CHECK-NEXT:        %277 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %278 = arith.cmpi eq, %277, %273 : i32
//CHECK-NEXT:        scf.if %278 {
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %279 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %280 = arith.extui %279 : i32 to i64
//CHECK-NEXT:            %281 = arith.index_cast %280 : i64 to index
//CHECK-NEXT:            %282 = arith.subi %281, %22 : index
//CHECK-NEXT:            %283 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:            %284 = memref.load %283[%282] : memref<?xf32>
//CHECK-NEXT:            %285 = arith.cmpf oeq, %284, %225 : f32
//CHECK-NEXT:            %286 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %285, %286[] : memref<i1>
//CHECK-NEXT:            %287 = arith.constant {{.*}} : index
//CHECK-NEXT:            %288 = arith.index_cast %287 : index to i64
//CHECK-NEXT:            %289 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %290 = "llvm.insertvalue"(%289, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %291 = "llvm.insertvalue"(%290, %288) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %292 = arith.constant 65 : i32
//CHECK-NEXT:            %293 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %292, %293[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%286, %291, %293) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:        } else {
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %294 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %295 = arith.extui %294 : i32 to i64
//CHECK-NEXT:            %296 = arith.index_cast %295 : i64 to index
//CHECK-NEXT:            %297 = arith.subi %296, %22 : index
//CHECK-NEXT:            %298 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:            %299 = memref.load %298[%297] : memref<?xf32>
//CHECK-NEXT:            %300 = arith.sitofp %294 : i32 to f32
//CHECK-NEXT:            %301 = arith.cmpf oeq, %299, %300 : f32
//CHECK-NEXT:            %302 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %301, %302[] : memref<i1>
//CHECK-NEXT:            %303 = arith.constant {{.*}} : index
//CHECK-NEXT:            %304 = arith.index_cast %303 : index to i64
//CHECK-NEXT:            %305 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %306 = "llvm.insertvalue"(%305, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %307 = "llvm.insertvalue"(%306, %304) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %308 = arith.constant 67 : i32
//CHECK-NEXT:            %309 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %308, %309[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%302, %307, %309) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:        }
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %310 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %311 = arith.extui %310 : i32 to i64
//CHECK-NEXT:          %312 = arith.index_cast %311 : i64 to index
//CHECK-NEXT:          %313 = arith.subi %312, %22 : index
//CHECK-NEXT:          %314 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:          %315 = memref.load %314[%313] : memref<?xf32>
//CHECK-NEXT:          %316 = arith.subi %20, %310 : i32
//CHECK-NEXT:          %317 = arith.sitofp %316 : i32 to f32
//CHECK-NEXT:          %318 = arith.cmpf oeq, %315, %317 : f32
//CHECK-NEXT:          %319 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %318, %319[] : memref<i1>
//CHECK-NEXT:          %320 = arith.constant {{.*}} : index
//CHECK-NEXT:          %321 = arith.index_cast %320 : index to i64
//CHECK-NEXT:          %322 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %323 = "llvm.insertvalue"(%322, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %324 = "llvm.insertvalue"(%323, %321) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %325 = arith.constant 69 : i32
//CHECK-NEXT:          %326 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %325, %326[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%319, %324, %326) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %327 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %328 = arith.index_cast %22 : index to i32
//CHECK-NEXT:        %329 = arith.addi %327, %328 : i32
//CHECK-NEXT:        scf.yield %329 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %274, %6[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %330 = "memref.extract_aligned_pointer_as_index"(%9) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %331 = arith.index_cast %330 : index to i64
//CHECK-NEXT:        %332 = "llvm.inttoptr"(%331) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %333 = "memref.extract_aligned_pointer_as_index"(%10) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %334 = arith.index_cast %333 : index to i64
//CHECK-NEXT:        %335 = "llvm.inttoptr"(%334) : (i64) -> !llvm.ptr
//CHECK-NEXT:        func.call @_QMpointers_testPswap(%332, %335) : (!llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %336 = scf.for %337 = %19 to %24 step %22 iter_args(%338 = %23) -> (i32) {
//CHECK-NEXT:        memref.store %338, %6[] : memref<i32>
//CHECK-NEXT:        %339 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %340 = arith.cmpi eq, %339, %273 : i32
//CHECK-NEXT:        scf.if %340 {
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %341 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %342 = arith.extui %341 : i32 to i64
//CHECK-NEXT:            %343 = arith.index_cast %342 : i64 to index
//CHECK-NEXT:            %344 = arith.subi %343, %22 : index
//CHECK-NEXT:            %345 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:            %346 = memref.load %345[%344] : memref<?xf32>
//CHECK-NEXT:            %347 = arith.cmpf oeq, %346, %225 : f32
//CHECK-NEXT:            %348 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %347, %348[] : memref<i1>
//CHECK-NEXT:            %349 = arith.constant {{.*}} : index
//CHECK-NEXT:            %350 = arith.index_cast %349 : index to i64
//CHECK-NEXT:            %351 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %352 = "llvm.insertvalue"(%351, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %353 = "llvm.insertvalue"(%352, %350) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %354 = arith.constant 78 : i32
//CHECK-NEXT:            %355 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %354, %355[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%348, %353, %355) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:        } else {
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %356 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %357 = arith.extui %356 : i32 to i64
//CHECK-NEXT:            %358 = arith.index_cast %357 : i64 to index
//CHECK-NEXT:            %359 = arith.subi %358, %22 : index
//CHECK-NEXT:            %360 = memref.load %10[] : memref<memref<?xf32>>
//CHECK-NEXT:            %361 = memref.load %360[%359] : memref<?xf32>
//CHECK-NEXT:            %362 = arith.sitofp %356 : i32 to f32
//CHECK-NEXT:            %363 = arith.cmpf oeq, %361, %362 : f32
//CHECK-NEXT:            %364 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %363, %364[] : memref<i1>
//CHECK-NEXT:            %365 = arith.constant {{.*}} : index
//CHECK-NEXT:            %366 = arith.index_cast %365 : index to i64
//CHECK-NEXT:            %367 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %368 = "llvm.insertvalue"(%367, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %369 = "llvm.insertvalue"(%368, %366) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %370 = arith.constant 80 : i32
//CHECK-NEXT:            %371 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %370, %371[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%364, %369, %371) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:        }
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %372 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %373 = arith.extui %372 : i32 to i64
//CHECK-NEXT:          %374 = arith.index_cast %373 : i64 to index
//CHECK-NEXT:          %375 = arith.subi %374, %22 : index
//CHECK-NEXT:          %376 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:          %377 = memref.load %376[%375] : memref<?xf32>
//CHECK-NEXT:          %378 = arith.subi %20, %372 : i32
//CHECK-NEXT:          %379 = arith.sitofp %378 : i32 to f32
//CHECK-NEXT:          %380 = arith.cmpf oeq, %377, %379 : f32
//CHECK-NEXT:          %381 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %380, %381[] : memref<i1>
//CHECK-NEXT:          %382 = arith.constant {{.*}} : index
//CHECK-NEXT:          %383 = arith.index_cast %382 : index to i64
//CHECK-NEXT:          %384 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %385 = "llvm.insertvalue"(%384, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %386 = "llvm.insertvalue"(%385, %383) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %387 = arith.constant 82 : i32
//CHECK-NEXT:          %388 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %387, %388[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%381, %386, %388) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %389 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %390 = arith.index_cast %22 : index to i32
//CHECK-NEXT:        %391 = arith.addi %389, %390 : i32
//CHECK-NEXT:        scf.yield %391 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %336, %6[] : memref<i32>
//CHECK-NEXT:      %392 = arith.constant 2 : index
//CHECK-NEXT:      %393 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:      %394 = memref.load %393[%392] : memref<?xf32>
//CHECK-NEXT:      memref.store %394, %12[] : memref<f32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %395 = memref.load %12[] : memref<f32>
//CHECK-NEXT:        %396 = arith.constant 9.700000e+01 : f32
//CHECK-NEXT:        %397 = arith.cmpf oeq, %395, %396 : f32
//CHECK-NEXT:        %398 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %397, %398[] : memref<i1>
//CHECK-NEXT:        %399 = arith.constant {{.*}} : index
//CHECK-NEXT:        %400 = arith.index_cast %399 : index to i64
//CHECK-NEXT:        %401 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %402 = "llvm.insertvalue"(%401, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %403 = "llvm.insertvalue"(%402, %400) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %404 = arith.constant 87 : i32
//CHECK-NEXT:        %405 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %404, %405[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%398, %403, %405) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %406 = "memref.extract_aligned_pointer_as_index"(%9) : (memref<memref<?xf32>>) -> index
//CHECK-NEXT:        %407 = arith.index_cast %406 : index to i64
//CHECK-NEXT:        %408 = "llvm.inttoptr"(%407) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %409 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %273, %409[] : memref<i32>
//CHECK-NEXT:        %410 = arith.constant 3.100000e+00 : f32
//CHECK-NEXT:        %411 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %410, %411[] : memref<f32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_array_ptr_one(%408, %409, %411) : (!llvm.ptr, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %412 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %413 = memref.load %412[%226] : memref<?xf32>
//CHECK-NEXT:        %414 = arith.constant 3.100000e+00 : f32
//CHECK-NEXT:        %415 = arith.cmpf oeq, %413, %414 : f32
//CHECK-NEXT:        %416 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %415, %416[] : memref<i1>
//CHECK-NEXT:        %417 = arith.constant {{.*}} : index
//CHECK-NEXT:        %418 = arith.index_cast %417 : index to i64
//CHECK-NEXT:        %419 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %420 = "llvm.insertvalue"(%419, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %421 = "llvm.insertvalue"(%420, %418) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %422 = arith.constant 90 : i32
//CHECK-NEXT:        %423 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %422, %423[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%416, %421, %423) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %424 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %425 = arith.constant 19 : i32
//CHECK-NEXT:        %426 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %425, %426[] : memref<i32>
//CHECK-NEXT:        %427 = arith.constant 8.764000e+01 : f32
//CHECK-NEXT:        %428 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %427, %428[] : memref<f32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_array_one(%424, %426, %428) : (memref<?xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %429 = arith.constant 18 : index
//CHECK-NEXT:        %430 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %431 = memref.load %430[%429] : memref<?xf32>
//CHECK-NEXT:        %432 = arith.constant 8.764000e+01 : f32
//CHECK-NEXT:        %433 = arith.cmpf oeq, %431, %432 : f32
//CHECK-NEXT:        %434 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %433, %434[] : memref<i1>
//CHECK-NEXT:        %435 = arith.constant {{.*}} : index
//CHECK-NEXT:        %436 = arith.index_cast %435 : index to i64
//CHECK-NEXT:        %437 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %438 = "llvm.insertvalue"(%437, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %439 = "llvm.insertvalue"(%438, %436) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %440 = arith.constant 93 : i32
//CHECK-NEXT:        %441 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %440, %441[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%434, %439, %441) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %442 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %443 = "memref.cast"(%442) : (memref<?xf32>) -> memref<100xf32>
//CHECK-NEXT:        %444 = arith.constant 76 : i32
//CHECK-NEXT:        %445 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %444, %445[] : memref<i32>
//CHECK-NEXT:        %446 = arith.constant 9.923200e+02 : f32
//CHECK-NEXT:        %447 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %446, %447[] : memref<f32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_array_two(%443, %445, %447) : (memref<100xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %448 = arith.constant 75 : index
//CHECK-NEXT:        %449 = memref.load %9[] : memref<memref<?xf32>>
//CHECK-NEXT:        %450 = memref.load %449[%448] : memref<?xf32>
//CHECK-NEXT:        %451 = arith.constant 9.923200e+02 : f32
//CHECK-NEXT:        %452 = arith.cmpf oeq, %450, %451 : f32
//CHECK-NEXT:        %453 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %452, %453[] : memref<i1>
//CHECK-NEXT:        %454 = arith.constant {{.*}} : index
//CHECK-NEXT:        %455 = arith.index_cast %454 : index to i64
//CHECK-NEXT:        %456 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %457 = "llvm.insertvalue"(%456, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %458 = "llvm.insertvalue"(%457, %455) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %459 = arith.constant 96 : i32
//CHECK-NEXT:        %460 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %459, %460[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%453, %458, %460) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %461 = arith.constant 10 : i32
//CHECK-NEXT:      %462 = arith.index_cast %461 : i32 to index
//CHECK-NEXT:      %463 = arith.addi %462, %22 : index
//CHECK-NEXT:      %464 = scf.for %465 = %19 to %463 step %22 iter_args(%466 = %23) -> (i32) {
//CHECK-NEXT:        memref.store %466, %6[] : memref<i32>
//CHECK-NEXT:        %467 = scf.for %468 = %19 to %463 step %22 iter_args(%469 = %23) -> (i32) {
//CHECK-NEXT:          memref.store %469, %7[] : memref<i32>
//CHECK-NEXT:          %470 = scf.for %471 = %19 to %463 step %22 iter_args(%472 = %23) -> (i32) {
//CHECK-NEXT:            memref.store %472, %8[] : memref<i32>
//CHECK-NEXT:            %473 = memref.load %8[] : memref<i32>
//CHECK-NEXT:            %474 = memref.load %7[] : memref<i32>
//CHECK-NEXT:            %475 = arith.muli %474, %461 : i32
//CHECK-NEXT:            %476 = arith.addi %473, %475 : i32
//CHECK-NEXT:            %477 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %478 = arith.muli %477, %20 : i32
//CHECK-NEXT:            %479 = arith.addi %476, %478 : i32
//CHECK-NEXT:            %480 = arith.extui %473 : i32 to i64
//CHECK-NEXT:            %481 = arith.index_cast %480 : i64 to index
//CHECK-NEXT:            %482 = arith.subi %481, %22 : index
//CHECK-NEXT:            %483 = arith.extui %474 : i32 to i64
//CHECK-NEXT:            %484 = arith.index_cast %483 : i64 to index
//CHECK-NEXT:            %485 = arith.subi %484, %22 : index
//CHECK-NEXT:            %486 = arith.extui %477 : i32 to i64
//CHECK-NEXT:            %487 = arith.index_cast %486 : i64 to index
//CHECK-NEXT:            %488 = arith.subi %487, %22 : index
//CHECK-NEXT:            %489 = memref.load %5[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:            memref.store %479, %489[%488, %485, %482] : memref<?x?x?xi32>
//CHECK-NEXT:            %490 = memref.load %8[] : memref<i32>
//CHECK-NEXT:            %491 = arith.index_cast %22 : index to i32
//CHECK-NEXT:            %492 = arith.addi %490, %491 : i32
//CHECK-NEXT:            scf.yield %492 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %470, %8[] : memref<i32>
//CHECK-NEXT:          %493 = memref.load %7[] : memref<i32>
//CHECK-NEXT:          %494 = arith.index_cast %22 : index to i32
//CHECK-NEXT:          %495 = arith.addi %493, %494 : i32
//CHECK-NEXT:          scf.yield %495 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %467, %7[] : memref<i32>
//CHECK-NEXT:        %496 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %497 = arith.index_cast %22 : index to i32
//CHECK-NEXT:        %498 = arith.addi %496, %497 : i32
//CHECK-NEXT:        scf.yield %498 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %464, %6[] : memref<i32>
//CHECK-NEXT:      %499 = memref.load %5[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      memref.store %499, %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %500 = arith.constant true
//CHECK-NEXT:        %501 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %500, %501[] : memref<i1>
//CHECK-NEXT:        %502 = arith.constant {{.*}} : index
//CHECK-NEXT:        %503 = arith.index_cast %502 : index to i64
//CHECK-NEXT:        %504 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %505 = "llvm.insertvalue"(%504, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %506 = "llvm.insertvalue"(%505, %503) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %507 = arith.constant 107 : i32
//CHECK-NEXT:        %508 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %507, %508[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%501, %506, %508) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %509 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %510 = arith.constant 0 : index
//CHECK-NEXT:        %511 = "memref.dim"(%509, %510) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %512 = arith.index_cast %511 : index to i64
//CHECK-NEXT:        %513 = "memref.dim"(%509, %22) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %514 = arith.index_cast %513 : index to i64
//CHECK-NEXT:        %515 = arith.muli %512, %514 : i64
//CHECK-NEXT:        %516 = "memref.dim"(%509, %392) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %517 = arith.index_cast %516 : index to i64
//CHECK-NEXT:        %518 = arith.muli %515, %517 : i64
//CHECK-NEXT:        %519 = arith.trunci %518 : i64 to i32
//CHECK-NEXT:        %520 = arith.constant 1000 : i32
//CHECK-NEXT:        %521 = arith.cmpi eq, %519, %520 : i32
//CHECK-NEXT:        %522 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %521, %522[] : memref<i1>
//CHECK-NEXT:        %523 = arith.constant {{.*}} : index
//CHECK-NEXT:        %524 = arith.index_cast %523 : index to i64
//CHECK-NEXT:        %525 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %526 = "llvm.insertvalue"(%525, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %527 = "llvm.insertvalue"(%526, %524) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %528 = arith.constant 108 : i32
//CHECK-NEXT:        %529 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %528, %529[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%522, %527, %529) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %530 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %531 = "memref.dim"(%530, %22) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %532 = arith.index_cast %531 : index to i64
//CHECK-NEXT:        %533 = arith.trunci %532 : i64 to i32
//CHECK-NEXT:        %534 = arith.cmpi eq, %533, %461 : i32
//CHECK-NEXT:        %535 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %534, %535[] : memref<i1>
//CHECK-NEXT:        %536 = arith.constant {{.*}} : index
//CHECK-NEXT:        %537 = arith.index_cast %536 : index to i64
//CHECK-NEXT:        %538 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %539 = "llvm.insertvalue"(%538, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %540 = "llvm.insertvalue"(%539, %537) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %541 = arith.constant 109 : i32
//CHECK-NEXT:        %542 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %541, %542[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%535, %540, %542) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %543 = arith.constant 3 : index
//CHECK-NEXT:        %544 = arith.constant 4 : index
//CHECK-NEXT:        %545 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %546 = memref.load %545[%544, %543, %392] : memref<?x?x?xi32>
//CHECK-NEXT:        %547 = arith.constant 543 : i32
//CHECK-NEXT:        %548 = arith.cmpi eq, %546, %547 : i32
//CHECK-NEXT:        %549 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %548, %549[] : memref<i1>
//CHECK-NEXT:        %550 = arith.constant {{.*}} : index
//CHECK-NEXT:        %551 = arith.index_cast %550 : index to i64
//CHECK-NEXT:        %552 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %553 = "llvm.insertvalue"(%552, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %554 = "llvm.insertvalue"(%553, %551) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %555 = arith.constant 110 : i32
//CHECK-NEXT:        %556 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %555, %556[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%549, %554, %556) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %557 = arith.constant 7 : index
//CHECK-NEXT:        %558 = arith.constant 8 : index
//CHECK-NEXT:        %559 = arith.constant 0 : index
//CHECK-NEXT:        %560 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %561 = memref.load %560[%559, %558, %557] : memref<?x?x?xi32>
//CHECK-NEXT:        %562 = arith.constant 198 : i32
//CHECK-NEXT:        %563 = arith.cmpi eq, %561, %562 : i32
//CHECK-NEXT:        %564 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %563, %564[] : memref<i1>
//CHECK-NEXT:        %565 = arith.constant {{.*}} : index
//CHECK-NEXT:        %566 = arith.index_cast %565 : index to i64
//CHECK-NEXT:        %567 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %568 = "llvm.insertvalue"(%567, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %569 = "llvm.insertvalue"(%568, %566) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %570 = arith.constant 111 : i32
//CHECK-NEXT:        %571 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %570, %571[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%564, %569, %571) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %572 = "memref.extract_aligned_pointer_as_index"(%11) : (memref<memref<?x?x?xi32>>) -> index
//CHECK-NEXT:        %573 = arith.index_cast %572 : index to i64
//CHECK-NEXT:        %574 = "llvm.inttoptr"(%573) : (i64) -> !llvm.ptr
//CHECK-NEXT:        %575 = arith.constant 2 : i32
//CHECK-NEXT:        %576 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %575, %576[] : memref<i32>
//CHECK-NEXT:        %577 = arith.constant 3 : i32
//CHECK-NEXT:        %578 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %577, %578[] : memref<i32>
//CHECK-NEXT:        %579 = arith.constant 4 : i32
//CHECK-NEXT:        %580 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %579, %580[] : memref<i32>
//CHECK-NEXT:        %581 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %20, %581[] : memref<i32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_3darray_ptr_one(%574, %576, %578, %580, %581) : (!llvm.ptr, memref<i32>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %582 = arith.constant 3 : index
//CHECK-NEXT:        %583 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %584 = memref.load %583[%582, %392, %22] : memref<?x?x?xi32>
//CHECK-NEXT:        %585 = arith.cmpi eq, %584, %20 : i32
//CHECK-NEXT:        %586 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %585, %586[] : memref<i1>
//CHECK-NEXT:        %587 = arith.constant {{.*}} : index
//CHECK-NEXT:        %588 = arith.index_cast %587 : index to i64
//CHECK-NEXT:        %589 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %590 = "llvm.insertvalue"(%589, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %591 = "llvm.insertvalue"(%590, %588) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %592 = arith.constant 114 : i32
//CHECK-NEXT:        %593 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %592, %593[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%586, %591, %593) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %594 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %595 = arith.constant 4 : i32
//CHECK-NEXT:        %596 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %595, %596[] : memref<i32>
//CHECK-NEXT:        %597 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %595, %597[] : memref<i32>
//CHECK-NEXT:        %598 = arith.constant 7 : i32
//CHECK-NEXT:        %599 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %598, %599[] : memref<i32>
//CHECK-NEXT:        %600 = arith.constant 87 : i32
//CHECK-NEXT:        %601 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %600, %601[] : memref<i32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_3darray_one(%594, %596, %597, %599, %601) : (memref<?x?x?xi32>, memref<i32>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %602 = arith.constant 3 : index
//CHECK-NEXT:        %603 = arith.constant 6 : index
//CHECK-NEXT:        %604 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %605 = memref.load %604[%603, %602, %602] : memref<?x?x?xi32>
//CHECK-NEXT:        %606 = arith.constant 87 : i32
//CHECK-NEXT:        %607 = arith.cmpi eq, %605, %606 : i32
//CHECK-NEXT:        %608 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %607, %608[] : memref<i1>
//CHECK-NEXT:        %609 = arith.constant {{.*}} : index
//CHECK-NEXT:        %610 = arith.index_cast %609 : index to i64
//CHECK-NEXT:        %611 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %612 = "llvm.insertvalue"(%611, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %613 = "llvm.insertvalue"(%612, %610) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %614 = arith.constant 117 : i32
//CHECK-NEXT:        %615 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %614, %615[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%608, %613, %615) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %616 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %617 = "memref.cast"(%616) : (memref<?x?x?xi32>) -> memref<10x10x10xi32>
//CHECK-NEXT:        %618 = arith.constant 7 : i32
//CHECK-NEXT:        %619 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %618, %619[] : memref<i32>
//CHECK-NEXT:        %620 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %18, %620[] : memref<i32>
//CHECK-NEXT:        %621 = arith.constant 3 : i32
//CHECK-NEXT:        %622 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %621, %622[] : memref<i32>
//CHECK-NEXT:        %623 = arith.constant 13 : i32
//CHECK-NEXT:        %624 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %623, %624[] : memref<i32>
//CHECK-NEXT:        func.call @_QMpointers_testPmodify_3darray_two(%617, %619, %620, %622, %624) : (memref<10x10x10xi32>, memref<i32>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %625 = arith.constant 6 : index
//CHECK-NEXT:        %626 = arith.constant 0 : index
//CHECK-NEXT:        %627 = memref.load %11[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %628 = memref.load %627[%392, %626, %625] : memref<?x?x?xi32>
//CHECK-NEXT:        %629 = arith.constant 13 : i32
//CHECK-NEXT:        %630 = arith.cmpi eq, %628, %629 : i32
//CHECK-NEXT:        %631 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %630, %631[] : memref<i1>
//CHECK-NEXT:        %632 = arith.constant {{.*}} : index
//CHECK-NEXT:        %633 = arith.index_cast %632 : index to i64
//CHECK-NEXT:        %634 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %635 = "llvm.insertvalue"(%634, %45) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %636 = "llvm.insertvalue"(%635, %633) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %637 = arith.constant 120 : i32
//CHECK-NEXT:        %638 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %637, %638[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%631, %636, %638) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPswap(%0 : !llvm.ptr {fir.bindc_name = "swp1"}, %1 : !llvm.ptr {fir.bindc_name = "swp2"}) {
//CHECK-NEXT:      %2 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %3 = "llvm.insertvalue"(%2, %0) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %4 = "llvm.insertvalue"(%3, %0) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %5 = arith.constant 0 : i64
//CHECK-NEXT:      %6 = "llvm.insertvalue"(%4, %5) <{position = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %7 = builtin.unrealized_conversion_cast %6 : !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)> to memref<memref<?xf32>>
//CHECK-NEXT:      %8 = "llvm.insertvalue"(%2, %1) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %9 = "llvm.insertvalue"(%8, %1) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %10 = "llvm.insertvalue"(%9, %5) <{position = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %11 = builtin.unrealized_conversion_cast %10 : !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)> to memref<memref<?xf32>>
//CHECK-NEXT:      %12 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %13 = memref.load %7[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %13, %12[] : memref<memref<?xf32>>
//CHECK-NEXT:      %14 = memref.load %11[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %14, %7[] : memref<memref<?xf32>>
//CHECK-NEXT:      %15 = memref.load %12[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %15, %11[] : memref<memref<?xf32>>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_array_ptr_one(%0 : !llvm.ptr {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %4 = "llvm.insertvalue"(%3, %0) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %5 = "llvm.insertvalue"(%4, %0) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %6 = arith.constant 0 : i64
//CHECK-NEXT:      %7 = "llvm.insertvalue"(%5, %6) <{position = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %8 = builtin.unrealized_conversion_cast %7 : !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)> to memref<memref<?xf32>>
//CHECK-NEXT:      %9 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %10 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %11 = arith.extui %10 : i32 to i64
//CHECK-NEXT:      %12 = arith.index_cast %11 : i64 to index
//CHECK-NEXT:      %13 = arith.constant 1 : index
//CHECK-NEXT:      %14 = arith.subi %12, %13 : index
//CHECK-NEXT:      %15 = memref.load %8[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %9, %15[%14] : memref<?xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_3darray_ptr_one(%0 : !llvm.ptr {fir.bindc_name = "array"}, %1 : memref<i32> {fir.bindc_name = "k"}, %2 : memref<i32> {fir.bindc_name = "j"}, %3 : memref<i32> {fir.bindc_name = "i"}, %4 : memref<i32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %5 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %6 = "llvm.insertvalue"(%5, %0) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %7 = "llvm.insertvalue"(%6, %0) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %8 = arith.constant 0 : i64
//CHECK-NEXT:      %9 = "llvm.insertvalue"(%7, %8) <{position = array<i64: 2>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)>
//CHECK-NEXT:      %10 = builtin.unrealized_conversion_cast %9 : !llvm.struct<(!llvm.ptr, !llvm.ptr, i64)> to memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %11 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %12 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %13 = arith.extui %12 : i32 to i64
//CHECK-NEXT:      %14 = arith.index_cast %13 : i64 to index
//CHECK-NEXT:      %15 = arith.constant 1 : index
//CHECK-NEXT:      %16 = arith.subi %14, %15 : index
//CHECK-NEXT:      %17 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %18 = arith.extui %17 : i32 to i64
//CHECK-NEXT:      %19 = arith.index_cast %18 : i64 to index
//CHECK-NEXT:      %20 = arith.subi %19, %15 : index
//CHECK-NEXT:      %21 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %22 = arith.extui %21 : i32 to i64
//CHECK-NEXT:      %23 = arith.index_cast %22 : i64 to index
//CHECK-NEXT:      %24 = arith.subi %23, %15 : index
//CHECK-NEXT:      %25 = memref.load %10[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      memref.store %11, %25[%24, %20, %16] : memref<?x?x?xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_array_one(%0 : memref<?xf32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %4 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %5 = arith.extui %4 : i32 to i64
//CHECK-NEXT:      %6 = arith.index_cast %5 : i64 to index
//CHECK-NEXT:      %7 = arith.constant 1 : index
//CHECK-NEXT:      %8 = arith.subi %6, %7 : index
//CHECK-NEXT:      memref.store %3, %0[%8] : memref<?xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_array_two(%0 : memref<100xf32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %4 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %5 = arith.extui %4 : i32 to i64
//CHECK-NEXT:      %6 = arith.index_cast %5 : i64 to index
//CHECK-NEXT:      %7 = arith.constant 1 : index
//CHECK-NEXT:      %8 = arith.subi %6, %7 : index
//CHECK-NEXT:      memref.store %3, %0[%8] : memref<100xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_3darray_one(%0 : memref<?x?x?xi32> {fir.bindc_name = "array"}, %1 : memref<i32> {fir.bindc_name = "k"}, %2 : memref<i32> {fir.bindc_name = "j"}, %3 : memref<i32> {fir.bindc_name = "i"}, %4 : memref<i32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %5 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %6 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %7 = arith.extui %6 : i32 to i64
//CHECK-NEXT:      %8 = arith.index_cast %7 : i64 to index
//CHECK-NEXT:      %9 = arith.constant 1 : index
//CHECK-NEXT:      %10 = arith.subi %8, %9 : index
//CHECK-NEXT:      %11 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %12 = arith.extui %11 : i32 to i64
//CHECK-NEXT:      %13 = arith.index_cast %12 : i64 to index
//CHECK-NEXT:      %14 = arith.subi %13, %9 : index
//CHECK-NEXT:      %15 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %16 = arith.extui %15 : i32 to i64
//CHECK-NEXT:      %17 = arith.index_cast %16 : i64 to index
//CHECK-NEXT:      %18 = arith.subi %17, %9 : index
//CHECK-NEXT:      memref.store %5, %0[%18, %14, %10] : memref<?x?x?xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpointers_testPmodify_3darray_two(%0 : memref<10x10x10xi32> {fir.bindc_name = "array"}, %1 : memref<i32> {fir.bindc_name = "k"}, %2 : memref<i32> {fir.bindc_name = "j"}, %3 : memref<i32> {fir.bindc_name = "i"}, %4 : memref<i32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %5 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %6 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %7 = arith.extui %6 : i32 to i64
//CHECK-NEXT:      %8 = arith.index_cast %7 : i64 to index
//CHECK-NEXT:      %9 = arith.constant 1 : index
//CHECK-NEXT:      %10 = arith.subi %8, %9 : index
//CHECK-NEXT:      %11 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %12 = arith.extui %11 : i32 to i64
//CHECK-NEXT:      %13 = arith.index_cast %12 : i64 to index
//CHECK-NEXT:      %14 = arith.subi %13, %9 : index
//CHECK-NEXT:      %15 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %16 = arith.extui %15 : i32 to i64
//CHECK-NEXT:      %17 = arith.index_cast %16 : i64 to index
//CHECK-NEXT:      %18 = arith.subi %17, %9 : index
//CHECK-NEXT:      memref.store %5, %0[%18, %14, %10] : memref<10x10x10xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMpointers_testFcalcEptr1", type = memref<memref<?xf32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMpointers_testFcalcEptr2", type = memref<memref<?xf32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMpointers_testFcalcEptr_md", type = memref<memref<?x?x?xi32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
