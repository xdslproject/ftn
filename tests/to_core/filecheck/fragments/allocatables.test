// RUN: xftn %S/../../../../examples/fragments/allocatables.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMallocatables_testEglobal_array", type = memref<memref<?xf32>>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    func.func @_QMallocatables_testPcalc() {
//CHECK-NEXT:      %0 = memref.get_global @_QMallocatables_testEglobal_array : memref<memref<?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %6 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf32>>
//CHECK-NEXT:      %8 = arith.constant 100 : index
//CHECK-NEXT:      %9 = memref.alloc(%8) : memref<?xf32>
//CHECK-NEXT:      memref.store %9, %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %10 = arith.constant 100 : index
//CHECK-NEXT:      %11 = memref.alloc(%10) : memref<?xf32>
//CHECK-NEXT:      memref.store %11, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %12 = arith.constant 100 : index
//CHECK-NEXT:      %13 = memref.alloc(%12) : memref<?xf32>
//CHECK-NEXT:      memref.store %13, %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      %14 = arith.constant 10 : index
//CHECK-NEXT:      %15 = arith.constant 10 : index
//CHECK-NEXT:      %16 = arith.constant 10 : index
//CHECK-NEXT:      %17 = memref.alloc(%16, %15, %14) : memref<?x?x?xi32>
//CHECK-NEXT:      memref.store %17, %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      %18 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %19 = arith.constant true
//CHECK-NEXT:        %20 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %19, %20[] : memref<i1>
//CHECK-NEXT:        %21 = arith.constant {{.*}} : index
//CHECK-NEXT:        %22 = arith.index_cast %21 : index to i64
//CHECK-NEXT:        %23 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %24 = "llvm.insertvalue"(%23, %18) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %25 = "llvm.insertvalue"(%24, %22) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %26 = arith.constant 20 : i32
//CHECK-NEXT:        %27 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %26, %27[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%20, %25, %27) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %28 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %29 = arith.constant true
//CHECK-NEXT:        %30 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %29, %30[] : memref<i1>
//CHECK-NEXT:        %31 = arith.constant {{.*}} : index
//CHECK-NEXT:        %32 = arith.index_cast %31 : index to i64
//CHECK-NEXT:        %33 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %34 = "llvm.insertvalue"(%33, %28) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %35 = "llvm.insertvalue"(%34, %32) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %36 = arith.constant 21 : i32
//CHECK-NEXT:        %37 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %36, %37[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%30, %35, %37) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %38 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %39 = arith.constant true
//CHECK-NEXT:        %40 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %39, %40[] : memref<i1>
//CHECK-NEXT:        %41 = arith.constant {{.*}} : index
//CHECK-NEXT:        %42 = arith.index_cast %41 : index to i64
//CHECK-NEXT:        %43 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %44 = "llvm.insertvalue"(%43, %38) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %45 = "llvm.insertvalue"(%44, %42) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %46 = arith.constant 22 : i32
//CHECK-NEXT:        %47 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %46, %47[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%40, %45, %47) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %48 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %49 = arith.constant true
//CHECK-NEXT:        %50 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %49, %50[] : memref<i1>
//CHECK-NEXT:        %51 = arith.constant {{.*}} : index
//CHECK-NEXT:        %52 = arith.index_cast %51 : index to i64
//CHECK-NEXT:        %53 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %54 = "llvm.insertvalue"(%53, %48) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %55 = "llvm.insertvalue"(%54, %52) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %56 = arith.constant 23 : i32
//CHECK-NEXT:        %57 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %56, %57[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%50, %55, %57) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %58 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %59 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:        %60 = arith.constant 0 : index
//CHECK-NEXT:        %61 = arith.constant 1 : index
//CHECK-NEXT:        %62 = arith.constant 1 : index
//CHECK-NEXT:        %63 = "memref.dim"(%59, %60) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %64 = arith.index_cast %63 : index to i64
//CHECK-NEXT:        %65 = arith.trunci %64 : i64 to i32
//CHECK-NEXT:        %66 = arith.constant 100 : i32
//CHECK-NEXT:        %67 = arith.cmpi eq, %65, %66 : i32
//CHECK-NEXT:        %68 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %67, %68[] : memref<i1>
//CHECK-NEXT:        %69 = arith.constant {{.*}} : index
//CHECK-NEXT:        %70 = arith.index_cast %69 : index to i64
//CHECK-NEXT:        %71 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %72 = "llvm.insertvalue"(%71, %58) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %73 = "llvm.insertvalue"(%72, %70) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %74 = arith.constant 26 : i32
//CHECK-NEXT:        %75 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %74, %75[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%68, %73, %75) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %76 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %77 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:        %78 = arith.constant 0 : index
//CHECK-NEXT:        %79 = arith.constant 1 : index
//CHECK-NEXT:        %80 = arith.constant 1 : index
//CHECK-NEXT:        %81 = "memref.dim"(%77, %78) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %82 = arith.index_cast %81 : index to i64
//CHECK-NEXT:        %83 = arith.trunci %82 : i64 to i32
//CHECK-NEXT:        %84 = arith.constant 100 : i32
//CHECK-NEXT:        %85 = arith.cmpi eq, %83, %84 : i32
//CHECK-NEXT:        %86 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %85, %86[] : memref<i1>
//CHECK-NEXT:        %87 = arith.constant {{.*}} : index
//CHECK-NEXT:        %88 = arith.index_cast %87 : index to i64
//CHECK-NEXT:        %89 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %90 = "llvm.insertvalue"(%89, %76) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %91 = "llvm.insertvalue"(%90, %88) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %92 = arith.constant 27 : i32
//CHECK-NEXT:        %93 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %92, %93[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%86, %91, %93) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %94 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %95 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:        %96 = arith.constant 0 : index
//CHECK-NEXT:        %97 = arith.constant 1 : index
//CHECK-NEXT:        %98 = arith.constant 1 : index
//CHECK-NEXT:        %99 = "memref.dim"(%95, %96) : (memref<?xf32>, index) -> index
//CHECK-NEXT:        %100 = arith.index_cast %99 : index to i64
//CHECK-NEXT:        %101 = arith.trunci %100 : i64 to i32
//CHECK-NEXT:        %102 = arith.constant 100 : i32
//CHECK-NEXT:        %103 = arith.cmpi eq, %101, %102 : i32
//CHECK-NEXT:        %104 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %103, %104[] : memref<i1>
//CHECK-NEXT:        %105 = arith.constant {{.*}} : index
//CHECK-NEXT:        %106 = arith.index_cast %105 : index to i64
//CHECK-NEXT:        %107 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %108 = "llvm.insertvalue"(%107, %94) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %109 = "llvm.insertvalue"(%108, %106) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %110 = arith.constant 28 : i32
//CHECK-NEXT:        %111 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %110, %111[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%104, %109, %111) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %112 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %113 = memref.load %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %114 = arith.constant 0 : index
//CHECK-NEXT:        %115 = arith.constant 1 : index
//CHECK-NEXT:        %116 = arith.constant 1 : index
//CHECK-NEXT:        %117 = "memref.dim"(%113, %114) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %118 = arith.index_cast %117 : index to i64
//CHECK-NEXT:        %119 = memref.load %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %120 = arith.constant 1 : index
//CHECK-NEXT:        %121 = arith.constant 1 : index
//CHECK-NEXT:        %122 = arith.constant 1 : index
//CHECK-NEXT:        %123 = "memref.dim"(%119, %120) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %124 = arith.index_cast %123 : index to i64
//CHECK-NEXT:        %125 = arith.muli %118, %124 : i64
//CHECK-NEXT:        %126 = memref.load %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %127 = arith.constant 2 : index
//CHECK-NEXT:        %128 = arith.constant 1 : index
//CHECK-NEXT:        %129 = arith.constant 1 : index
//CHECK-NEXT:        %130 = "memref.dim"(%126, %127) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %131 = arith.index_cast %130 : index to i64
//CHECK-NEXT:        %132 = arith.muli %125, %131 : i64
//CHECK-NEXT:        %133 = arith.trunci %132 : i64 to i32
//CHECK-NEXT:        %134 = arith.constant 1000 : i32
//CHECK-NEXT:        %135 = arith.cmpi eq, %133, %134 : i32
//CHECK-NEXT:        %136 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %135, %136[] : memref<i1>
//CHECK-NEXT:        %137 = arith.constant {{.*}} : index
//CHECK-NEXT:        %138 = arith.index_cast %137 : index to i64
//CHECK-NEXT:        %139 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %140 = "llvm.insertvalue"(%139, %112) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %141 = "llvm.insertvalue"(%140, %138) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %142 = arith.constant 29 : i32
//CHECK-NEXT:        %143 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %142, %143[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%136, %141, %143) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %144 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %145 = memref.load %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %146 = arith.constant 1 : index
//CHECK-NEXT:        %147 = arith.constant 1 : index
//CHECK-NEXT:        %148 = arith.constant 1 : index
//CHECK-NEXT:        %149 = "memref.dim"(%145, %146) : (memref<?x?x?xi32>, index) -> index
//CHECK-NEXT:        %150 = arith.index_cast %149 : index to i64
//CHECK-NEXT:        %151 = arith.trunci %150 : i64 to i32
//CHECK-NEXT:        %152 = arith.constant 10 : i32
//CHECK-NEXT:        %153 = arith.cmpi eq, %151, %152 : i32
//CHECK-NEXT:        %154 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %153, %154[] : memref<i1>
//CHECK-NEXT:        %155 = arith.constant {{.*}} : index
//CHECK-NEXT:        %156 = arith.index_cast %155 : index to i64
//CHECK-NEXT:        %157 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %158 = "llvm.insertvalue"(%157, %144) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %159 = "llvm.insertvalue"(%158, %156) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %160 = arith.constant 30 : i32
//CHECK-NEXT:        %161 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %160, %161[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%154, %159, %161) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %162 = arith.constant 1 : i32
//CHECK-NEXT:      %163 = arith.index_cast %162 : i32 to index
//CHECK-NEXT:      %164 = arith.constant 100 : i32
//CHECK-NEXT:      %165 = arith.index_cast %164 : i32 to index
//CHECK-NEXT:      %166 = arith.constant 1 : index
//CHECK-NEXT:      %167 = arith.index_cast %163 : index to i32
//CHECK-NEXT:      %168 = arith.constant 1 : index
//CHECK-NEXT:      %169 = arith.addi %165, %168 : index
//CHECK-NEXT:      %170 = scf.for %171 = %163 to %169 step %166 iter_args(%172 = %167) -> (i32) {
//CHECK-NEXT:        memref.store %172, %4[] : memref<i32>
//CHECK-NEXT:        %173 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %174 = arith.sitofp %173 : i32 to f32
//CHECK-NEXT:        %175 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %176 = arith.extui %175 : i32 to i64
//CHECK-NEXT:        %177 = arith.index_cast %176 : i64 to index
//CHECK-NEXT:        %178 = arith.constant 1 : index
//CHECK-NEXT:        %179 = arith.subi %177, %178 : index
//CHECK-NEXT:        %180 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:        memref.store %174, %180[%179] : memref<?xf32>
//CHECK-NEXT:        %181 = arith.constant 100 : i32
//CHECK-NEXT:        %182 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %183 = arith.subi %181, %182 : i32
//CHECK-NEXT:        %184 = arith.sitofp %183 : i32 to f32
//CHECK-NEXT:        %185 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %186 = arith.extui %185 : i32 to i64
//CHECK-NEXT:        %187 = arith.index_cast %186 : i64 to index
//CHECK-NEXT:        %188 = arith.constant 1 : index
//CHECK-NEXT:        %189 = arith.subi %187, %188 : index
//CHECK-NEXT:        %190 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        memref.store %184, %190[%189] : memref<?xf32>
//CHECK-NEXT:        %191 = arith.constant 10 : i32
//CHECK-NEXT:        %192 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %193 = arith.muli %191, %192 : i32
//CHECK-NEXT:        %194 = arith.sitofp %193 : i32 to f32
//CHECK-NEXT:        %195 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %196 = arith.extui %195 : i32 to i64
//CHECK-NEXT:        %197 = arith.index_cast %196 : i64 to index
//CHECK-NEXT:        %198 = arith.constant 1 : index
//CHECK-NEXT:        %199 = arith.subi %197, %198 : index
//CHECK-NEXT:        %200 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:        memref.store %194, %200[%199] : memref<?xf32>
//CHECK-NEXT:        %201 = arith.addi %171, %166 : index
//CHECK-NEXT:        %202 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %203 = arith.index_cast %166 : index to i32
//CHECK-NEXT:        %204 = arith.addi %202, %203 : i32
//CHECK-NEXT:        scf.yield %204 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %170, %4[] : memref<i32>
//CHECK-NEXT:      %205 = arith.constant 1 : i32
//CHECK-NEXT:      %206 = arith.index_cast %205 : i32 to index
//CHECK-NEXT:      %207 = arith.constant 100 : i32
//CHECK-NEXT:      %208 = arith.index_cast %207 : i32 to index
//CHECK-NEXT:      %209 = arith.constant 1 : index
//CHECK-NEXT:      %210 = arith.index_cast %206 : index to i32
//CHECK-NEXT:      %211 = arith.constant 1 : index
//CHECK-NEXT:      %212 = arith.addi %208, %211 : index
//CHECK-NEXT:      %213 = scf.for %214 = %206 to %212 step %209 iter_args(%215 = %210) -> (i32) {
//CHECK-NEXT:        memref.store %215, %4[] : memref<i32>
//CHECK-NEXT:        %216 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %217 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %218 = arith.extui %217 : i32 to i64
//CHECK-NEXT:          %219 = arith.index_cast %218 : i64 to index
//CHECK-NEXT:          %220 = arith.constant 1 : index
//CHECK-NEXT:          %221 = arith.subi %219, %220 : index
//CHECK-NEXT:          %222 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:          %223 = memref.load %222[%221] : memref<?xf32>
//CHECK-NEXT:          %224 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %225 = arith.sitofp %224 : i32 to f32
//CHECK-NEXT:          %226 = arith.cmpf oeq, %223, %225 : f32
//CHECK-NEXT:          %227 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %226, %227[] : memref<i1>
//CHECK-NEXT:          %228 = arith.constant {{.*}} : index
//CHECK-NEXT:          %229 = arith.index_cast %228 : index to i64
//CHECK-NEXT:          %230 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %231 = "llvm.insertvalue"(%230, %216) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %232 = "llvm.insertvalue"(%231, %229) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %233 = arith.constant 40 : i32
//CHECK-NEXT:          %234 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %233, %234[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%227, %232, %234) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %235 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %236 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %237 = arith.extui %236 : i32 to i64
//CHECK-NEXT:          %238 = arith.index_cast %237 : i64 to index
//CHECK-NEXT:          %239 = arith.constant 1 : index
//CHECK-NEXT:          %240 = arith.subi %238, %239 : index
//CHECK-NEXT:          %241 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:          %242 = memref.load %241[%240] : memref<?xf32>
//CHECK-NEXT:          %243 = arith.constant 100 : i32
//CHECK-NEXT:          %244 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %245 = arith.subi %243, %244 : i32
//CHECK-NEXT:          %246 = arith.sitofp %245 : i32 to f32
//CHECK-NEXT:          %247 = arith.cmpf oeq, %242, %246 : f32
//CHECK-NEXT:          %248 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %247, %248[] : memref<i1>
//CHECK-NEXT:          %249 = arith.constant {{.*}} : index
//CHECK-NEXT:          %250 = arith.index_cast %249 : index to i64
//CHECK-NEXT:          %251 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %252 = "llvm.insertvalue"(%251, %235) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %253 = "llvm.insertvalue"(%252, %250) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %254 = arith.constant 41 : i32
//CHECK-NEXT:          %255 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %254, %255[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%248, %253, %255) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %256 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %257 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %258 = arith.extui %257 : i32 to i64
//CHECK-NEXT:          %259 = arith.index_cast %258 : i64 to index
//CHECK-NEXT:          %260 = arith.constant 1 : index
//CHECK-NEXT:          %261 = arith.subi %259, %260 : index
//CHECK-NEXT:          %262 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:          %263 = memref.load %262[%261] : memref<?xf32>
//CHECK-NEXT:          %264 = arith.constant 10 : i32
//CHECK-NEXT:          %265 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %266 = arith.muli %264, %265 : i32
//CHECK-NEXT:          %267 = arith.sitofp %266 : i32 to f32
//CHECK-NEXT:          %268 = arith.cmpf oeq, %263, %267 : f32
//CHECK-NEXT:          %269 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %268, %269[] : memref<i1>
//CHECK-NEXT:          %270 = arith.constant {{.*}} : index
//CHECK-NEXT:          %271 = arith.index_cast %270 : index to i64
//CHECK-NEXT:          %272 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %273 = "llvm.insertvalue"(%272, %256) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %274 = "llvm.insertvalue"(%273, %271) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %275 = arith.constant 42 : i32
//CHECK-NEXT:          %276 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %275, %276[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%269, %274, %276) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %277 = arith.addi %214, %209 : index
//CHECK-NEXT:        %278 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %279 = arith.index_cast %209 : index to i32
//CHECK-NEXT:        %280 = arith.addi %278, %279 : i32
//CHECK-NEXT:        scf.yield %280 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %213, %4[] : memref<i32>
//CHECK-NEXT:      %281 = arith.constant 3.450000e+01 : f32
//CHECK-NEXT:      %282 = arith.constant 20 : index
//CHECK-NEXT:      %283 = arith.constant 1 : index
//CHECK-NEXT:      %284 = arith.subi %282, %283 : index
//CHECK-NEXT:      %285 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %281, %285[%284] : memref<?xf32>
//CHECK-NEXT:      %286 = arith.constant 1.652000e+02 : f32
//CHECK-NEXT:      %287 = arith.constant 50 : index
//CHECK-NEXT:      %288 = arith.constant 1 : index
//CHECK-NEXT:      %289 = arith.subi %287, %288 : index
//CHECK-NEXT:      %290 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %286, %290[%289] : memref<?xf32>
//CHECK-NEXT:      %291 = arith.constant 2.310000e+01 : f32
//CHECK-NEXT:      %292 = arith.constant 70 : index
//CHECK-NEXT:      %293 = arith.constant 1 : index
//CHECK-NEXT:      %294 = arith.subi %292, %293 : index
//CHECK-NEXT:      %295 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %291, %295[%294] : memref<?xf32>
//CHECK-NEXT:      %296 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %297 = arith.constant 20 : index
//CHECK-NEXT:        %298 = arith.constant 1 : index
//CHECK-NEXT:        %299 = arith.subi %297, %298 : index
//CHECK-NEXT:        %300 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:        %301 = memref.load %300[%299] : memref<?xf32>
//CHECK-NEXT:        %302 = arith.constant 3.450000e+01 : f32
//CHECK-NEXT:        %303 = arith.cmpf oeq, %301, %302 : f32
//CHECK-NEXT:        %304 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %303, %304[] : memref<i1>
//CHECK-NEXT:        %305 = arith.constant {{.*}} : index
//CHECK-NEXT:        %306 = arith.index_cast %305 : index to i64
//CHECK-NEXT:        %307 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %308 = "llvm.insertvalue"(%307, %296) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %309 = "llvm.insertvalue"(%308, %306) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %310 = arith.constant 49 : i32
//CHECK-NEXT:        %311 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %310, %311[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%304, %309, %311) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %312 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %313 = arith.constant 50 : index
//CHECK-NEXT:        %314 = arith.constant 1 : index
//CHECK-NEXT:        %315 = arith.subi %313, %314 : index
//CHECK-NEXT:        %316 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %317 = memref.load %316[%315] : memref<?xf32>
//CHECK-NEXT:        %318 = arith.constant 1.652000e+02 : f32
//CHECK-NEXT:        %319 = arith.cmpf oeq, %317, %318 : f32
//CHECK-NEXT:        %320 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %319, %320[] : memref<i1>
//CHECK-NEXT:        %321 = arith.constant {{.*}} : index
//CHECK-NEXT:        %322 = arith.index_cast %321 : index to i64
//CHECK-NEXT:        %323 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %324 = "llvm.insertvalue"(%323, %312) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %325 = "llvm.insertvalue"(%324, %322) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %326 = arith.constant 50 : i32
//CHECK-NEXT:        %327 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %326, %327[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%320, %325, %327) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %328 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %329 = arith.constant 70 : index
//CHECK-NEXT:        %330 = arith.constant 1 : index
//CHECK-NEXT:        %331 = arith.subi %329, %330 : index
//CHECK-NEXT:        %332 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:        %333 = memref.load %332[%331] : memref<?xf32>
//CHECK-NEXT:        %334 = arith.constant 2.310000e+01 : f32
//CHECK-NEXT:        %335 = arith.cmpf oeq, %333, %334 : f32
//CHECK-NEXT:        %336 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %335, %336[] : memref<i1>
//CHECK-NEXT:        %337 = arith.constant {{.*}} : index
//CHECK-NEXT:        %338 = arith.index_cast %337 : index to i64
//CHECK-NEXT:        %339 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %340 = "llvm.insertvalue"(%339, %328) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %341 = "llvm.insertvalue"(%340, %338) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %342 = arith.constant 51 : i32
//CHECK-NEXT:        %343 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %342, %343[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%336, %341, %343) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %344 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:        %345 = arith.constant 20 : i32
//CHECK-NEXT:        %346 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %345, %346[] : memref<i32>
//CHECK-NEXT:        %347 = arith.constant 2.000000e+01 : f32
//CHECK-NEXT:        %348 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %347, %348[] : memref<f32>
//CHECK-NEXT:        func.call @_QMallocatables_testPmodify_array_one(%344, %346, %348) : (memref<?xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %349 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:        %350 = "memref.cast"(%349) : (memref<?xf32>) -> memref<100xf32>
//CHECK-NEXT:        %351 = arith.constant 50 : i32
//CHECK-NEXT:        %352 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %351, %352[] : memref<i32>
//CHECK-NEXT:        %353 = arith.constant 5.000000e+01 : f32
//CHECK-NEXT:        %354 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %353, %354[] : memref<f32>
//CHECK-NEXT:        func.call @_QMallocatables_testPmodify_array_two(%350, %352, %354) : (memref<100xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %355 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:        %356 = "memref.cast"(%355) : (memref<?xf32>) -> memref<100xf32>
//CHECK-NEXT:        %357 = arith.constant 70 : i32
//CHECK-NEXT:        %358 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %357, %358[] : memref<i32>
//CHECK-NEXT:        %359 = arith.constant 7.000000e+02 : f32
//CHECK-NEXT:        %360 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %359, %360[] : memref<f32>
//CHECK-NEXT:        func.call @_QMallocatables_testPmodify_array_two(%356, %358, %360) : (memref<100xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %361 = arith.constant 1 : i32
//CHECK-NEXT:      %362 = arith.index_cast %361 : i32 to index
//CHECK-NEXT:      %363 = arith.constant 100 : i32
//CHECK-NEXT:      %364 = arith.index_cast %363 : i32 to index
//CHECK-NEXT:      %365 = arith.constant 1 : index
//CHECK-NEXT:      %366 = arith.index_cast %362 : index to i32
//CHECK-NEXT:      %367 = arith.constant 1 : index
//CHECK-NEXT:      %368 = arith.addi %364, %367 : index
//CHECK-NEXT:      %369 = scf.for %370 = %362 to %368 step %365 iter_args(%371 = %366) -> (i32) {
//CHECK-NEXT:        memref.store %371, %4[] : memref<i32>
//CHECK-NEXT:        %372 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %373 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %374 = arith.extui %373 : i32 to i64
//CHECK-NEXT:          %375 = arith.index_cast %374 : i64 to index
//CHECK-NEXT:          %376 = arith.constant 1 : index
//CHECK-NEXT:          %377 = arith.subi %375, %376 : index
//CHECK-NEXT:          %378 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:          %379 = memref.load %378[%377] : memref<?xf32>
//CHECK-NEXT:          %380 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %381 = arith.sitofp %380 : i32 to f32
//CHECK-NEXT:          %382 = arith.cmpf oeq, %379, %381 : f32
//CHECK-NEXT:          %383 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %382, %383[] : memref<i1>
//CHECK-NEXT:          %384 = arith.constant {{.*}} : index
//CHECK-NEXT:          %385 = arith.index_cast %384 : index to i64
//CHECK-NEXT:          %386 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %387 = "llvm.insertvalue"(%386, %372) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %388 = "llvm.insertvalue"(%387, %385) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %389 = arith.constant 61 : i32
//CHECK-NEXT:          %390 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %389, %390[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%383, %388, %390) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %391 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %392 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %393 = arith.extui %392 : i32 to i64
//CHECK-NEXT:          %394 = arith.index_cast %393 : i64 to index
//CHECK-NEXT:          %395 = arith.constant 1 : index
//CHECK-NEXT:          %396 = arith.subi %394, %395 : index
//CHECK-NEXT:          %397 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:          %398 = memref.load %397[%396] : memref<?xf32>
//CHECK-NEXT:          %399 = arith.constant 100 : i32
//CHECK-NEXT:          %400 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %401 = arith.subi %399, %400 : i32
//CHECK-NEXT:          %402 = arith.sitofp %401 : i32 to f32
//CHECK-NEXT:          %403 = arith.cmpf oeq, %398, %402 : f32
//CHECK-NEXT:          %404 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %403, %404[] : memref<i1>
//CHECK-NEXT:          %405 = arith.constant {{.*}} : index
//CHECK-NEXT:          %406 = arith.index_cast %405 : index to i64
//CHECK-NEXT:          %407 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %408 = "llvm.insertvalue"(%407, %391) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %409 = "llvm.insertvalue"(%408, %406) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %410 = arith.constant 62 : i32
//CHECK-NEXT:          %411 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %410, %411[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%404, %409, %411) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %412 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %413 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %414 = arith.extui %413 : i32 to i64
//CHECK-NEXT:          %415 = arith.index_cast %414 : i64 to index
//CHECK-NEXT:          %416 = arith.constant 1 : index
//CHECK-NEXT:          %417 = arith.subi %415, %416 : index
//CHECK-NEXT:          %418 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:          %419 = memref.load %418[%417] : memref<?xf32>
//CHECK-NEXT:          %420 = arith.constant 10 : i32
//CHECK-NEXT:          %421 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %422 = arith.muli %420, %421 : i32
//CHECK-NEXT:          %423 = arith.sitofp %422 : i32 to f32
//CHECK-NEXT:          %424 = arith.cmpf oeq, %419, %423 : f32
//CHECK-NEXT:          %425 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %424, %425[] : memref<i1>
//CHECK-NEXT:          %426 = arith.constant {{.*}} : index
//CHECK-NEXT:          %427 = arith.index_cast %426 : index to i64
//CHECK-NEXT:          %428 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %429 = "llvm.insertvalue"(%428, %412) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %430 = "llvm.insertvalue"(%429, %427) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %431 = arith.constant 63 : i32
//CHECK-NEXT:          %432 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %431, %432[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%425, %430, %432) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %433 = arith.addi %370, %365 : index
//CHECK-NEXT:        %434 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %435 = arith.index_cast %365 : index to i32
//CHECK-NEXT:        %436 = arith.addi %434, %435 : i32
//CHECK-NEXT:        scf.yield %436 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %369, %4[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %437 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:        %438 = arith.constant 60 : i32
//CHECK-NEXT:        %439 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %438, %439[] : memref<i32>
//CHECK-NEXT:        %440 = arith.constant 1.234000e+02 : f32
//CHECK-NEXT:        %441 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %440, %441[] : memref<f32>
//CHECK-NEXT:        func.call @_QMallocatables_testPmodify_array_one(%437, %439, %441) : (memref<?xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %442 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %443 = arith.constant 60 : index
//CHECK-NEXT:        %444 = arith.constant 1 : index
//CHECK-NEXT:        %445 = arith.subi %443, %444 : index
//CHECK-NEXT:        %446 = memref.load %0[] : memref<memref<?xf32>>
//CHECK-NEXT:        %447 = memref.load %446[%445] : memref<?xf32>
//CHECK-NEXT:        %448 = arith.constant 1.234000e+02 : f32
//CHECK-NEXT:        %449 = arith.cmpf oeq, %447, %448 : f32
//CHECK-NEXT:        %450 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %449, %450[] : memref<i1>
//CHECK-NEXT:        %451 = arith.constant {{.*}} : index
//CHECK-NEXT:        %452 = arith.index_cast %451 : index to i64
//CHECK-NEXT:        %453 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %454 = "llvm.insertvalue"(%453, %442) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %455 = "llvm.insertvalue"(%454, %452) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %456 = arith.constant 67 : i32
//CHECK-NEXT:        %457 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %456, %457[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%450, %455, %457) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %458 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %458, %7[] : memref<memref<?xf32>>
//CHECK-NEXT:      %459 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %459, %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      %460 = memref.load %7[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.store %460, %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      %461 = arith.constant 1 : i32
//CHECK-NEXT:      %462 = arith.index_cast %461 : i32 to index
//CHECK-NEXT:      %463 = arith.constant 100 : i32
//CHECK-NEXT:      %464 = arith.index_cast %463 : i32 to index
//CHECK-NEXT:      %465 = arith.constant 1 : index
//CHECK-NEXT:      %466 = arith.index_cast %462 : index to i32
//CHECK-NEXT:      %467 = arith.constant 1 : index
//CHECK-NEXT:      %468 = arith.addi %464, %467 : index
//CHECK-NEXT:      %469 = scf.for %470 = %462 to %468 step %465 iter_args(%471 = %466) -> (i32) {
//CHECK-NEXT:        memref.store %471, %4[] : memref<i32>
//CHECK-NEXT:        %472 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %473 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %474 = arith.extui %473 : i32 to i64
//CHECK-NEXT:          %475 = arith.index_cast %474 : i64 to index
//CHECK-NEXT:          %476 = arith.constant 1 : index
//CHECK-NEXT:          %477 = arith.subi %475, %476 : index
//CHECK-NEXT:          %478 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:          %479 = memref.load %478[%477] : memref<?xf32>
//CHECK-NEXT:          %480 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %481 = arith.sitofp %480 : i32 to f32
//CHECK-NEXT:          %482 = arith.cmpf oeq, %479, %481 : f32
//CHECK-NEXT:          %483 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %482, %483[] : memref<i1>
//CHECK-NEXT:          %484 = arith.constant {{.*}} : index
//CHECK-NEXT:          %485 = arith.index_cast %484 : index to i64
//CHECK-NEXT:          %486 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %487 = "llvm.insertvalue"(%486, %472) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %488 = "llvm.insertvalue"(%487, %485) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %489 = arith.constant 75 : i32
//CHECK-NEXT:          %490 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %489, %490[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%483, %488, %490) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %491 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %492 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %493 = arith.extui %492 : i32 to i64
//CHECK-NEXT:          %494 = arith.index_cast %493 : i64 to index
//CHECK-NEXT:          %495 = arith.constant 1 : index
//CHECK-NEXT:          %496 = arith.subi %494, %495 : index
//CHECK-NEXT:          %497 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:          %498 = memref.load %497[%496] : memref<?xf32>
//CHECK-NEXT:          %499 = arith.constant 100 : i32
//CHECK-NEXT:          %500 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %501 = arith.subi %499, %500 : i32
//CHECK-NEXT:          %502 = arith.sitofp %501 : i32 to f32
//CHECK-NEXT:          %503 = arith.cmpf oeq, %498, %502 : f32
//CHECK-NEXT:          %504 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %503, %504[] : memref<i1>
//CHECK-NEXT:          %505 = arith.constant {{.*}} : index
//CHECK-NEXT:          %506 = arith.index_cast %505 : index to i64
//CHECK-NEXT:          %507 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %508 = "llvm.insertvalue"(%507, %491) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %509 = "llvm.insertvalue"(%508, %506) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %510 = arith.constant 76 : i32
//CHECK-NEXT:          %511 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %510, %511[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%504, %509, %511) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %512 = arith.addi %470, %465 : index
//CHECK-NEXT:        %513 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %514 = arith.index_cast %465 : index to i32
//CHECK-NEXT:        %515 = arith.addi %513, %514 : i32
//CHECK-NEXT:        scf.yield %515 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %469, %4[] : memref<i32>
//CHECK-NEXT:      %516 = arith.constant 1 : i32
//CHECK-NEXT:      %517 = arith.index_cast %516 : i32 to index
//CHECK-NEXT:      %518 = arith.constant 10 : i32
//CHECK-NEXT:      %519 = arith.index_cast %518 : i32 to index
//CHECK-NEXT:      %520 = arith.constant 1 : index
//CHECK-NEXT:      %521 = arith.index_cast %517 : index to i32
//CHECK-NEXT:      %522 = arith.constant 1 : index
//CHECK-NEXT:      %523 = arith.addi %519, %522 : index
//CHECK-NEXT:      %524 = scf.for %525 = %517 to %523 step %520 iter_args(%526 = %521) -> (i32) {
//CHECK-NEXT:        memref.store %526, %4[] : memref<i32>
//CHECK-NEXT:        %527 = arith.constant 1 : i32
//CHECK-NEXT:        %528 = arith.index_cast %527 : i32 to index
//CHECK-NEXT:        %529 = arith.constant 10 : i32
//CHECK-NEXT:        %530 = arith.index_cast %529 : i32 to index
//CHECK-NEXT:        %531 = arith.constant 1 : index
//CHECK-NEXT:        %532 = arith.index_cast %528 : index to i32
//CHECK-NEXT:        %533 = arith.constant 1 : index
//CHECK-NEXT:        %534 = arith.addi %530, %533 : index
//CHECK-NEXT:        %535 = scf.for %536 = %528 to %534 step %531 iter_args(%537 = %532) -> (i32) {
//CHECK-NEXT:          memref.store %537, %5[] : memref<i32>
//CHECK-NEXT:          %538 = arith.constant 1 : i32
//CHECK-NEXT:          %539 = arith.index_cast %538 : i32 to index
//CHECK-NEXT:          %540 = arith.constant 10 : i32
//CHECK-NEXT:          %541 = arith.index_cast %540 : i32 to index
//CHECK-NEXT:          %542 = arith.constant 1 : index
//CHECK-NEXT:          %543 = arith.index_cast %539 : index to i32
//CHECK-NEXT:          %544 = arith.constant 1 : index
//CHECK-NEXT:          %545 = arith.addi %541, %544 : index
//CHECK-NEXT:          %546 = scf.for %547 = %539 to %545 step %542 iter_args(%548 = %543) -> (i32) {
//CHECK-NEXT:            memref.store %548, %6[] : memref<i32>
//CHECK-NEXT:            %549 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %550 = arith.constant 10 : i32
//CHECK-NEXT:            %551 = memref.load %5[] : memref<i32>
//CHECK-NEXT:            %552 = arith.muli %550, %551 : i32
//CHECK-NEXT:            %553 = arith.addi %549, %552 : i32
//CHECK-NEXT:            %554 = arith.constant 100 : i32
//CHECK-NEXT:            %555 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %556 = arith.muli %554, %555 : i32
//CHECK-NEXT:            %557 = arith.addi %553, %556 : i32
//CHECK-NEXT:            %558 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %559 = arith.extui %558 : i32 to i64
//CHECK-NEXT:            %560 = arith.index_cast %559 : i64 to index
//CHECK-NEXT:            %561 = arith.constant 1 : index
//CHECK-NEXT:            %562 = arith.subi %560, %561 : index
//CHECK-NEXT:            %563 = memref.load %5[] : memref<i32>
//CHECK-NEXT:            %564 = arith.extui %563 : i32 to i64
//CHECK-NEXT:            %565 = arith.index_cast %564 : i64 to index
//CHECK-NEXT:            %566 = arith.constant 1 : index
//CHECK-NEXT:            %567 = arith.subi %565, %566 : index
//CHECK-NEXT:            %568 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %569 = arith.extui %568 : i32 to i64
//CHECK-NEXT:            %570 = arith.index_cast %569 : i64 to index
//CHECK-NEXT:            %571 = arith.constant 1 : index
//CHECK-NEXT:            %572 = arith.subi %570, %571 : index
//CHECK-NEXT:            %573 = memref.load %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:            memref.store %557, %573[%572, %567, %562] : memref<?x?x?xi32>
//CHECK-NEXT:            %574 = arith.addi %547, %542 : index
//CHECK-NEXT:            %575 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %576 = arith.index_cast %542 : index to i32
//CHECK-NEXT:            %577 = arith.addi %575, %576 : i32
//CHECK-NEXT:            scf.yield %577 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %546, %6[] : memref<i32>
//CHECK-NEXT:          %578 = arith.addi %536, %531 : index
//CHECK-NEXT:          %579 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %580 = arith.index_cast %531 : index to i32
//CHECK-NEXT:          %581 = arith.addi %579, %580 : i32
//CHECK-NEXT:          scf.yield %581 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %535, %5[] : memref<i32>
//CHECK-NEXT:        %582 = arith.addi %525, %520 : index
//CHECK-NEXT:        %583 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %584 = arith.index_cast %520 : index to i32
//CHECK-NEXT:        %585 = arith.addi %583, %584 : i32
//CHECK-NEXT:        scf.yield %585 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %524, %4[] : memref<i32>
//CHECK-NEXT:      %586 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %587 = arith.constant 3 : index
//CHECK-NEXT:        %588 = arith.constant 1 : index
//CHECK-NEXT:        %589 = arith.subi %587, %588 : index
//CHECK-NEXT:        %590 = arith.constant 4 : index
//CHECK-NEXT:        %591 = arith.constant 1 : index
//CHECK-NEXT:        %592 = arith.subi %590, %591 : index
//CHECK-NEXT:        %593 = arith.constant 5 : index
//CHECK-NEXT:        %594 = arith.constant 1 : index
//CHECK-NEXT:        %595 = arith.subi %593, %594 : index
//CHECK-NEXT:        %596 = memref.load %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %597 = memref.load %596[%595, %592, %589] : memref<?x?x?xi32>
//CHECK-NEXT:        %598 = arith.constant 543 : i32
//CHECK-NEXT:        %599 = arith.cmpi eq, %597, %598 : i32
//CHECK-NEXT:        %600 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %599, %600[] : memref<i1>
//CHECK-NEXT:        %601 = arith.constant {{.*}} : index
//CHECK-NEXT:        %602 = arith.index_cast %601 : index to i64
//CHECK-NEXT:        %603 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %604 = "llvm.insertvalue"(%603, %586) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %605 = "llvm.insertvalue"(%604, %602) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %606 = arith.constant 87 : i32
//CHECK-NEXT:        %607 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %606, %607[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%600, %605, %607) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %608 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %609 = arith.constant 8 : index
//CHECK-NEXT:        %610 = arith.constant 1 : index
//CHECK-NEXT:        %611 = arith.subi %609, %610 : index
//CHECK-NEXT:        %612 = arith.constant 9 : index
//CHECK-NEXT:        %613 = arith.constant 1 : index
//CHECK-NEXT:        %614 = arith.subi %612, %613 : index
//CHECK-NEXT:        %615 = arith.constant 1 : index
//CHECK-NEXT:        %616 = arith.constant 1 : index
//CHECK-NEXT:        %617 = arith.subi %615, %616 : index
//CHECK-NEXT:        %618 = memref.load %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:        %619 = memref.load %618[%617, %614, %611] : memref<?x?x?xi32>
//CHECK-NEXT:        %620 = arith.constant 198 : i32
//CHECK-NEXT:        %621 = arith.cmpi eq, %619, %620 : i32
//CHECK-NEXT:        %622 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %621, %622[] : memref<i1>
//CHECK-NEXT:        %623 = arith.constant {{.*}} : index
//CHECK-NEXT:        %624 = arith.index_cast %623 : index to i64
//CHECK-NEXT:        %625 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %626 = "llvm.insertvalue"(%625, %608) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %627 = "llvm.insertvalue"(%626, %624) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %628 = arith.constant 88 : i32
//CHECK-NEXT:        %629 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %628, %629[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%622, %627, %629) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %630 = memref.load %1[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.dealloc %630 : memref<?xf32>
//CHECK-NEXT:      %631 = memref.load %2[] : memref<memref<?xf32>>
//CHECK-NEXT:      memref.dealloc %631 : memref<?xf32>
//CHECK-NEXT:      %632 = memref.load %3[] : memref<memref<?x?x?xi32>>
//CHECK-NEXT:      memref.dealloc %632 : memref<?x?x?xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMallocatables_testPmodify_array_one(%0 : memref<?xf32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = memref.get_global @_QMallocatables_testEglobal_array : memref<memref<?xf32>>
//CHECK-NEXT:      %4 = arith.constant 1 : index
//CHECK-NEXT:      %5 = arith.constant 0 : index
//CHECK-NEXT:      %6 = "memref.dim"(%0, %5) : (memref<?xf32>, index) -> index
//CHECK-NEXT:      %7 = arith.addi %6, %4 : index
//CHECK-NEXT:      %8 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %9 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %10 = arith.extui %9 : i32 to i64
//CHECK-NEXT:      %11 = arith.index_cast %10 : i64 to index
//CHECK-NEXT:      %12 = arith.constant 1 : index
//CHECK-NEXT:      %13 = arith.subi %11, %12 : index
//CHECK-NEXT:      memref.store %8, %0[%13] : memref<?xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMallocatables_testPmodify_array_two(%0 : memref<100xf32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = memref.get_global @_QMallocatables_testEglobal_array : memref<memref<?xf32>>
//CHECK-NEXT:      %4 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %5 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %6 = arith.extui %5 : i32 to i64
//CHECK-NEXT:      %7 = arith.index_cast %6 : i64 to index
//CHECK-NEXT:      %8 = arith.constant 1 : index
//CHECK-NEXT:      %9 = arith.subi %7, %8 : index
//CHECK-NEXT:      memref.store %4, %0[%9] : memref<100xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
