// RUN: xftn %S/../../../../examples/fragments/conditionals.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    func.func @_QPcalc(%0 : memref<i32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "b"}) {
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %5 = arith.constant 100 : i32
//CHECK-NEXT:      %6 = arith.cmpi eq, %4, %5 : i32
//CHECK-NEXT:      scf.if %6 {
//CHECK-NEXT:        %7 = arith.constant 23 : i32
//CHECK-NEXT:        memref.store %7, %2[] : memref<i32>
//CHECK-NEXT:        %8 = arith.constant 2 : i32
//CHECK-NEXT:        memref.store %8, %3[] : memref<i32>
//CHECK-NEXT:      } else {
//CHECK-NEXT:        %9 = arith.constant 82 : i32
//CHECK-NEXT:        memref.store %9, %2[] : memref<i32>
//CHECK-NEXT:        %10 = arith.constant 1 : i32
//CHECK-NEXT:        memref.store %10, %3[] : memref<i32>
//CHECK-NEXT:      }
//CHECK-NEXT:      %11 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %12 = arith.constant 200 : i32
//CHECK-NEXT:      %13 = arith.cmpi eq, %11, %12 : i32
//CHECK-NEXT:      %14 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %15 = arith.constant 23 : i32
//CHECK-NEXT:      %16 = arith.cmpi eq, %14, %15 : i32
//CHECK-NEXT:      %17 = arith.andi %13, %16 : i1
//CHECK-NEXT:      scf.if %17 {
//CHECK-NEXT:        %18 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %19 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %20 = arith.constant 2 : i32
//CHECK-NEXT:          %21 = arith.cmpi eq, %19, %20 : i32
//CHECK-NEXT:          %22 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %23 = arith.cmpi eq, %22, %15 : i32
//CHECK-NEXT:          %24 = arith.andi %21, %23 : i1
//CHECK-NEXT:          %25 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %24, %25[] : memref<i1>
//CHECK-NEXT:          %26 = arith.constant {{.*}} : index
//CHECK-NEXT:          %27 = arith.index_cast %26 : index to i64
//CHECK-NEXT:          %28 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %29 = "llvm.insertvalue"(%28, %18) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %30 = "llvm.insertvalue"(%29, %27) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %31 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %15, %31[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%25, %30, %31) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:      } else {
//CHECK-NEXT:      }
//CHECK-NEXT:      %32 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %33 = arith.constant 99 : i32
//CHECK-NEXT:      %34 = arith.cmpi sgt, %32, %33 : i32
//CHECK-NEXT:      %35 = arith.constant 101 : i32
//CHECK-NEXT:      %36 = arith.cmpi slt, %32, %35 : i32
//CHECK-NEXT:      %37 = arith.andi %34, %36 : i1
//CHECK-NEXT:      scf.if %37 {
//CHECK-NEXT:        %38 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %39 = arith.constant true
//CHECK-NEXT:          %40 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %39, %40[] : memref<i1>
//CHECK-NEXT:          %41 = arith.constant {{.*}} : index
//CHECK-NEXT:          %42 = arith.index_cast %41 : index to i64
//CHECK-NEXT:          %43 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %44 = "llvm.insertvalue"(%43, %38) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %45 = "llvm.insertvalue"(%44, %42) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %46 = arith.constant 27 : i32
//CHECK-NEXT:          %47 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %46, %47[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%40, %45, %47) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:      } else {
//CHECK-NEXT:        %48 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %49 = arith.constant false
//CHECK-NEXT:          %50 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %49, %50[] : memref<i1>
//CHECK-NEXT:          %51 = arith.constant {{.*}} : index
//CHECK-NEXT:          %52 = arith.index_cast %51 : index to i64
//CHECK-NEXT:          %53 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %54 = "llvm.insertvalue"(%53, %48) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %55 = "llvm.insertvalue"(%54, %52) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %56 = arith.constant 29 : i32
//CHECK-NEXT:          %57 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %56, %57[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%50, %55, %57) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:      }
//CHECK-NEXT:      %58 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %59 = arith.cmpi ne, %58, %5 : i32
//CHECK-NEXT:      scf.if %59 {
//CHECK-NEXT:        %60 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %61 = arith.constant false
//CHECK-NEXT:          %62 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %61, %62[] : memref<i1>
//CHECK-NEXT:          %63 = arith.constant {{.*}} : index
//CHECK-NEXT:          %64 = arith.index_cast %63 : index to i64
//CHECK-NEXT:          %65 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %66 = "llvm.insertvalue"(%65, %60) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %67 = "llvm.insertvalue"(%66, %64) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %68 = arith.constant 33 : i32
//CHECK-NEXT:          %69 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %68, %69[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%62, %67, %69) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:      } else {
//CHECK-NEXT:      }
//CHECK-NEXT:      %70 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %71 = arith.cmpi ne, %70, %5 : i32
//CHECK-NEXT:      %72 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %73 = arith.cmpi ne, %72, %12 : i32
//CHECK-NEXT:      %74 = arith.ori %71, %73 : i1
//CHECK-NEXT:      scf.if %74 {
//CHECK-NEXT:        %75 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %76 = arith.constant false
//CHECK-NEXT:          %77 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %76, %77[] : memref<i1>
//CHECK-NEXT:          %78 = arith.constant {{.*}} : index
//CHECK-NEXT:          %79 = arith.index_cast %78 : index to i64
//CHECK-NEXT:          %80 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %81 = "llvm.insertvalue"(%80, %75) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %82 = "llvm.insertvalue"(%81, %79) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %83 = arith.constant 37 : i32
//CHECK-NEXT:          %84 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %83, %84[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%77, %82, %84) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:      } else {
//CHECK-NEXT:      }
//CHECK-NEXT:      %85 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %86 = arith.cmpi eq, %85, %5 : i32
//CHECK-NEXT:      %87 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %88 = arith.cmpi eq, %87, %12 : i32
//CHECK-NEXT:      %89 = arith.ori %86, %88 : i1
//CHECK-NEXT:      scf.if %89 {
//CHECK-NEXT:        %90 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %91 = arith.constant true
//CHECK-NEXT:          %92 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %91, %92[] : memref<i1>
//CHECK-NEXT:          %93 = arith.constant {{.*}} : index
//CHECK-NEXT:          %94 = arith.index_cast %93 : index to i64
//CHECK-NEXT:          %95 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %96 = "llvm.insertvalue"(%95, %90) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %97 = "llvm.insertvalue"(%96, %94) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %98 = arith.constant 41 : i32
//CHECK-NEXT:          %99 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %98, %99[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%92, %97, %99) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:      } else {
//CHECK-NEXT:        %100 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %101 = arith.constant false
//CHECK-NEXT:          %102 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %101, %102[] : memref<i1>
//CHECK-NEXT:          %103 = arith.constant {{.*}} : index
//CHECK-NEXT:          %104 = arith.index_cast %103 : index to i64
//CHECK-NEXT:          %105 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %106 = "llvm.insertvalue"(%105, %100) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %107 = "llvm.insertvalue"(%106, %104) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %108 = arith.constant 43 : i32
//CHECK-NEXT:          %109 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %108, %109[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%102, %107, %109) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:      }
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
