// RUN: xftn %S/../../../../examples/fragments/arrays.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMarrays_testEglobal_array", type = memref<100xf32>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    func.func @_QMarrays_testPcalc() {
//CHECK-NEXT:      %0 = memref.get_global @_QMarrays_testEglobal_array : memref<100xf32>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<100xf32>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<100xf32>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<10x10x10xi32>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %6 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %7 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %8 = arith.constant true
//CHECK-NEXT:        %9 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %8, %9[] : memref<i1>
//CHECK-NEXT:        %10 = arith.constant {{.*}} : index
//CHECK-NEXT:        %11 = arith.index_cast %10 : index to i64
//CHECK-NEXT:        %12 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %13 = "llvm.insertvalue"(%12, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %14 = "llvm.insertvalue"(%13, %11) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %15 = arith.constant 19 : i32
//CHECK-NEXT:        %16 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %15, %16[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%9, %14, %16) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %17 = arith.constant true
//CHECK-NEXT:        %18 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %17, %18[] : memref<i1>
//CHECK-NEXT:        %19 = arith.constant {{.*}} : index
//CHECK-NEXT:        %20 = arith.index_cast %19 : index to i64
//CHECK-NEXT:        %21 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %22 = "llvm.insertvalue"(%21, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %23 = "llvm.insertvalue"(%22, %20) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %24 = arith.constant 20 : i32
//CHECK-NEXT:        %25 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %24, %25[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%18, %23, %25) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %26 = arith.constant true
//CHECK-NEXT:        %27 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %26, %27[] : memref<i1>
//CHECK-NEXT:        %28 = arith.constant {{.*}} : index
//CHECK-NEXT:        %29 = arith.index_cast %28 : index to i64
//CHECK-NEXT:        %30 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %31 = "llvm.insertvalue"(%30, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %32 = "llvm.insertvalue"(%31, %29) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %33 = arith.constant 21 : i32
//CHECK-NEXT:        %34 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %33, %34[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%27, %32, %34) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %35 = arith.constant true
//CHECK-NEXT:        %36 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %35, %36[] : memref<i1>
//CHECK-NEXT:        %37 = arith.constant {{.*}} : index
//CHECK-NEXT:        %38 = arith.index_cast %37 : index to i64
//CHECK-NEXT:        %39 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %40 = "llvm.insertvalue"(%39, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %41 = "llvm.insertvalue"(%40, %38) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %42 = arith.constant 22 : i32
//CHECK-NEXT:        %43 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %42, %43[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%36, %41, %43) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %44 = arith.constant true
//CHECK-NEXT:        %45 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %44, %45[] : memref<i1>
//CHECK-NEXT:        %46 = arith.constant {{.*}} : index
//CHECK-NEXT:        %47 = arith.index_cast %46 : index to i64
//CHECK-NEXT:        %48 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %49 = "llvm.insertvalue"(%48, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %50 = "llvm.insertvalue"(%49, %47) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %51 = arith.constant 25 : i32
//CHECK-NEXT:        %52 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %51, %52[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%45, %50, %52) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %53 = arith.constant true
//CHECK-NEXT:        %54 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %53, %54[] : memref<i1>
//CHECK-NEXT:        %55 = arith.constant {{.*}} : index
//CHECK-NEXT:        %56 = arith.index_cast %55 : index to i64
//CHECK-NEXT:        %57 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %58 = "llvm.insertvalue"(%57, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %59 = "llvm.insertvalue"(%58, %56) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %60 = arith.constant 26 : i32
//CHECK-NEXT:        %61 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %60, %61[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%54, %59, %61) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %62 = arith.constant true
//CHECK-NEXT:        %63 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %62, %63[] : memref<i1>
//CHECK-NEXT:        %64 = arith.constant {{.*}} : index
//CHECK-NEXT:        %65 = arith.index_cast %64 : index to i64
//CHECK-NEXT:        %66 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %67 = "llvm.insertvalue"(%66, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %68 = "llvm.insertvalue"(%67, %65) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %69 = arith.constant 27 : i32
//CHECK-NEXT:        %70 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %69, %70[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%63, %68, %70) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %71 = arith.constant true
//CHECK-NEXT:        %72 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %71, %72[] : memref<i1>
//CHECK-NEXT:        %73 = arith.constant {{.*}} : index
//CHECK-NEXT:        %74 = arith.index_cast %73 : index to i64
//CHECK-NEXT:        %75 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %76 = "llvm.insertvalue"(%75, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %77 = "llvm.insertvalue"(%76, %74) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %78 = arith.constant 28 : i32
//CHECK-NEXT:        %79 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %78, %79[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%72, %77, %79) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %80 = arith.constant true
//CHECK-NEXT:        %81 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %80, %81[] : memref<i1>
//CHECK-NEXT:        %82 = arith.constant {{.*}} : index
//CHECK-NEXT:        %83 = arith.index_cast %82 : index to i64
//CHECK-NEXT:        %84 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %85 = "llvm.insertvalue"(%84, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %86 = "llvm.insertvalue"(%85, %83) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %87 = arith.constant 29 : i32
//CHECK-NEXT:        %88 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %87, %88[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%81, %86, %88) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %89 = arith.constant 1 : i32
//CHECK-NEXT:      %90 = arith.index_cast %89 : i32 to index
//CHECK-NEXT:      %91 = arith.constant 100 : i32
//CHECK-NEXT:      %92 = arith.index_cast %91 : i32 to index
//CHECK-NEXT:      %93 = arith.constant 1 : index
//CHECK-NEXT:      %94 = arith.index_cast %90 : index to i32
//CHECK-NEXT:      %95 = arith.addi %92, %93 : index
//CHECK-NEXT:      %96 = arith.constant 10 : i32
//CHECK-NEXT:      %97 = scf.for %98 = %90 to %95 step %93 iter_args(%99 = %94) -> (i32) {
//CHECK-NEXT:        memref.store %99, %4[] : memref<i32>
//CHECK-NEXT:        %100 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %101 = arith.sitofp %100 : i32 to f32
//CHECK-NEXT:        %102 = arith.extui %100 : i32 to i64
//CHECK-NEXT:        %103 = arith.index_cast %102 : i64 to index
//CHECK-NEXT:        %104 = arith.subi %103, %93 : index
//CHECK-NEXT:        memref.store %101, %1[%104] : memref<100xf32>
//CHECK-NEXT:        %105 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %106 = arith.subi %91, %105 : i32
//CHECK-NEXT:        %107 = arith.sitofp %106 : i32 to f32
//CHECK-NEXT:        %108 = arith.extui %105 : i32 to i64
//CHECK-NEXT:        %109 = arith.index_cast %108 : i64 to index
//CHECK-NEXT:        %110 = arith.subi %109, %93 : index
//CHECK-NEXT:        memref.store %107, %2[%110] : memref<100xf32>
//CHECK-NEXT:        %111 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %112 = arith.muli %111, %96 : i32
//CHECK-NEXT:        %113 = arith.sitofp %112 : i32 to f32
//CHECK-NEXT:        %114 = arith.extui %111 : i32 to i64
//CHECK-NEXT:        %115 = arith.index_cast %114 : i64 to index
//CHECK-NEXT:        %116 = arith.subi %115, %93 : index
//CHECK-NEXT:        memref.store %113, %0[%116] : memref<100xf32>
//CHECK-NEXT:        %117 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %118 = arith.index_cast %93 : index to i32
//CHECK-NEXT:        %119 = arith.addi %117, %118 : i32
//CHECK-NEXT:        scf.yield %119 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %97, %4[] : memref<i32>
//CHECK-NEXT:      %120 = scf.for %121 = %90 to %95 step %93 iter_args(%122 = %94) -> (i32) {
//CHECK-NEXT:        memref.store %122, %4[] : memref<i32>
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %123 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %124 = arith.extui %123 : i32 to i64
//CHECK-NEXT:          %125 = arith.index_cast %124 : i64 to index
//CHECK-NEXT:          %126 = arith.subi %125, %93 : index
//CHECK-NEXT:          %127 = memref.load %1[%126] : memref<100xf32>
//CHECK-NEXT:          %128 = arith.sitofp %123 : i32 to f32
//CHECK-NEXT:          %129 = arith.cmpf oeq, %127, %128 : f32
//CHECK-NEXT:          %130 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %129, %130[] : memref<i1>
//CHECK-NEXT:          %131 = arith.constant {{.*}} : index
//CHECK-NEXT:          %132 = arith.index_cast %131 : index to i64
//CHECK-NEXT:          %133 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %134 = "llvm.insertvalue"(%133, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %135 = "llvm.insertvalue"(%134, %132) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %136 = arith.constant 39 : i32
//CHECK-NEXT:          %137 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %136, %137[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%130, %135, %137) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %138 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %139 = arith.extui %138 : i32 to i64
//CHECK-NEXT:          %140 = arith.index_cast %139 : i64 to index
//CHECK-NEXT:          %141 = arith.subi %140, %93 : index
//CHECK-NEXT:          %142 = memref.load %2[%141] : memref<100xf32>
//CHECK-NEXT:          %143 = arith.subi %91, %138 : i32
//CHECK-NEXT:          %144 = arith.sitofp %143 : i32 to f32
//CHECK-NEXT:          %145 = arith.cmpf oeq, %142, %144 : f32
//CHECK-NEXT:          %146 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %145, %146[] : memref<i1>
//CHECK-NEXT:          %147 = arith.constant {{.*}} : index
//CHECK-NEXT:          %148 = arith.index_cast %147 : index to i64
//CHECK-NEXT:          %149 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %150 = "llvm.insertvalue"(%149, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %151 = "llvm.insertvalue"(%150, %148) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %152 = arith.constant 40 : i32
//CHECK-NEXT:          %153 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %152, %153[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%146, %151, %153) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %154 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %155 = arith.extui %154 : i32 to i64
//CHECK-NEXT:          %156 = arith.index_cast %155 : i64 to index
//CHECK-NEXT:          %157 = arith.subi %156, %93 : index
//CHECK-NEXT:          %158 = memref.load %0[%157] : memref<100xf32>
//CHECK-NEXT:          %159 = arith.muli %154, %96 : i32
//CHECK-NEXT:          %160 = arith.sitofp %159 : i32 to f32
//CHECK-NEXT:          %161 = arith.cmpf oeq, %158, %160 : f32
//CHECK-NEXT:          %162 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %161, %162[] : memref<i1>
//CHECK-NEXT:          %163 = arith.constant {{.*}} : index
//CHECK-NEXT:          %164 = arith.index_cast %163 : index to i64
//CHECK-NEXT:          %165 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %166 = "llvm.insertvalue"(%165, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %167 = "llvm.insertvalue"(%166, %164) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %168 = arith.constant 41 : i32
//CHECK-NEXT:          %169 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %168, %169[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%162, %167, %169) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %170 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %171 = arith.index_cast %93 : index to i32
//CHECK-NEXT:        %172 = arith.addi %170, %171 : i32
//CHECK-NEXT:        scf.yield %172 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %120, %4[] : memref<i32>
//CHECK-NEXT:      %173 = arith.constant 3.450000e+01 : f32
//CHECK-NEXT:      %174 = arith.constant 19 : index
//CHECK-NEXT:      memref.store %173, %1[%174] : memref<100xf32>
//CHECK-NEXT:      %175 = arith.constant 1.652000e+02 : f32
//CHECK-NEXT:      %176 = arith.constant 49 : index
//CHECK-NEXT:      memref.store %175, %2[%176] : memref<100xf32>
//CHECK-NEXT:      %177 = arith.constant 2.310000e+01 : f32
//CHECK-NEXT:      %178 = arith.constant 69 : index
//CHECK-NEXT:      memref.store %177, %0[%178] : memref<100xf32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %179 = memref.load %1[%174] : memref<100xf32>
//CHECK-NEXT:        %180 = arith.cmpf oeq, %179, %173 : f32
//CHECK-NEXT:        %181 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %180, %181[] : memref<i1>
//CHECK-NEXT:        %182 = arith.constant {{.*}} : index
//CHECK-NEXT:        %183 = arith.index_cast %182 : index to i64
//CHECK-NEXT:        %184 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %185 = "llvm.insertvalue"(%184, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %186 = "llvm.insertvalue"(%185, %183) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %187 = arith.constant 48 : i32
//CHECK-NEXT:        %188 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %187, %188[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%181, %186, %188) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %189 = memref.load %2[%176] : memref<100xf32>
//CHECK-NEXT:        %190 = arith.cmpf oeq, %189, %175 : f32
//CHECK-NEXT:        %191 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %190, %191[] : memref<i1>
//CHECK-NEXT:        %192 = arith.constant {{.*}} : index
//CHECK-NEXT:        %193 = arith.index_cast %192 : index to i64
//CHECK-NEXT:        %194 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %195 = "llvm.insertvalue"(%194, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %196 = "llvm.insertvalue"(%195, %193) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %197 = arith.constant 49 : i32
//CHECK-NEXT:        %198 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %197, %198[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%191, %196, %198) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %199 = memref.load %0[%178] : memref<100xf32>
//CHECK-NEXT:        %200 = arith.cmpf oeq, %199, %177 : f32
//CHECK-NEXT:        %201 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %200, %201[] : memref<i1>
//CHECK-NEXT:        %202 = arith.constant {{.*}} : index
//CHECK-NEXT:        %203 = arith.index_cast %202 : index to i64
//CHECK-NEXT:        %204 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %205 = "llvm.insertvalue"(%204, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %206 = "llvm.insertvalue"(%205, %203) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %207 = arith.constant 50 : i32
//CHECK-NEXT:        %208 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %207, %208[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%201, %206, %208) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %209 = arith.constant 20 : i32
//CHECK-NEXT:        %210 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %209, %210[] : memref<i32>
//CHECK-NEXT:        %211 = arith.constant 2.000000e+01 : f32
//CHECK-NEXT:        %212 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %211, %212[] : memref<f32>
//CHECK-NEXT:        func.call @_QMarrays_testPmodify_array_one(%1, %210, %212) : (memref<100xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %213 = "memref.cast"(%2) : (memref<100xf32>) -> memref<?xf32>
//CHECK-NEXT:        %214 = arith.constant 50 : i32
//CHECK-NEXT:        %215 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %214, %215[] : memref<i32>
//CHECK-NEXT:        %216 = arith.constant 5.000000e+01 : f32
//CHECK-NEXT:        %217 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %216, %217[] : memref<f32>
//CHECK-NEXT:        func.call @_QMarrays_testPmodify_array_two(%213, %215, %217) : (memref<?xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %218 = "memref.cast"(%0) : (memref<100xf32>) -> memref<?xf32>
//CHECK-NEXT:        %219 = arith.constant 70 : i32
//CHECK-NEXT:        %220 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %219, %220[] : memref<i32>
//CHECK-NEXT:        %221 = arith.constant 7.000000e+02 : f32
//CHECK-NEXT:        %222 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %221, %222[] : memref<f32>
//CHECK-NEXT:        func.call @_QMarrays_testPmodify_array_two(%218, %220, %222) : (memref<?xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %223 = scf.for %224 = %90 to %95 step %93 iter_args(%225 = %94) -> (i32) {
//CHECK-NEXT:        memref.store %225, %4[] : memref<i32>
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %226 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %227 = arith.extui %226 : i32 to i64
//CHECK-NEXT:          %228 = arith.index_cast %227 : i64 to index
//CHECK-NEXT:          %229 = arith.subi %228, %93 : index
//CHECK-NEXT:          %230 = memref.load %1[%229] : memref<100xf32>
//CHECK-NEXT:          %231 = arith.sitofp %226 : i32 to f32
//CHECK-NEXT:          %232 = arith.cmpf oeq, %230, %231 : f32
//CHECK-NEXT:          %233 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %232, %233[] : memref<i1>
//CHECK-NEXT:          %234 = arith.constant {{.*}} : index
//CHECK-NEXT:          %235 = arith.index_cast %234 : index to i64
//CHECK-NEXT:          %236 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %237 = "llvm.insertvalue"(%236, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %238 = "llvm.insertvalue"(%237, %235) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %239 = arith.constant 58 : i32
//CHECK-NEXT:          %240 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %239, %240[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%233, %238, %240) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %241 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %242 = arith.extui %241 : i32 to i64
//CHECK-NEXT:          %243 = arith.index_cast %242 : i64 to index
//CHECK-NEXT:          %244 = arith.subi %243, %93 : index
//CHECK-NEXT:          %245 = memref.load %2[%244] : memref<100xf32>
//CHECK-NEXT:          %246 = arith.subi %91, %241 : i32
//CHECK-NEXT:          %247 = arith.sitofp %246 : i32 to f32
//CHECK-NEXT:          %248 = arith.cmpf oeq, %245, %247 : f32
//CHECK-NEXT:          %249 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %248, %249[] : memref<i1>
//CHECK-NEXT:          %250 = arith.constant {{.*}} : index
//CHECK-NEXT:          %251 = arith.index_cast %250 : index to i64
//CHECK-NEXT:          %252 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %253 = "llvm.insertvalue"(%252, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %254 = "llvm.insertvalue"(%253, %251) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %255 = arith.constant 59 : i32
//CHECK-NEXT:          %256 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %255, %256[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%249, %254, %256) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %257 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %258 = arith.extui %257 : i32 to i64
//CHECK-NEXT:          %259 = arith.index_cast %258 : i64 to index
//CHECK-NEXT:          %260 = arith.subi %259, %93 : index
//CHECK-NEXT:          %261 = memref.load %0[%260] : memref<100xf32>
//CHECK-NEXT:          %262 = arith.muli %257, %96 : i32
//CHECK-NEXT:          %263 = arith.sitofp %262 : i32 to f32
//CHECK-NEXT:          %264 = arith.cmpf oeq, %261, %263 : f32
//CHECK-NEXT:          %265 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %264, %265[] : memref<i1>
//CHECK-NEXT:          %266 = arith.constant {{.*}} : index
//CHECK-NEXT:          %267 = arith.index_cast %266 : index to i64
//CHECK-NEXT:          %268 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %269 = "llvm.insertvalue"(%268, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %270 = "llvm.insertvalue"(%269, %267) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %271 = arith.constant 60 : i32
//CHECK-NEXT:          %272 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %271, %272[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%265, %270, %272) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %273 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %274 = arith.index_cast %93 : index to i32
//CHECK-NEXT:        %275 = arith.addi %273, %274 : i32
//CHECK-NEXT:        scf.yield %275 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %223, %4[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %276 = arith.constant 60 : i32
//CHECK-NEXT:        %277 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %276, %277[] : memref<i32>
//CHECK-NEXT:        %278 = arith.constant 1.234000e+02 : f32
//CHECK-NEXT:        %279 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:        memref.store %278, %279[] : memref<f32>
//CHECK-NEXT:        func.call @_QMarrays_testPmodify_array_one(%0, %277, %279) : (memref<100xf32>, memref<i32>, memref<f32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %280 = arith.constant 59 : index
//CHECK-NEXT:        %281 = memref.load %0[%280] : memref<100xf32>
//CHECK-NEXT:        %282 = arith.constant 1.234000e+02 : f32
//CHECK-NEXT:        %283 = arith.cmpf oeq, %281, %282 : f32
//CHECK-NEXT:        %284 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %283, %284[] : memref<i1>
//CHECK-NEXT:        %285 = arith.constant {{.*}} : index
//CHECK-NEXT:        %286 = arith.index_cast %285 : index to i64
//CHECK-NEXT:        %287 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %288 = "llvm.insertvalue"(%287, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %289 = "llvm.insertvalue"(%288, %286) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %290 = arith.constant 64 : i32
//CHECK-NEXT:        %291 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %290, %291[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%284, %289, %291) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %292 = arith.index_cast %96 : i32 to index
//CHECK-NEXT:      %293 = arith.addi %292, %93 : index
//CHECK-NEXT:      %294 = scf.for %295 = %90 to %293 step %93 iter_args(%296 = %94) -> (i32) {
//CHECK-NEXT:        memref.store %296, %4[] : memref<i32>
//CHECK-NEXT:        %297 = scf.for %298 = %90 to %293 step %93 iter_args(%299 = %94) -> (i32) {
//CHECK-NEXT:          memref.store %299, %5[] : memref<i32>
//CHECK-NEXT:          %300 = scf.for %301 = %90 to %293 step %93 iter_args(%302 = %94) -> (i32) {
//CHECK-NEXT:            memref.store %302, %6[] : memref<i32>
//CHECK-NEXT:            %303 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %304 = memref.load %5[] : memref<i32>
//CHECK-NEXT:            %305 = arith.muli %304, %96 : i32
//CHECK-NEXT:            %306 = arith.addi %303, %305 : i32
//CHECK-NEXT:            %307 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %308 = arith.muli %307, %91 : i32
//CHECK-NEXT:            %309 = arith.addi %306, %308 : i32
//CHECK-NEXT:            %310 = arith.extui %303 : i32 to i64
//CHECK-NEXT:            %311 = arith.index_cast %310 : i64 to index
//CHECK-NEXT:            %312 = arith.subi %311, %93 : index
//CHECK-NEXT:            %313 = arith.extui %304 : i32 to i64
//CHECK-NEXT:            %314 = arith.index_cast %313 : i64 to index
//CHECK-NEXT:            %315 = arith.subi %314, %93 : index
//CHECK-NEXT:            %316 = arith.extui %307 : i32 to i64
//CHECK-NEXT:            %317 = arith.index_cast %316 : i64 to index
//CHECK-NEXT:            %318 = arith.subi %317, %93 : index
//CHECK-NEXT:            memref.store %309, %3[%318, %315, %312] : memref<10x10x10xi32>
//CHECK-NEXT:            %319 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %320 = arith.index_cast %93 : index to i32
//CHECK-NEXT:            %321 = arith.addi %319, %320 : i32
//CHECK-NEXT:            scf.yield %321 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %300, %6[] : memref<i32>
//CHECK-NEXT:          %322 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %323 = arith.index_cast %93 : index to i32
//CHECK-NEXT:          %324 = arith.addi %322, %323 : i32
//CHECK-NEXT:          scf.yield %324 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %297, %5[] : memref<i32>
//CHECK-NEXT:        %325 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %326 = arith.index_cast %93 : index to i32
//CHECK-NEXT:        %327 = arith.addi %325, %326 : i32
//CHECK-NEXT:        scf.yield %327 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %294, %4[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %328 = arith.constant 2 : index
//CHECK-NEXT:        %329 = arith.constant 3 : index
//CHECK-NEXT:        %330 = arith.constant 4 : index
//CHECK-NEXT:        %331 = memref.load %3[%330, %329, %328] : memref<10x10x10xi32>
//CHECK-NEXT:        %332 = arith.constant 543 : i32
//CHECK-NEXT:        %333 = arith.cmpi eq, %331, %332 : i32
//CHECK-NEXT:        %334 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %333, %334[] : memref<i1>
//CHECK-NEXT:        %335 = arith.constant {{.*}} : index
//CHECK-NEXT:        %336 = arith.index_cast %335 : index to i64
//CHECK-NEXT:        %337 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %338 = "llvm.insertvalue"(%337, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %339 = "llvm.insertvalue"(%338, %336) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %340 = arith.constant 74 : i32
//CHECK-NEXT:        %341 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %340, %341[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%334, %339, %341) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %342 = arith.constant 7 : index
//CHECK-NEXT:        %343 = arith.constant 8 : index
//CHECK-NEXT:        %344 = arith.constant 0 : index
//CHECK-NEXT:        %345 = memref.load %3[%344, %343, %342] : memref<10x10x10xi32>
//CHECK-NEXT:        %346 = arith.constant 198 : i32
//CHECK-NEXT:        %347 = arith.cmpi eq, %345, %346 : i32
//CHECK-NEXT:        %348 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %347, %348[] : memref<i1>
//CHECK-NEXT:        %349 = arith.constant {{.*}} : index
//CHECK-NEXT:        %350 = arith.index_cast %349 : index to i64
//CHECK-NEXT:        %351 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %352 = "llvm.insertvalue"(%351, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %353 = "llvm.insertvalue"(%352, %350) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %354 = arith.constant 75 : i32
//CHECK-NEXT:        %355 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %354, %355[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%348, %353, %355) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %356 = "memref.cast"(%3) : (memref<10x10x10xi32>) -> memref<?x?x?xi32>
//CHECK-NEXT:        %357 = arith.constant 2 : i32
//CHECK-NEXT:        %358 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %357, %358[] : memref<i32>
//CHECK-NEXT:        %359 = arith.constant 3 : i32
//CHECK-NEXT:        %360 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %359, %360[] : memref<i32>
//CHECK-NEXT:        %361 = arith.constant 4 : i32
//CHECK-NEXT:        %362 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %361, %362[] : memref<i32>
//CHECK-NEXT:        %363 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %91, %363[] : memref<i32>
//CHECK-NEXT:        func.call @_QMarrays_testPmodify_3darray_one(%356, %358, %360, %362, %363) : (memref<?x?x?xi32>, memref<i32>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %364 = arith.constant 2 : index
//CHECK-NEXT:        %365 = arith.constant 3 : index
//CHECK-NEXT:        %366 = memref.load %3[%365, %364, %93] : memref<10x10x10xi32>
//CHECK-NEXT:        %367 = arith.cmpi eq, %366, %91 : i32
//CHECK-NEXT:        %368 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %367, %368[] : memref<i1>
//CHECK-NEXT:        %369 = arith.constant {{.*}} : index
//CHECK-NEXT:        %370 = arith.index_cast %369 : index to i64
//CHECK-NEXT:        %371 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %372 = "llvm.insertvalue"(%371, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %373 = "llvm.insertvalue"(%372, %370) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %374 = arith.constant 78 : i32
//CHECK-NEXT:        %375 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %374, %375[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%368, %373, %375) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %376 = arith.constant 6 : i32
//CHECK-NEXT:        %377 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %376, %377[] : memref<i32>
//CHECK-NEXT:        %378 = arith.constant 7 : i32
//CHECK-NEXT:        %379 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %378, %379[] : memref<i32>
//CHECK-NEXT:        %380 = arith.constant 8 : i32
//CHECK-NEXT:        %381 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %380, %381[] : memref<i32>
//CHECK-NEXT:        %382 = arith.constant 200 : i32
//CHECK-NEXT:        %383 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %382, %383[] : memref<i32>
//CHECK-NEXT:        func.call @_QMarrays_testPmodify_3darray_two(%3, %377, %379, %381, %383) : (memref<10x10x10xi32>, memref<i32>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %384 = arith.constant 5 : index
//CHECK-NEXT:        %385 = arith.constant 6 : index
//CHECK-NEXT:        %386 = arith.constant 7 : index
//CHECK-NEXT:        %387 = memref.load %3[%386, %385, %384] : memref<10x10x10xi32>
//CHECK-NEXT:        %388 = arith.constant 200 : i32
//CHECK-NEXT:        %389 = arith.cmpi eq, %387, %388 : i32
//CHECK-NEXT:        %390 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %389, %390[] : memref<i1>
//CHECK-NEXT:        %391 = arith.constant {{.*}} : index
//CHECK-NEXT:        %392 = arith.index_cast %391 : index to i64
//CHECK-NEXT:        %393 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %394 = "llvm.insertvalue"(%393, %7) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %395 = "llvm.insertvalue"(%394, %392) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %396 = arith.constant 80 : i32
//CHECK-NEXT:        %397 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %396, %397[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%390, %395, %397) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMarrays_testPmodify_array_one(%0 : memref<100xf32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %4 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %5 = arith.extui %4 : i32 to i64
//CHECK-NEXT:      %6 = arith.index_cast %5 : i64 to index
//CHECK-NEXT:      %7 = arith.constant 1 : index
//CHECK-NEXT:      %8 = arith.subi %6, %7 : index
//CHECK-NEXT:      memref.store %3, %0[%8] : memref<100xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMarrays_testPmodify_array_two(%0 : memref<?xf32> {fir.bindc_name = "a"}, %1 : memref<i32> {fir.bindc_name = "idx"}, %2 : memref<f32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %3 = memref.load %2[] : memref<f32>
//CHECK-NEXT:      %4 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %5 = arith.extui %4 : i32 to i64
//CHECK-NEXT:      %6 = arith.index_cast %5 : i64 to index
//CHECK-NEXT:      %7 = arith.constant 1 : index
//CHECK-NEXT:      %8 = arith.subi %6, %7 : index
//CHECK-NEXT:      memref.store %3, %0[%8] : memref<?xf32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMarrays_testPmodify_3darray_one(%0 : memref<?x?x?xi32> {fir.bindc_name = "array"}, %1 : memref<i32> {fir.bindc_name = "k"}, %2 : memref<i32> {fir.bindc_name = "j"}, %3 : memref<i32> {fir.bindc_name = "i"}, %4 : memref<i32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %5 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %6 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %7 = arith.extui %6 : i32 to i64
//CHECK-NEXT:      %8 = arith.index_cast %7 : i64 to index
//CHECK-NEXT:      %9 = arith.constant 1 : index
//CHECK-NEXT:      %10 = arith.subi %8, %9 : index
//CHECK-NEXT:      %11 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %12 = arith.extui %11 : i32 to i64
//CHECK-NEXT:      %13 = arith.index_cast %12 : i64 to index
//CHECK-NEXT:      %14 = arith.subi %13, %9 : index
//CHECK-NEXT:      %15 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %16 = arith.extui %15 : i32 to i64
//CHECK-NEXT:      %17 = arith.index_cast %16 : i64 to index
//CHECK-NEXT:      %18 = arith.subi %17, %9 : index
//CHECK-NEXT:      memref.store %5, %0[%18, %14, %10] : memref<?x?x?xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMarrays_testPmodify_3darray_two(%0 : memref<10x10x10xi32> {fir.bindc_name = "array"}, %1 : memref<i32> {fir.bindc_name = "k"}, %2 : memref<i32> {fir.bindc_name = "j"}, %3 : memref<i32> {fir.bindc_name = "i"}, %4 : memref<i32> {fir.bindc_name = "value"}) {
//CHECK-NEXT:      %5 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %6 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %7 = arith.extui %6 : i32 to i64
//CHECK-NEXT:      %8 = arith.index_cast %7 : i64 to index
//CHECK-NEXT:      %9 = arith.constant 1 : index
//CHECK-NEXT:      %10 = arith.subi %8, %9 : index
//CHECK-NEXT:      %11 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %12 = arith.extui %11 : i32 to i64
//CHECK-NEXT:      %13 = arith.index_cast %12 : i64 to index
//CHECK-NEXT:      %14 = arith.subi %13, %9 : index
//CHECK-NEXT:      %15 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %16 = arith.extui %15 : i32 to i64
//CHECK-NEXT:      %17 = arith.index_cast %16 : i64 to index
//CHECK-NEXT:      %18 = arith.subi %17, %9 : index
//CHECK-NEXT:      memref.store %5, %0[%18, %14, %10] : memref<10x10x10xi32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
