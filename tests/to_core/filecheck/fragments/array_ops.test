// RUN: xftn %S/../../../../examples/fragments/array_ops.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    "memref.global"() <{sym_name = "_QMarray_ops_testEglobal_array", type = memref<6x10xf32>, initial_value, sym_visibility = "private"}> : () -> ()
//CHECK-NEXT:    func.func @_QMarray_ops_testPcalc(%0 : memref<i32> {fir.bindc_name = "j"}) {
//CHECK-NEXT:      %1 = memref.get_global @_QMarray_ops_testEglobal_array : memref<6x10xf32>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<100xf32>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<100xf32>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<100xf32>
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %6 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?xf32>>
//CHECK-NEXT:      %8 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?xf32>>
//CHECK-NEXT:      %9 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<6x10xf32>
//CHECK-NEXT:      %10 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<6x10xf32>
//CHECK-NEXT:      %11 = arith.constant 10 : index
//CHECK-NEXT:      %12 = arith.constant 6 : index
//CHECK-NEXT:      %13 = memref.alloc(%12, %11) : memref<?x?xf32>
//CHECK-NEXT:      memref.store %13, %8[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %14 = memref.alloc(%12, %11) : memref<?x?xf32>
//CHECK-NEXT:      memref.store %14, %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %15 = arith.constant 100 : index
//CHECK-NEXT:      %16 = memref.alloc() : memref<100xf32>
//CHECK-NEXT:      %17 = arith.constant 0 : index
//CHECK-NEXT:      %18 = arith.constant 1 : index
//CHECK-NEXT:      %19 = arith.constant 1 : i64
//CHECK-NEXT:      scf.for %20 = %17 to %15 step %18 {
//CHECK-NEXT:        %21 = arith.addi %20, %18 : index
//CHECK-NEXT:        %22 = arith.index_cast %19 : i64 to index
//CHECK-NEXT:        %23 = arith.subi %21, %18 : index
//CHECK-NEXT:        %24 = arith.muli %23, %22 : index
//CHECK-NEXT:        %25 = arith.addi %22, %24 : index
//CHECK-NEXT:        %26 = arith.index_cast %25 : index to i64
//CHECK-NEXT:        %27 = arith.trunci %26 : i64 to i32
//CHECK-NEXT:        %28 = memref.load %0[] : memref<i32>
//CHECK-NEXT:        %29 = arith.addi %27, %28 : i32
//CHECK-NEXT:        %30 = arith.sitofp %29 : i32 to f32
//CHECK-NEXT:        memref.store %30, %16[%20] : memref<100xf32>
//CHECK-NEXT:      }
//CHECK-NEXT:      "memref.copy"(%16, %2) : (memref<100xf32>, memref<100xf32>) -> ()
//CHECK-NEXT:      memref.dealloc %16 : memref<100xf32>
//CHECK-NEXT:      %31 = arith.constant 2.000000e+01 : f32
//CHECK-NEXT:      %32 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:      memref.store %31, %32[] : memref<f32>
//CHECK-NEXT:      linalg.broadcast ins(%32:memref<f32>) outs(%3:memref<100xf32>) dimensions = [0]
//CHECK-NEXT:      %33 = memref.alloc() : memref<100xf32>
//CHECK-NEXT:      scf.for %34 = %17 to %15 step %18 {
//CHECK-NEXT:        %35 = arith.addi %34, %18 : index
//CHECK-NEXT:        %36 = arith.subi %35, %18 : index
//CHECK-NEXT:        %37 = memref.load %2[%36] : memref<100xf32>
//CHECK-NEXT:        %38 = memref.load %3[%36] : memref<100xf32>
//CHECK-NEXT:        %39 = arith.addf %37, %38 fastmath<contract> : f32
//CHECK-NEXT:        memref.store %39, %33[%34] : memref<100xf32>
//CHECK-NEXT:      }
//CHECK-NEXT:      "memref.copy"(%33, %4) : (memref<100xf32>, memref<100xf32>) -> ()
//CHECK-NEXT:      memref.dealloc %33 : memref<100xf32>
//CHECK-NEXT:      %40 = arith.constant 1 : i32
//CHECK-NEXT:      %41 = arith.index_cast %40 : i32 to index
//CHECK-NEXT:      %42 = arith.constant 100 : i32
//CHECK-NEXT:      %43 = arith.index_cast %42 : i32 to index
//CHECK-NEXT:      %44 = arith.index_cast %41 : index to i32
//CHECK-NEXT:      %45 = arith.addi %43, %18 : index
//CHECK-NEXT:      %46 = scf.for %47 = %41 to %45 step %18 iter_args(%48 = %44) -> (i32) {
//CHECK-NEXT:        memref.store %48, %5[] : memref<i32>
//CHECK-NEXT:        %49 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %50 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %51 = arith.extui %50 : i32 to i64
//CHECK-NEXT:          %52 = arith.index_cast %51 : i64 to index
//CHECK-NEXT:          %53 = arith.subi %52, %18 : index
//CHECK-NEXT:          %54 = memref.load %2[%53] : memref<100xf32>
//CHECK-NEXT:          %55 = memref.load %0[] : memref<i32>
//CHECK-NEXT:          %56 = arith.addi %50, %55 : i32
//CHECK-NEXT:          %57 = arith.sitofp %56 : i32 to f32
//CHECK-NEXT:          %58 = arith.cmpf oeq, %54, %57 : f32
//CHECK-NEXT:          %59 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %58, %59[] : memref<i1>
//CHECK-NEXT:          %60 = arith.constant {{.*}} : index
//CHECK-NEXT:          %61 = arith.index_cast %60 : index to i64
//CHECK-NEXT:          %62 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %63 = "llvm.insertvalue"(%62, %49) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %64 = "llvm.insertvalue"(%63, %61) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %65 = arith.constant 28 : i32
//CHECK-NEXT:          %66 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %65, %66[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%59, %64, %66) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %67 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %68 = arith.extui %67 : i32 to i64
//CHECK-NEXT:          %69 = arith.index_cast %68 : i64 to index
//CHECK-NEXT:          %70 = arith.subi %69, %18 : index
//CHECK-NEXT:          %71 = memref.load %3[%70] : memref<100xf32>
//CHECK-NEXT:          %72 = arith.cmpf oeq, %71, %31 : f32
//CHECK-NEXT:          %73 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %72, %73[] : memref<i1>
//CHECK-NEXT:          %74 = arith.constant {{.*}} : index
//CHECK-NEXT:          %75 = arith.index_cast %74 : index to i64
//CHECK-NEXT:          %76 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %77 = "llvm.insertvalue"(%76, %49) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %78 = "llvm.insertvalue"(%77, %75) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %79 = arith.constant 29 : i32
//CHECK-NEXT:          %80 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %79, %80[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%73, %78, %80) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %81 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %82 = arith.extui %81 : i32 to i64
//CHECK-NEXT:          %83 = arith.index_cast %82 : i64 to index
//CHECK-NEXT:          %84 = arith.subi %83, %18 : index
//CHECK-NEXT:          %85 = memref.load %4[%84] : memref<100xf32>
//CHECK-NEXT:          %86 = memref.load %2[%84] : memref<100xf32>
//CHECK-NEXT:          %87 = memref.load %3[%84] : memref<100xf32>
//CHECK-NEXT:          %88 = arith.addf %86, %87 fastmath<contract> : f32
//CHECK-NEXT:          %89 = arith.cmpf oeq, %85, %88 : f32
//CHECK-NEXT:          %90 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %89, %90[] : memref<i1>
//CHECK-NEXT:          %91 = arith.constant {{.*}} : index
//CHECK-NEXT:          %92 = arith.index_cast %91 : index to i64
//CHECK-NEXT:          %93 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %94 = "llvm.insertvalue"(%93, %49) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %95 = "llvm.insertvalue"(%94, %92) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %96 = arith.constant 30 : i32
//CHECK-NEXT:          %97 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %96, %97[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%90, %95, %97) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %98 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %99 = arith.index_cast %18 : index to i32
//CHECK-NEXT:        %100 = arith.addi %98, %99 : i32
//CHECK-NEXT:        scf.yield %100 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %46, %5[] : memref<i32>
//CHECK-NEXT:      %101 = memref.alloc() : memref<100xf32>
//CHECK-NEXT:      scf.for %102 = %17 to %15 step %18 {
//CHECK-NEXT:        %103 = arith.addi %102, %18 : index
//CHECK-NEXT:        %104 = arith.subi %103, %18 : index
//CHECK-NEXT:        %105 = memref.load %2[%104] : memref<100xf32>
//CHECK-NEXT:        %106 = memref.load %3[%104] : memref<100xf32>
//CHECK-NEXT:        %107 = arith.addf %105, %106 fastmath<contract> : f32
//CHECK-NEXT:        memref.store %107, %101[%102] : memref<100xf32>
//CHECK-NEXT:      }
//CHECK-NEXT:      %108 = memref.alloc() : memref<100xf32>
//CHECK-NEXT:      %109 = arith.constant 1.000000e+02 : f32
//CHECK-NEXT:      scf.for %110 = %17 to %15 step %18 {
//CHECK-NEXT:        %111 = memref.load %101[%110] : memref<100xf32>
//CHECK-NEXT:        %112 = arith.addf %111, %109 fastmath<contract> : f32
//CHECK-NEXT:        memref.store %112, %108[%110] : memref<100xf32>
//CHECK-NEXT:      }
//CHECK-NEXT:      "memref.copy"(%108, %4) : (memref<100xf32>, memref<100xf32>) -> ()
//CHECK-NEXT:      memref.dealloc %108 : memref<100xf32>
//CHECK-NEXT:      memref.dealloc %101 : memref<100xf32>
//CHECK-NEXT:      %113 = scf.for %114 = %41 to %45 step %18 iter_args(%115 = %44) -> (i32) {
//CHECK-NEXT:        memref.store %115, %5[] : memref<i32>
//CHECK-NEXT:        %116 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        "memref.alloca_scope"() ({
//CHECK-NEXT:          %117 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %118 = arith.extui %117 : i32 to i64
//CHECK-NEXT:          %119 = arith.index_cast %118 : i64 to index
//CHECK-NEXT:          %120 = arith.subi %119, %18 : index
//CHECK-NEXT:          %121 = memref.load %4[%120] : memref<100xf32>
//CHECK-NEXT:          %122 = memref.load %2[%120] : memref<100xf32>
//CHECK-NEXT:          %123 = memref.load %3[%120] : memref<100xf32>
//CHECK-NEXT:          %124 = arith.addf %122, %123 fastmath<contract> : f32
//CHECK-NEXT:          %125 = arith.addf %124, %109 fastmath<contract> : f32
//CHECK-NEXT:          %126 = arith.cmpf oeq, %121, %125 : f32
//CHECK-NEXT:          %127 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:          memref.store %126, %127[] : memref<i1>
//CHECK-NEXT:          %128 = arith.constant {{.*}} : index
//CHECK-NEXT:          %129 = arith.index_cast %128 : index to i64
//CHECK-NEXT:          %130 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %131 = "llvm.insertvalue"(%130, %116) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %132 = "llvm.insertvalue"(%131, %129) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:          %133 = arith.constant 36 : i32
//CHECK-NEXT:          %134 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:          memref.store %133, %134[] : memref<i32>
//CHECK-NEXT:          func.call @_QPassert(%127, %132, %134) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:          "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:        }) : () -> ()
//CHECK-NEXT:        %135 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %136 = arith.index_cast %18 : index to i32
//CHECK-NEXT:        %137 = arith.addi %135, %136 : i32
//CHECK-NEXT:        scf.yield %137 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %113, %5[] : memref<i32>
//CHECK-NEXT:      %138 = memref.load %8[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %139 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:      memref.store %109, %139[] : memref<f32>
//CHECK-NEXT:      linalg.broadcast ins(%139:memref<f32>) outs(%138:memref<?x?xf32>) dimensions = [0, 1]
//CHECK-NEXT:      %140 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f32>
//CHECK-NEXT:      memref.store %109, %140[] : memref<f32>
//CHECK-NEXT:      linalg.broadcast ins(%140:memref<f32>) outs(%9:memref<6x10xf32>) dimensions = [0, 1]
//CHECK-NEXT:      %141 = memref.load %8[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %142 = "memref.rank"(%141) : (memref<?x?xf32>) -> index
//CHECK-NEXT:      %143 = arith.subi %142, %18 : index
//CHECK-NEXT:      %144 = "memref.dim"(%141, %143) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %145 = arith.subi %143, %18 : index
//CHECK-NEXT:      %146 = "memref.dim"(%141, %145) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %147 = memref.alloc(%146, %144) : memref<?x?xf32>
//CHECK-NEXT:      scf.for %148 = %17 to %146 step %18 {
//CHECK-NEXT:        %149 = arith.addi %148, %18 : index
//CHECK-NEXT:        scf.for %150 = %17 to %144 step %18 {
//CHECK-NEXT:          %151 = arith.addi %150, %18 : index
//CHECK-NEXT:          %152 = arith.subi %149, %18 : index
//CHECK-NEXT:          %153 = arith.subi %151, %18 : index
//CHECK-NEXT:          %154 = memref.load %8[] : memref<memref<?x?xf32>>
//CHECK-NEXT:          %155 = memref.load %154[%152, %153] : memref<?x?xf32>
//CHECK-NEXT:          %156 = memref.load %9[%152, %153] : memref<6x10xf32>
//CHECK-NEXT:          %157 = arith.subf %155, %156 fastmath<contract> : f32
//CHECK-NEXT:          memref.store %157, %147[%148, %150] : memref<?x?xf32>
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      %158 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      "memref.copy"(%147, %158) : (memref<?x?xf32>, memref<?x?xf32>) -> ()
//CHECK-NEXT:      memref.dealloc %147 : memref<?x?xf32>
//CHECK-NEXT:      %159 = arith.constant 10 : i32
//CHECK-NEXT:      %160 = arith.index_cast %159 : i32 to index
//CHECK-NEXT:      %161 = arith.addi %160, %18 : index
//CHECK-NEXT:      %162 = arith.constant 6 : i32
//CHECK-NEXT:      %163 = scf.for %164 = %41 to %161 step %18 iter_args(%165 = %44) -> (i32) {
//CHECK-NEXT:        memref.store %165, %5[] : memref<i32>
//CHECK-NEXT:        %166 = arith.index_cast %162 : i32 to index
//CHECK-NEXT:        %167 = arith.addi %166, %18 : index
//CHECK-NEXT:        %168 = scf.for %169 = %41 to %167 step %18 iter_args(%170 = %44) -> (i32) {
//CHECK-NEXT:          memref.store %170, %6[] : memref<i32>
//CHECK-NEXT:          %171 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %172 = memref.load %5[] : memref<i32>
//CHECK-NEXT:            %173 = arith.extui %172 : i32 to i64
//CHECK-NEXT:            %174 = arith.index_cast %173 : i64 to index
//CHECK-NEXT:            %175 = arith.subi %174, %18 : index
//CHECK-NEXT:            %176 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %177 = arith.extui %176 : i32 to i64
//CHECK-NEXT:            %178 = arith.index_cast %177 : i64 to index
//CHECK-NEXT:            %179 = arith.subi %178, %18 : index
//CHECK-NEXT:            %180 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:            %181 = memref.load %180[%179, %175] : memref<?x?xf32>
//CHECK-NEXT:            %182 = arith.constant 0.000000e+00 : f32
//CHECK-NEXT:            %183 = arith.cmpf oeq, %181, %182 : f32
//CHECK-NEXT:            %184 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %183, %184[] : memref<i1>
//CHECK-NEXT:            %185 = arith.constant {{.*}} : index
//CHECK-NEXT:            %186 = arith.index_cast %185 : index to i64
//CHECK-NEXT:            %187 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %188 = "llvm.insertvalue"(%187, %171) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %189 = "llvm.insertvalue"(%188, %186) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %190 = arith.constant 46 : i32
//CHECK-NEXT:            %191 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %190, %191[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%184, %189, %191) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:          %192 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %193 = arith.index_cast %18 : index to i32
//CHECK-NEXT:          %194 = arith.addi %192, %193 : i32
//CHECK-NEXT:          scf.yield %194 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %168, %6[] : memref<i32>
//CHECK-NEXT:        %195 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %196 = arith.index_cast %18 : index to i32
//CHECK-NEXT:        %197 = arith.addi %195, %196 : i32
//CHECK-NEXT:        scf.yield %197 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %163, %5[] : memref<i32>
//CHECK-NEXT:      %198 = scf.for %199 = %41 to %161 step %18 iter_args(%200 = %44) -> (i32) {
//CHECK-NEXT:        memref.store %200, %5[] : memref<i32>
//CHECK-NEXT:        %201 = arith.index_cast %162 : i32 to index
//CHECK-NEXT:        %202 = arith.addi %201, %18 : index
//CHECK-NEXT:        %203 = scf.for %204 = %41 to %202 step %18 iter_args(%205 = %44) -> (i32) {
//CHECK-NEXT:          memref.store %205, %6[] : memref<i32>
//CHECK-NEXT:          %206 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %207 = arith.sitofp %206 : i32 to f32
//CHECK-NEXT:          %208 = arith.extui %206 : i32 to i64
//CHECK-NEXT:          %209 = arith.index_cast %208 : i64 to index
//CHECK-NEXT:          %210 = arith.subi %209, %18 : index
//CHECK-NEXT:          %211 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %212 = arith.extui %211 : i32 to i64
//CHECK-NEXT:          %213 = arith.index_cast %212 : i64 to index
//CHECK-NEXT:          %214 = arith.subi %213, %18 : index
//CHECK-NEXT:          %215 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:          memref.store %207, %215[%214, %210] : memref<?x?xf32>
//CHECK-NEXT:          %216 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %217 = arith.sitofp %216 : i32 to f32
//CHECK-NEXT:          %218 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %219 = arith.extui %218 : i32 to i64
//CHECK-NEXT:          %220 = arith.index_cast %219 : i64 to index
//CHECK-NEXT:          %221 = arith.subi %220, %18 : index
//CHECK-NEXT:          %222 = arith.extui %216 : i32 to i64
//CHECK-NEXT:          %223 = arith.index_cast %222 : i64 to index
//CHECK-NEXT:          %224 = arith.subi %223, %18 : index
//CHECK-NEXT:          memref.store %217, %9[%224, %221] : memref<6x10xf32>
//CHECK-NEXT:          %225 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %226 = arith.index_cast %18 : index to i32
//CHECK-NEXT:          %227 = arith.addi %225, %226 : i32
//CHECK-NEXT:          scf.yield %227 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %203, %6[] : memref<i32>
//CHECK-NEXT:        %228 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %229 = arith.index_cast %18 : index to i32
//CHECK-NEXT:        %230 = arith.addi %228, %229 : i32
//CHECK-NEXT:        scf.yield %230 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %198, %5[] : memref<i32>
//CHECK-NEXT:      %231 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %232 = "memref.rank"(%231) : (memref<?x?xf32>) -> index
//CHECK-NEXT:      %233 = arith.subi %232, %18 : index
//CHECK-NEXT:      %234 = "memref.dim"(%231, %233) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %235 = arith.subi %233, %18 : index
//CHECK-NEXT:      %236 = "memref.dim"(%231, %235) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %237 = memref.alloc(%236, %234) : memref<?x?xf32>
//CHECK-NEXT:      scf.for %238 = %17 to %236 step %18 {
//CHECK-NEXT:        %239 = arith.addi %238, %18 : index
//CHECK-NEXT:        scf.for %240 = %17 to %234 step %18 {
//CHECK-NEXT:          %241 = arith.addi %240, %18 : index
//CHECK-NEXT:          %242 = arith.subi %239, %18 : index
//CHECK-NEXT:          %243 = arith.subi %241, %18 : index
//CHECK-NEXT:          %244 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:          %245 = memref.load %244[%242, %243] : memref<?x?xf32>
//CHECK-NEXT:          %246 = memref.load %9[%242, %243] : memref<6x10xf32>
//CHECK-NEXT:          %247 = arith.mulf %245, %246 fastmath<contract> : f32
//CHECK-NEXT:          memref.store %247, %237[%238, %240] : memref<?x?xf32>
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      %248 = "memref.cast"(%237) : (memref<?x?xf32>) -> memref<6x10xf32>
//CHECK-NEXT:      "memref.copy"(%248, %10) : (memref<6x10xf32>, memref<6x10xf32>) -> ()
//CHECK-NEXT:      memref.dealloc %237 : memref<?x?xf32>
//CHECK-NEXT:      %249 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %250 = "memref.rank"(%249) : (memref<?x?xf32>) -> index
//CHECK-NEXT:      %251 = arith.subi %250, %18 : index
//CHECK-NEXT:      %252 = "memref.dim"(%249, %251) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %253 = arith.subi %251, %18 : index
//CHECK-NEXT:      %254 = "memref.dim"(%249, %253) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %255 = memref.alloc(%254, %252) : memref<?x?xf32>
//CHECK-NEXT:      scf.for %256 = %17 to %254 step %18 {
//CHECK-NEXT:        %257 = arith.addi %256, %18 : index
//CHECK-NEXT:        scf.for %258 = %17 to %252 step %18 {
//CHECK-NEXT:          %259 = arith.addi %258, %18 : index
//CHECK-NEXT:          %260 = arith.subi %257, %18 : index
//CHECK-NEXT:          %261 = arith.subi %259, %18 : index
//CHECK-NEXT:          %262 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:          %263 = memref.load %262[%260, %261] : memref<?x?xf32>
//CHECK-NEXT:          %264 = memref.load %9[%260, %261] : memref<6x10xf32>
//CHECK-NEXT:          %265 = arith.subf %263, %264 fastmath<contract> : f32
//CHECK-NEXT:          memref.store %265, %255[%256, %258] : memref<?x?xf32>
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      %266 = memref.load %8[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      "memref.copy"(%255, %266) : (memref<?x?xf32>, memref<?x?xf32>) -> ()
//CHECK-NEXT:      memref.dealloc %255 : memref<?x?xf32>
//CHECK-NEXT:      %267 = scf.for %268 = %41 to %161 step %18 iter_args(%269 = %44) -> (i32) {
//CHECK-NEXT:        memref.store %269, %5[] : memref<i32>
//CHECK-NEXT:        %270 = arith.index_cast %162 : i32 to index
//CHECK-NEXT:        %271 = arith.addi %270, %18 : index
//CHECK-NEXT:        %272 = scf.for %273 = %41 to %271 step %18 iter_args(%274 = %44) -> (i32) {
//CHECK-NEXT:          memref.store %274, %6[] : memref<i32>
//CHECK-NEXT:          %275 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %276 = memref.load %5[] : memref<i32>
//CHECK-NEXT:            %277 = arith.extui %276 : i32 to i64
//CHECK-NEXT:            %278 = arith.index_cast %277 : i64 to index
//CHECK-NEXT:            %279 = arith.subi %278, %18 : index
//CHECK-NEXT:            %280 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %281 = arith.extui %280 : i32 to i64
//CHECK-NEXT:            %282 = arith.index_cast %281 : i64 to index
//CHECK-NEXT:            %283 = arith.subi %282, %18 : index
//CHECK-NEXT:            %284 = memref.load %10[%283, %279] : memref<6x10xf32>
//CHECK-NEXT:            %285 = arith.muli %276, %280 : i32
//CHECK-NEXT:            %286 = arith.sitofp %285 : i32 to f32
//CHECK-NEXT:            %287 = arith.cmpf oeq, %284, %286 : f32
//CHECK-NEXT:            %288 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %287, %288[] : memref<i1>
//CHECK-NEXT:            %289 = arith.constant {{.*}} : index
//CHECK-NEXT:            %290 = arith.index_cast %289 : index to i64
//CHECK-NEXT:            %291 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %292 = "llvm.insertvalue"(%291, %275) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %293 = "llvm.insertvalue"(%292, %290) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %294 = arith.constant 63 : i32
//CHECK-NEXT:            %295 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %294, %295[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%288, %293, %295) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %296 = memref.load %5[] : memref<i32>
//CHECK-NEXT:            %297 = arith.extui %296 : i32 to i64
//CHECK-NEXT:            %298 = arith.index_cast %297 : i64 to index
//CHECK-NEXT:            %299 = arith.subi %298, %18 : index
//CHECK-NEXT:            %300 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %301 = arith.extui %300 : i32 to i64
//CHECK-NEXT:            %302 = arith.index_cast %301 : i64 to index
//CHECK-NEXT:            %303 = arith.subi %302, %18 : index
//CHECK-NEXT:            %304 = memref.load %8[] : memref<memref<?x?xf32>>
//CHECK-NEXT:            %305 = memref.load %304[%303, %299] : memref<?x?xf32>
//CHECK-NEXT:            %306 = arith.subi %296, %300 : i32
//CHECK-NEXT:            %307 = arith.sitofp %306 : i32 to f32
//CHECK-NEXT:            %308 = arith.cmpf oeq, %305, %307 : f32
//CHECK-NEXT:            %309 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %308, %309[] : memref<i1>
//CHECK-NEXT:            %310 = arith.constant {{.*}} : index
//CHECK-NEXT:            %311 = arith.index_cast %310 : index to i64
//CHECK-NEXT:            %312 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %313 = "llvm.insertvalue"(%312, %275) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %314 = "llvm.insertvalue"(%313, %311) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %315 = arith.constant 64 : i32
//CHECK-NEXT:            %316 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %315, %316[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%309, %314, %316) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:          %317 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %318 = arith.index_cast %18 : index to i32
//CHECK-NEXT:          %319 = arith.addi %317, %318 : i32
//CHECK-NEXT:          scf.yield %319 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %272, %6[] : memref<i32>
//CHECK-NEXT:        %320 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %321 = arith.index_cast %18 : index to i32
//CHECK-NEXT:        %322 = arith.addi %320, %321 : i32
//CHECK-NEXT:        scf.yield %322 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %267, %5[] : memref<i32>
//CHECK-NEXT:      %323 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:      %324 = "memref.rank"(%323) : (memref<?x?xf32>) -> index
//CHECK-NEXT:      %325 = arith.subi %324, %18 : index
//CHECK-NEXT:      %326 = "memref.dim"(%323, %325) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %327 = arith.subi %325, %18 : index
//CHECK-NEXT:      %328 = "memref.dim"(%323, %327) : (memref<?x?xf32>, index) -> index
//CHECK-NEXT:      %329 = memref.alloc(%328, %326) : memref<?x?xf32>
//CHECK-NEXT:      scf.for %330 = %17 to %328 step %18 {
//CHECK-NEXT:        %331 = arith.addi %330, %18 : index
//CHECK-NEXT:        scf.for %332 = %17 to %326 step %18 {
//CHECK-NEXT:          %333 = arith.addi %332, %18 : index
//CHECK-NEXT:          %334 = arith.subi %331, %18 : index
//CHECK-NEXT:          %335 = arith.subi %333, %18 : index
//CHECK-NEXT:          %336 = memref.load %7[] : memref<memref<?x?xf32>>
//CHECK-NEXT:          %337 = memref.load %336[%334, %335] : memref<?x?xf32>
//CHECK-NEXT:          %338 = memref.load %9[%334, %335] : memref<6x10xf32>
//CHECK-NEXT:          %339 = arith.mulf %337, %338 fastmath<contract> : f32
//CHECK-NEXT:          memref.store %339, %329[%330, %332] : memref<?x?xf32>
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      %340 = memref.alloc(%328, %326) : memref<?x?xf32>
//CHECK-NEXT:      %341 = arith.constant 1.000000e+01 : f32
//CHECK-NEXT:      scf.for %342 = %17 to %328 step %18 {
//CHECK-NEXT:        scf.for %343 = %17 to %326 step %18 {
//CHECK-NEXT:          %344 = memref.load %329[%342, %343] : memref<?x?xf32>
//CHECK-NEXT:          %345 = arith.mulf %344, %341 fastmath<contract> : f32
//CHECK-NEXT:          memref.store %345, %340[%342, %343] : memref<?x?xf32>
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      %346 = memref.alloc(%328, %326) : memref<?x?xf32>
//CHECK-NEXT:      scf.for %347 = %17 to %328 step %18 {
//CHECK-NEXT:        %348 = arith.addi %347, %18 : index
//CHECK-NEXT:        scf.for %349 = %17 to %326 step %18 {
//CHECK-NEXT:          %350 = arith.addi %349, %18 : index
//CHECK-NEXT:          %351 = memref.load %340[%347, %349] : memref<?x?xf32>
//CHECK-NEXT:          %352 = arith.subi %348, %18 : index
//CHECK-NEXT:          %353 = arith.subi %350, %18 : index
//CHECK-NEXT:          %354 = memref.load %8[] : memref<memref<?x?xf32>>
//CHECK-NEXT:          %355 = memref.load %354[%352, %353] : memref<?x?xf32>
//CHECK-NEXT:          %356 = arith.addf %351, %355 fastmath<contract> : f32
//CHECK-NEXT:          memref.store %356, %346[%347, %349] : memref<?x?xf32>
//CHECK-NEXT:        }
//CHECK-NEXT:      }
//CHECK-NEXT:      %357 = "memref.cast"(%346) : (memref<?x?xf32>) -> memref<6x10xf32>
//CHECK-NEXT:      "memref.copy"(%357, %1) : (memref<6x10xf32>, memref<6x10xf32>) -> ()
//CHECK-NEXT:      memref.dealloc %346 : memref<?x?xf32>
//CHECK-NEXT:      memref.dealloc %340 : memref<?x?xf32>
//CHECK-NEXT:      memref.dealloc %329 : memref<?x?xf32>
//CHECK-NEXT:      %358 = scf.for %359 = %41 to %161 step %18 iter_args(%360 = %44) -> (i32) {
//CHECK-NEXT:        memref.store %360, %5[] : memref<i32>
//CHECK-NEXT:        %361 = arith.index_cast %162 : i32 to index
//CHECK-NEXT:        %362 = arith.addi %361, %18 : index
//CHECK-NEXT:        %363 = scf.for %364 = %41 to %362 step %18 iter_args(%365 = %44) -> (i32) {
//CHECK-NEXT:          memref.store %365, %6[] : memref<i32>
//CHECK-NEXT:          %366 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:          "memref.alloca_scope"() ({
//CHECK-NEXT:            %367 = memref.load %5[] : memref<i32>
//CHECK-NEXT:            %368 = arith.extui %367 : i32 to i64
//CHECK-NEXT:            %369 = arith.index_cast %368 : i64 to index
//CHECK-NEXT:            %370 = arith.subi %369, %18 : index
//CHECK-NEXT:            %371 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %372 = arith.extui %371 : i32 to i64
//CHECK-NEXT:            %373 = arith.index_cast %372 : i64 to index
//CHECK-NEXT:            %374 = arith.subi %373, %18 : index
//CHECK-NEXT:            %375 = memref.load %1[%374, %370] : memref<6x10xf32>
//CHECK-NEXT:            %376 = arith.muli %367, %371 : i32
//CHECK-NEXT:            %377 = arith.muli %376, %159 : i32
//CHECK-NEXT:            %378 = arith.subi %367, %371 : i32
//CHECK-NEXT:            %379 = arith.addi %377, %378 : i32
//CHECK-NEXT:            %380 = arith.sitofp %379 : i32 to f32
//CHECK-NEXT:            %381 = arith.cmpf oeq, %375, %380 : f32
//CHECK-NEXT:            %382 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:            memref.store %381, %382[] : memref<i1>
//CHECK-NEXT:            %383 = arith.constant {{.*}} : index
//CHECK-NEXT:            %384 = arith.index_cast %383 : index to i64
//CHECK-NEXT:            %385 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %386 = "llvm.insertvalue"(%385, %366) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %387 = "llvm.insertvalue"(%386, %384) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:            %388 = arith.constant 72 : i32
//CHECK-NEXT:            %389 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:            memref.store %388, %389[] : memref<i32>
//CHECK-NEXT:            func.call @_QPassert(%382, %387, %389) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:            "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:          }) : () -> ()
//CHECK-NEXT:          %390 = memref.load %6[] : memref<i32>
//CHECK-NEXT:          %391 = arith.index_cast %18 : index to i32
//CHECK-NEXT:          %392 = arith.addi %390, %391 : i32
//CHECK-NEXT:          scf.yield %392 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %363, %6[] : memref<i32>
//CHECK-NEXT:        %393 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %394 = arith.index_cast %18 : index to i32
//CHECK-NEXT:        %395 = arith.addi %393, %394 : i32
//CHECK-NEXT:        scf.yield %395 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %358, %5[] : memref<i32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
