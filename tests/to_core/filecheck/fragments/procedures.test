// RUN: xftn %S/../../../../examples/fragments/procedures.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = i32, sym_name = "_QMprocedures_testECc_v", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant}> ({
//CHECK-NEXT:      %0 = arith.constant 100 : i32
//CHECK-NEXT:      "llvm.return"(%0) : (i32) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<1 x i32>, sym_name = "_QMprocedures_testEv1", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32}> ({
//CHECK-NEXT:      %1 = llvm.mlir.zero : !llvm.array<1 x i32>
//CHECK-NEXT:      "llvm.return"(%1) : (!llvm.array<1 x i32>) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = i32, sym_name = "_QMprocedures_testEv2", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32}> ({
//CHECK-NEXT:      %2 = arith.constant 20 : i32
//CHECK-NEXT:      "llvm.return"(%2) : (i32) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func @_QMprocedures_testPcalc() {
//CHECK-NEXT:      %3 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %4 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %6 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %7 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> i32
//CHECK-NEXT:        %8 = arith.constant 20 : i32
//CHECK-NEXT:        %9 = arith.cmpi eq, %7, %8 : i32
//CHECK-NEXT:        %10 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %9, %10[] : memref<i1>
//CHECK-NEXT:        %11 = arith.constant {{.*}} : index
//CHECK-NEXT:        %12 = arith.index_cast %11 : index to i64
//CHECK-NEXT:        %13 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %14 = "llvm.insertvalue"(%13, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %15 = "llvm.insertvalue"(%14, %12) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %16 = arith.constant 17 : i32
//CHECK-NEXT:        %17 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %16, %17[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%10, %15, %17) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %18 = arith.constant true
//CHECK-NEXT:        %19 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %18, %19[] : memref<i1>
//CHECK-NEXT:        %20 = arith.constant {{.*}} : index
//CHECK-NEXT:        %21 = arith.index_cast %20 : index to i64
//CHECK-NEXT:        %22 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %23 = "llvm.insertvalue"(%22, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %24 = "llvm.insertvalue"(%23, %21) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %25 = arith.constant 18 : i32
//CHECK-NEXT:        %26 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %25, %26[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%19, %24, %26) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %27 = arith.constant 13 : i32
//CHECK-NEXT:      "llvm.store"(%27, %3) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %28 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> i32
//CHECK-NEXT:        %29 = arith.cmpi eq, %28, %27 : i32
//CHECK-NEXT:        %30 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %29, %30[] : memref<i1>
//CHECK-NEXT:        %31 = arith.constant {{.*}} : index
//CHECK-NEXT:        %32 = arith.index_cast %31 : index to i64
//CHECK-NEXT:        %33 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %34 = "llvm.insertvalue"(%33, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %35 = "llvm.insertvalue"(%34, %32) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %36 = arith.constant 21 : i32
//CHECK-NEXT:        %37 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %36, %37[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%30, %35, %37) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %38 = arith.constant 87 : i32
//CHECK-NEXT:      "llvm.store"(%38, %4) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %39 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> i32
//CHECK-NEXT:        %40 = arith.cmpi eq, %39, %38 : i32
//CHECK-NEXT:        %41 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %40, %41[] : memref<i1>
//CHECK-NEXT:        %42 = arith.constant {{.*}} : index
//CHECK-NEXT:        %43 = arith.index_cast %42 : index to i64
//CHECK-NEXT:        %44 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %45 = "llvm.insertvalue"(%44, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %46 = "llvm.insertvalue"(%45, %43) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %47 = arith.constant 23 : i32
//CHECK-NEXT:        %48 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %47, %48[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%41, %46, %48) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMprocedures_testPmod_globals() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %49 = "llvm.load"(%3) <{ordering = 0 : i64}> : (!llvm.ptr) -> i32
//CHECK-NEXT:        %50 = arith.constant 99 : i32
//CHECK-NEXT:        %51 = arith.cmpi eq, %49, %50 : i32
//CHECK-NEXT:        %52 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %51, %52[] : memref<i1>
//CHECK-NEXT:        %53 = arith.constant {{.*}} : index
//CHECK-NEXT:        %54 = arith.index_cast %53 : index to i64
//CHECK-NEXT:        %55 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %56 = "llvm.insertvalue"(%55, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %57 = "llvm.insertvalue"(%56, %54) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %58 = arith.constant 27 : i32
//CHECK-NEXT:        %59 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %58, %59[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%52, %57, %59) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %60 = "llvm.load"(%4) <{ordering = 0 : i64}> : (!llvm.ptr) -> i32
//CHECK-NEXT:        %61 = arith.constant 66 : i32
//CHECK-NEXT:        %62 = arith.cmpi eq, %60, %61 : i32
//CHECK-NEXT:        %63 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %62, %63[] : memref<i1>
//CHECK-NEXT:        %64 = arith.constant {{.*}} : index
//CHECK-NEXT:        %65 = arith.index_cast %64 : index to i64
//CHECK-NEXT:        %66 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %67 = "llvm.insertvalue"(%66, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %68 = "llvm.insertvalue"(%67, %65) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %69 = arith.constant 28 : i32
//CHECK-NEXT:        %70 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %69, %70[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%63, %68, %70) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %71 = arith.constant 5 : i32
//CHECK-NEXT:        %72 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %71, %72[] : memref<i32>
//CHECK-NEXT:        func.call @_QMprocedures_testPproc_one(%72, %5) : (memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %73 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %74 = arith.constant 50 : i32
//CHECK-NEXT:        %75 = arith.cmpi eq, %73, %74 : i32
//CHECK-NEXT:        %76 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %75, %76[] : memref<i1>
//CHECK-NEXT:        %77 = arith.constant {{.*}} : index
//CHECK-NEXT:        %78 = arith.index_cast %77 : index to i64
//CHECK-NEXT:        %79 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %80 = "llvm.insertvalue"(%79, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %81 = "llvm.insertvalue"(%80, %78) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %82 = arith.constant 32 : i32
//CHECK-NEXT:        %83 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %82, %83[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%76, %81, %83) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %84 = arith.constant 9 : i32
//CHECK-NEXT:        %85 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %84, %85[] : memref<i32>
//CHECK-NEXT:        func.call @_QMprocedures_testPproc_two(%85, %5) : (memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %86 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %87 = arith.constant 900 : i32
//CHECK-NEXT:        %88 = arith.cmpi eq, %86, %87 : i32
//CHECK-NEXT:        %89 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %88, %89[] : memref<i1>
//CHECK-NEXT:        %90 = arith.constant {{.*}} : index
//CHECK-NEXT:        %91 = arith.index_cast %90 : index to i64
//CHECK-NEXT:        %92 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %93 = "llvm.insertvalue"(%92, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %94 = "llvm.insertvalue"(%93, %91) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %95 = arith.constant 34 : i32
//CHECK-NEXT:        %96 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %95, %96[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%89, %94, %96) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %97 = "memref.alloca_scope"() ({
//CHECK-NEXT:        %98 = arith.constant 1 : i32
//CHECK-NEXT:        %99 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %98, %99[] : memref<i32>
//CHECK-NEXT:        %100 = func.call @_QMprocedures_testPfn1(%99) : (memref<i32>) -> i32
//CHECK-NEXT:        "memref.alloca_scope.return"(%100) : (i32) -> ()
//CHECK-NEXT:      }) : () -> i32
//CHECK-NEXT:      memref.store %97, %5[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %101 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %102 = arith.constant 10 : i32
//CHECK-NEXT:        %103 = arith.cmpi eq, %101, %102 : i32
//CHECK-NEXT:        %104 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %103, %104[] : memref<i1>
//CHECK-NEXT:        %105 = arith.constant {{.*}} : index
//CHECK-NEXT:        %106 = arith.index_cast %105 : index to i64
//CHECK-NEXT:        %107 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %108 = "llvm.insertvalue"(%107, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %109 = "llvm.insertvalue"(%108, %106) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %110 = arith.constant 36 : i32
//CHECK-NEXT:        %111 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %110, %111[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%104, %109, %111) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %112 = "memref.alloca_scope"() ({
//CHECK-NEXT:        %113 = arith.constant 2 : i32
//CHECK-NEXT:        %114 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %113, %114[] : memref<i32>
//CHECK-NEXT:        %115 = func.call @_QMprocedures_testPfn2(%114) : (memref<i32>) -> i32
//CHECK-NEXT:        "memref.alloca_scope.return"(%115) : (i32) -> ()
//CHECK-NEXT:      }) : () -> i32
//CHECK-NEXT:      memref.store %112, %5[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %116 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %117 = arith.constant 200 : i32
//CHECK-NEXT:        %118 = arith.cmpi eq, %116, %117 : i32
//CHECK-NEXT:        %119 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %118, %119[] : memref<i1>
//CHECK-NEXT:        %120 = arith.constant {{.*}} : index
//CHECK-NEXT:        %121 = arith.index_cast %120 : index to i64
//CHECK-NEXT:        %122 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %123 = "llvm.insertvalue"(%122, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %124 = "llvm.insertvalue"(%123, %121) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %125 = arith.constant 38 : i32
//CHECK-NEXT:        %126 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %125, %126[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%119, %124, %126) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %127 = "memref.alloca_scope"() ({
//CHECK-NEXT:        %128 = arith.constant 3 : i32
//CHECK-NEXT:        %129 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %128, %129[] : memref<i32>
//CHECK-NEXT:        %130 = func.call @_QMprocedures_testPfn3(%129) : (memref<i32>) -> i32
//CHECK-NEXT:        "memref.alloca_scope.return"(%130) : (i32) -> ()
//CHECK-NEXT:      }) : () -> i32
//CHECK-NEXT:      memref.store %127, %5[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %131 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %132 = arith.constant 3000 : i32
//CHECK-NEXT:        %133 = arith.cmpi eq, %131, %132 : i32
//CHECK-NEXT:        %134 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %133, %134[] : memref<i1>
//CHECK-NEXT:        %135 = arith.constant {{.*}} : index
//CHECK-NEXT:        %136 = arith.index_cast %135 : index to i64
//CHECK-NEXT:        %137 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %138 = "llvm.insertvalue"(%137, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %139 = "llvm.insertvalue"(%138, %136) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %140 = arith.constant 40 : i32
//CHECK-NEXT:        %141 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %140, %141[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%134, %139, %141) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %142 = "memref.alloca_scope"() ({
//CHECK-NEXT:        %143 = arith.constant 4 : i32
//CHECK-NEXT:        %144 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %143, %144[] : memref<i32>
//CHECK-NEXT:        %145 = func.call @_QMprocedures_testPfn4(%144) : (memref<i32>) -> i32
//CHECK-NEXT:        "memref.alloca_scope.return"(%145) : (i32) -> ()
//CHECK-NEXT:      }) : () -> i32
//CHECK-NEXT:      memref.store %142, %5[] : memref<i32>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %146 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %147 = arith.constant 40000 : i32
//CHECK-NEXT:        %148 = arith.cmpi eq, %146, %147 : i32
//CHECK-NEXT:        %149 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %148, %149[] : memref<i1>
//CHECK-NEXT:        %150 = arith.constant {{.*}} : index
//CHECK-NEXT:        %151 = arith.index_cast %150 : index to i64
//CHECK-NEXT:        %152 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %153 = "llvm.insertvalue"(%152, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %154 = "llvm.insertvalue"(%153, %151) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %155 = arith.constant 42 : i32
//CHECK-NEXT:        %156 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %155, %156[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%149, %154, %156) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPproc_one(%3 : memref<i32> {fir.bindc_name = "a"}, %4 : memref<i32> {fir.bindc_name = "b"}) {
//CHECK-NEXT:      %5 = arith.constant 10 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %6, %5 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPproc_two(%3 : memref<i32> {fir.bindc_name = "a"}, %4 : memref<i32> {fir.bindc_name = "b"}) {
//CHECK-NEXT:      %5 = arith.constant 100 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %6, %5 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPfn1(%3 : memref<i32> {fir.bindc_name = "v"}) -> i32 {
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 10 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %6, %5 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      %8 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      func.return %8 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPfn2(%3 : memref<i32> {fir.bindc_name = "v"}) -> i32 {
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 100 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %6, %5 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      %8 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      func.return %8 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPfn3(%3 : memref<i32> {fir.bindc_name = "v"}) -> i32 {
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 1000 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %6, %5 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      %8 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      func.return %8 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPfn4(%3 : memref<i32> {fir.bindc_name = "v"}) -> i32 {
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 10000 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %6, %5 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      %8 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      func.return %8 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPmod_globals() {
//CHECK-NEXT:      %3 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %4 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %5 = arith.constant 99 : i32
//CHECK-NEXT:      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      %6 = arith.constant 66 : i32
//CHECK-NEXT:      "llvm.store"(%6, %4) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
