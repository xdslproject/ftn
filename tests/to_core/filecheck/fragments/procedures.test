// RUN: xftn %S/../../../../examples/fragments/procedures.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = i32, sym_name = "_QMprocedures_testECc_v", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant}> ({
//CHECK-NEXT:      %0 = arith.constant 100 : i32
//CHECK-NEXT:      "llvm.return"(%0) : (i32) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<1 x i32>, sym_name = "_QMprocedures_testEv1", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32}> ({
//CHECK-NEXT:      %1 = llvm.mlir.zero : !llvm.array<1 x i32>
//CHECK-NEXT:      "llvm.return"(%1) : (!llvm.array<1 x i32>) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = i32, sym_name = "_QMprocedures_testEv2", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32}> ({
//CHECK-NEXT:      %2 = arith.constant 20 : i32
//CHECK-NEXT:      "llvm.return"(%2) : (i32) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func @_QMprocedures_testPcalc() {
//CHECK-NEXT:      %3 = "llvm.mlir.addressof"() <{global_name = @_QMprocedures_testEv1}> : () -> !llvm.ptr
//CHECK-NEXT:      %4 = "llvm.mlir.addressof"() <{global_name = @_QMprocedures_testEv2}> : () -> !llvm.ptr
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %6 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %7 = "llvm.load"(%4) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %8 = arith.constant 20 : i32
//CHECK-NEXT:        %9 = arith.cmpi eq, %7, %8 : i32
//CHECK-NEXT:        %10 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %9, %10[] : memref<i1>
//CHECK-NEXT:        %11 = arith.constant 108 : index
//CHECK-NEXT:        %12 = arith.index_cast %11 : index to i64
//CHECK-NEXT:        %13 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %14 = "llvm.insertvalue"(%13, %6) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %15 = "llvm.insertvalue"(%14, %12) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %16 = arith.constant 17 : i32
//CHECK-NEXT:        %17 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %16, %17[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%10, %15, %17) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %18 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %19 = arith.constant true
//CHECK-NEXT:        %20 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %19, %20[] : memref<i1>
//CHECK-NEXT:        %21 = arith.constant 108 : index
//CHECK-NEXT:        %22 = arith.index_cast %21 : index to i64
//CHECK-NEXT:        %23 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %24 = "llvm.insertvalue"(%23, %18) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %25 = "llvm.insertvalue"(%24, %22) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %26 = arith.constant 18 : i32
//CHECK-NEXT:        %27 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %26, %27[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%20, %25, %27) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %28 = arith.constant 13 : i32
//CHECK-NEXT:      "llvm.store"(%28, %3) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      %29 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %30 = "llvm.load"(%3) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %31 = arith.constant 13 : i32
//CHECK-NEXT:        %32 = arith.cmpi eq, %30, %31 : i32
//CHECK-NEXT:        %33 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %32, %33[] : memref<i1>
//CHECK-NEXT:        %34 = arith.constant 108 : index
//CHECK-NEXT:        %35 = arith.index_cast %34 : index to i64
//CHECK-NEXT:        %36 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %37 = "llvm.insertvalue"(%36, %29) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %38 = "llvm.insertvalue"(%37, %35) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %39 = arith.constant 21 : i32
//CHECK-NEXT:        %40 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %39, %40[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%33, %38, %40) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %41 = arith.constant 87 : i32
//CHECK-NEXT:      "llvm.store"(%41, %4) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      %42 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %43 = "llvm.load"(%4) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %44 = arith.constant 87 : i32
//CHECK-NEXT:        %45 = arith.cmpi eq, %43, %44 : i32
//CHECK-NEXT:        %46 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %45, %46[] : memref<i1>
//CHECK-NEXT:        %47 = arith.constant 108 : index
//CHECK-NEXT:        %48 = arith.index_cast %47 : index to i64
//CHECK-NEXT:        %49 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %50 = "llvm.insertvalue"(%49, %42) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %51 = "llvm.insertvalue"(%50, %48) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %52 = arith.constant 23 : i32
//CHECK-NEXT:        %53 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %52, %53[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%46, %51, %53) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMprocedures_testPmod_globals() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %54 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %55 = "llvm.load"(%3) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %56 = arith.constant 99 : i32
//CHECK-NEXT:        %57 = arith.cmpi eq, %55, %56 : i32
//CHECK-NEXT:        %58 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %57, %58[] : memref<i1>
//CHECK-NEXT:        %59 = arith.constant 108 : index
//CHECK-NEXT:        %60 = arith.index_cast %59 : index to i64
//CHECK-NEXT:        %61 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %62 = "llvm.insertvalue"(%61, %54) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %63 = "llvm.insertvalue"(%62, %60) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %64 = arith.constant 27 : i32
//CHECK-NEXT:        %65 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %64, %65[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%58, %63, %65) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %66 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %67 = "llvm.load"(%4) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %68 = arith.constant 66 : i32
//CHECK-NEXT:        %69 = arith.cmpi eq, %67, %68 : i32
//CHECK-NEXT:        %70 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %69, %70[] : memref<i1>
//CHECK-NEXT:        %71 = arith.constant 108 : index
//CHECK-NEXT:        %72 = arith.index_cast %71 : index to i64
//CHECK-NEXT:        %73 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %74 = "llvm.insertvalue"(%73, %66) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %75 = "llvm.insertvalue"(%74, %72) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %76 = arith.constant 28 : i32
//CHECK-NEXT:        %77 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %76, %77[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%70, %75, %77) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %78 = arith.constant 5 : i32
//CHECK-NEXT:        %79 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %78, %79[] : memref<i32>
//CHECK-NEXT:        func.call @_QMprocedures_testPproc_one(%79, %5) : (memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %80 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %81 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %82 = arith.constant 50 : i32
//CHECK-NEXT:        %83 = arith.cmpi eq, %81, %82 : i32
//CHECK-NEXT:        %84 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %83, %84[] : memref<i1>
//CHECK-NEXT:        %85 = arith.constant 108 : index
//CHECK-NEXT:        %86 = arith.index_cast %85 : index to i64
//CHECK-NEXT:        %87 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %88 = "llvm.insertvalue"(%87, %80) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %89 = "llvm.insertvalue"(%88, %86) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %90 = arith.constant 32 : i32
//CHECK-NEXT:        %91 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %90, %91[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%84, %89, %91) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %92 = arith.constant 9 : i32
//CHECK-NEXT:        %93 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %92, %93[] : memref<i32>
//CHECK-NEXT:        func.call @_QMprocedures_testPproc_two(%93, %5) : (memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %94 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %95 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %96 = arith.constant 900 : i32
//CHECK-NEXT:        %97 = arith.cmpi eq, %95, %96 : i32
//CHECK-NEXT:        %98 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %97, %98[] : memref<i1>
//CHECK-NEXT:        %99 = arith.constant 108 : index
//CHECK-NEXT:        %100 = arith.index_cast %99 : index to i64
//CHECK-NEXT:        %101 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %102 = "llvm.insertvalue"(%101, %94) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %103 = "llvm.insertvalue"(%102, %100) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %104 = arith.constant 34 : i32
//CHECK-NEXT:        %105 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %104, %105[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%98, %103, %105) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %106 = "memref.alloca_scope"() ({
//CHECK-NEXT:        %107 = arith.constant 1 : i32
//CHECK-NEXT:        %108 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %107, %108[] : memref<i32>
//CHECK-NEXT:        %109 = func.call @_QMprocedures_testPfn1(%108) : (memref<i32>) -> i32
//CHECK-NEXT:        "memref.alloca_scope.return"(%109) : (i32) -> ()
//CHECK-NEXT:      }) : () -> i32
//CHECK-NEXT:      memref.store %106, %5[] : memref<i32>
//CHECK-NEXT:      %110 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %111 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %112 = arith.constant 10 : i32
//CHECK-NEXT:        %113 = arith.cmpi eq, %111, %112 : i32
//CHECK-NEXT:        %114 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %113, %114[] : memref<i1>
//CHECK-NEXT:        %115 = arith.constant 108 : index
//CHECK-NEXT:        %116 = arith.index_cast %115 : index to i64
//CHECK-NEXT:        %117 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %118 = "llvm.insertvalue"(%117, %110) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %119 = "llvm.insertvalue"(%118, %116) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %120 = arith.constant 36 : i32
//CHECK-NEXT:        %121 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %120, %121[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%114, %119, %121) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %122 = "memref.alloca_scope"() ({
//CHECK-NEXT:        %123 = arith.constant 2 : i32
//CHECK-NEXT:        %124 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %123, %124[] : memref<i32>
//CHECK-NEXT:        %125 = func.call @_QMprocedures_testPfn2(%124) : (memref<i32>) -> i32
//CHECK-NEXT:        "memref.alloca_scope.return"(%125) : (i32) -> ()
//CHECK-NEXT:      }) : () -> i32
//CHECK-NEXT:      memref.store %122, %5[] : memref<i32>
//CHECK-NEXT:      %126 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %127 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %128 = arith.constant 200 : i32
//CHECK-NEXT:        %129 = arith.cmpi eq, %127, %128 : i32
//CHECK-NEXT:        %130 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %129, %130[] : memref<i1>
//CHECK-NEXT:        %131 = arith.constant 108 : index
//CHECK-NEXT:        %132 = arith.index_cast %131 : index to i64
//CHECK-NEXT:        %133 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %134 = "llvm.insertvalue"(%133, %126) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %135 = "llvm.insertvalue"(%134, %132) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %136 = arith.constant 38 : i32
//CHECK-NEXT:        %137 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %136, %137[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%130, %135, %137) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %138 = "memref.alloca_scope"() ({
//CHECK-NEXT:        %139 = arith.constant 3 : i32
//CHECK-NEXT:        %140 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %139, %140[] : memref<i32>
//CHECK-NEXT:        %141 = func.call @_QMprocedures_testPfn3(%140) : (memref<i32>) -> i32
//CHECK-NEXT:        "memref.alloca_scope.return"(%141) : (i32) -> ()
//CHECK-NEXT:      }) : () -> i32
//CHECK-NEXT:      memref.store %138, %5[] : memref<i32>
//CHECK-NEXT:      %142 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %143 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %144 = arith.constant 3000 : i32
//CHECK-NEXT:        %145 = arith.cmpi eq, %143, %144 : i32
//CHECK-NEXT:        %146 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %145, %146[] : memref<i1>
//CHECK-NEXT:        %147 = arith.constant 108 : index
//CHECK-NEXT:        %148 = arith.index_cast %147 : index to i64
//CHECK-NEXT:        %149 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %150 = "llvm.insertvalue"(%149, %142) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %151 = "llvm.insertvalue"(%150, %148) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %152 = arith.constant 40 : i32
//CHECK-NEXT:        %153 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %152, %153[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%146, %151, %153) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %154 = "memref.alloca_scope"() ({
//CHECK-NEXT:        %155 = arith.constant 4 : i32
//CHECK-NEXT:        %156 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %155, %156[] : memref<i32>
//CHECK-NEXT:        %157 = func.call @_QMprocedures_testPfn4(%156) : (memref<i32>) -> i32
//CHECK-NEXT:        "memref.alloca_scope.return"(%157) : (i32) -> ()
//CHECK-NEXT:      }) : () -> i32
//CHECK-NEXT:      memref.store %154, %5[] : memref<i32>
//CHECK-NEXT:      %158 = "llvm.mlir.addressof"() <{global_name = @_QQclX5d43b8646caff64fe5202d4e9e086654}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %159 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %160 = arith.constant 40000 : i32
//CHECK-NEXT:        %161 = arith.cmpi eq, %159, %160 : i32
//CHECK-NEXT:        %162 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %161, %162[] : memref<i1>
//CHECK-NEXT:        %163 = arith.constant 108 : index
//CHECK-NEXT:        %164 = arith.index_cast %163 : index to i64
//CHECK-NEXT:        %165 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %166 = "llvm.insertvalue"(%165, %158) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %167 = "llvm.insertvalue"(%166, %164) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %168 = arith.constant 42 : i32
//CHECK-NEXT:        %169 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %168, %169[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%162, %167, %169) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPproc_one(%3 : memref<i32> {fir.bindc_name = "a"}, %4 : memref<i32> {fir.bindc_name = "b"}) {
//CHECK-NEXT:      %5 = arith.constant 10 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %5, %6 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPproc_two(%3 : memref<i32> {fir.bindc_name = "a"}, %4 : memref<i32> {fir.bindc_name = "b"}) {
//CHECK-NEXT:      %5 = arith.constant 100 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %5, %6 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      cf.br ^0
//CHECK-NEXT:    ^0:
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPfn1(%3 : memref<i32> {fir.bindc_name = "v"}) -> i32 {
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 10 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %5, %6 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      %8 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      func.return %8 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPfn2(%3 : memref<i32> {fir.bindc_name = "v"}) -> i32 {
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 100 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %5, %6 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      %8 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      func.return %8 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPfn3(%3 : memref<i32> {fir.bindc_name = "v"}) -> i32 {
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 1000 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %5, %6 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      %8 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      func.return %8 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPfn4(%3 : memref<i32> {fir.bindc_name = "v"}) -> i32 {
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 10000 : i32
//CHECK-NEXT:      %6 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %7 = arith.muli %5, %6 : i32
//CHECK-NEXT:      memref.store %7, %4[] : memref<i32>
//CHECK-NEXT:      cf.br ^0
//CHECK-NEXT:    ^0:
//CHECK-NEXT:      %8 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      func.return %8 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMprocedures_testPmod_globals() {
//CHECK-NEXT:      %3 = "llvm.mlir.addressof"() <{global_name = @_QMprocedures_testEv1}> : () -> !llvm.ptr
//CHECK-NEXT:      %4 = "llvm.mlir.addressof"() <{global_name = @_QMprocedures_testEv2}> : () -> !llvm.ptr
//CHECK-NEXT:      %5 = arith.constant 99 : i32
//CHECK-NEXT:      "llvm.store"(%5, %3) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      %6 = arith.constant 66 : i32
//CHECK-NEXT:      "llvm.store"(%6, %4) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<108 x i8>, sym_name = "_QQclX5d43b8646caff64fe5202d4e9e086654", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "/home/nick/projects/xdsl/ftn/tests/to_core/filecheck/fragments/../../../../examples/fragments/procedures.F90", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
