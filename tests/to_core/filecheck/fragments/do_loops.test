// RUN: xftn %S/../../../../examples/fragments/do_loops.F90 -DFRAGMENT_ONLY --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    func.func @_QPcalc(%0 : memref<i32> {fir.bindc_name = "a"}) {
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = arith.constant 0 : i32
//CHECK-NEXT:      memref.store %4, %2[] : memref<i32>
//CHECK-NEXT:      %5 = arith.constant 1 : i32
//CHECK-NEXT:      %6 = arith.index_cast %5 : i32 to index
//CHECK-NEXT:      %7 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %8 = arith.index_cast %7 : i32 to index
//CHECK-NEXT:      %9 = arith.constant 1 : index
//CHECK-NEXT:      %10 = arith.index_cast %6 : index to i32
//CHECK-NEXT:      %11 = arith.constant 1 : index
//CHECK-NEXT:      %12 = arith.addi %8, %11 : index
//CHECK-NEXT:      %13 = scf.for %14 = %6 to %12 step %9 iter_args(%15 = %10) -> (i32) {
//CHECK-NEXT:        memref.store %15, %3[] : memref<i32>
//CHECK-NEXT:        %16 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %17 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %18 = arith.addi %16, %17 : i32
//CHECK-NEXT:        memref.store %18, %2[] : memref<i32>
//CHECK-NEXT:        %19 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %20 = arith.index_cast %9 : index to i32
//CHECK-NEXT:        %21 = arith.addi %19, %20 : i32
//CHECK-NEXT:        scf.yield %21 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %13, %3[] : memref<i32>
//CHECK-NEXT:      %22 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %23 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %24 = arith.constant 5050 : i32
//CHECK-NEXT:        %25 = arith.cmpi eq, %23, %24 : i32
//CHECK-NEXT:        %26 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %25, %26[] : memref<i1>
//CHECK-NEXT:        %27 = arith.constant {{.*}} : index
//CHECK-NEXT:        %28 = arith.index_cast %27 : index to i64
//CHECK-NEXT:        %29 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %30 = "llvm.insertvalue"(%29, %22) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %31 = "llvm.insertvalue"(%30, %28) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %32 = arith.constant 19 : i32
//CHECK-NEXT:        %33 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %32, %33[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%26, %31, %33) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %34 = arith.constant 0 : i32
//CHECK-NEXT:      memref.store %34, %2[] : memref<i32>
//CHECK-NEXT:      %35 = arith.constant 1 : i32
//CHECK-NEXT:      %36 = arith.index_cast %35 : i32 to index
//CHECK-NEXT:      %37 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %38 = arith.index_cast %37 : i32 to index
//CHECK-NEXT:      %39 = arith.constant 2 : i32
//CHECK-NEXT:      %40 = arith.index_cast %39 : i32 to index
//CHECK-NEXT:      %41 = arith.index_cast %36 : index to i32
//CHECK-NEXT:      %42 = arith.constant 1 : index
//CHECK-NEXT:      %43 = arith.addi %38, %42 : index
//CHECK-NEXT:      %44 = scf.for %45 = %36 to %43 step %40 iter_args(%46 = %41) -> (i32) {
//CHECK-NEXT:        memref.store %46, %3[] : memref<i32>
//CHECK-NEXT:        %47 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %48 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %49 = arith.addi %47, %48 : i32
//CHECK-NEXT:        memref.store %49, %2[] : memref<i32>
//CHECK-NEXT:        %50 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %51 = arith.index_cast %40 : index to i32
//CHECK-NEXT:        %52 = arith.addi %50, %51 : i32
//CHECK-NEXT:        scf.yield %52 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %44, %3[] : memref<i32>
//CHECK-NEXT:      %53 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %54 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %55 = arith.constant 2500 : i32
//CHECK-NEXT:        %56 = arith.cmpi eq, %54, %55 : i32
//CHECK-NEXT:        %57 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %56, %57[] : memref<i1>
//CHECK-NEXT:        %58 = arith.constant {{.*}} : index
//CHECK-NEXT:        %59 = arith.index_cast %58 : index to i64
//CHECK-NEXT:        %60 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %61 = "llvm.insertvalue"(%60, %53) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %62 = "llvm.insertvalue"(%61, %59) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %63 = arith.constant 26 : i32
//CHECK-NEXT:        %64 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %63, %64[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%57, %62, %64) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %65 = arith.constant 0 : i32
//CHECK-NEXT:      memref.store %65, %2[] : memref<i32>
//CHECK-NEXT:      %66 = arith.constant 80 : i32
//CHECK-NEXT:      %67 = arith.index_cast %66 : i32 to index
//CHECK-NEXT:      %68 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %69 = arith.index_cast %68 : i32 to index
//CHECK-NEXT:      %70 = arith.constant 1 : index
//CHECK-NEXT:      %71 = arith.index_cast %67 : index to i32
//CHECK-NEXT:      %72 = arith.constant 1 : index
//CHECK-NEXT:      %73 = arith.addi %69, %72 : index
//CHECK-NEXT:      %74 = scf.for %75 = %67 to %73 step %70 iter_args(%76 = %71) -> (i32) {
//CHECK-NEXT:        memref.store %76, %3[] : memref<i32>
//CHECK-NEXT:        %77 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %78 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %79 = arith.addi %77, %78 : i32
//CHECK-NEXT:        memref.store %79, %2[] : memref<i32>
//CHECK-NEXT:        %80 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %81 = arith.index_cast %70 : index to i32
//CHECK-NEXT:        %82 = arith.addi %80, %81 : i32
//CHECK-NEXT:        scf.yield %82 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %74, %3[] : memref<i32>
//CHECK-NEXT:      %83 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %84 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %85 = arith.constant 1890 : i32
//CHECK-NEXT:        %86 = arith.cmpi eq, %84, %85 : i32
//CHECK-NEXT:        %87 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %86, %87[] : memref<i1>
//CHECK-NEXT:        %88 = arith.constant {{.*}} : index
//CHECK-NEXT:        %89 = arith.index_cast %88 : index to i64
//CHECK-NEXT:        %90 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %91 = "llvm.insertvalue"(%90, %83) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %92 = "llvm.insertvalue"(%91, %89) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %93 = arith.constant 33 : i32
//CHECK-NEXT:        %94 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %93, %94[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%87, %92, %94) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %95 = arith.constant 10000 : i32
//CHECK-NEXT:      memref.store %95, %2[] : memref<i32>
//CHECK-NEXT:      %96 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %97 = arith.index_cast %96 : i32 to index
//CHECK-NEXT:      %98 = arith.constant 1 : i32
//CHECK-NEXT:      %99 = arith.index_cast %98 : i32 to index
//CHECK-NEXT:      %100 = arith.constant -1 : i32
//CHECK-NEXT:      %101 = arith.index_cast %100 : i32 to index
//CHECK-NEXT:      %102 = arith.index_cast %101 : index to i64
//CHECK-NEXT:      %103 = math.absi %102 : i64
//CHECK-NEXT:      %104 = arith.index_cast %103 : i64 to index
//CHECK-NEXT:      %105 = arith.index_cast %97 : index to i32
//CHECK-NEXT:      %106 = arith.constant 1 : index
//CHECK-NEXT:      %107 = arith.addi %97, %106 : index
//CHECK-NEXT:      %108 = scf.for %109 = %99 to %107 step %104 iter_args(%110 = %105) -> (i32) {
//CHECK-NEXT:        %111 = arith.subi %109, %99 : index
//CHECK-NEXT:        %112 = arith.subi %97, %111 : index
//CHECK-NEXT:        %113 = arith.index_cast %112 : index to i32
//CHECK-NEXT:        memref.store %113, %3[] : memref<i32>
//CHECK-NEXT:        %114 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %115 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %116 = arith.subi %114, %115 : i32
//CHECK-NEXT:        memref.store %116, %2[] : memref<i32>
//CHECK-NEXT:        %117 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %118 = arith.index_cast %104 : index to i32
//CHECK-NEXT:        %119 = arith.addi %117, %118 : i32
//CHECK-NEXT:        scf.yield %119 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %108, %3[] : memref<i32>
//CHECK-NEXT:      %120 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %121 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %122 = arith.constant 4950 : i32
//CHECK-NEXT:        %123 = arith.cmpi eq, %121, %122 : i32
//CHECK-NEXT:        %124 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %123, %124[] : memref<i1>
//CHECK-NEXT:        %125 = arith.constant {{.*}} : index
//CHECK-NEXT:        %126 = arith.index_cast %125 : index to i64
//CHECK-NEXT:        %127 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %128 = "llvm.insertvalue"(%127, %120) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %129 = "llvm.insertvalue"(%128, %126) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %130 = arith.constant 40 : i32
//CHECK-NEXT:        %131 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %130, %131[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%124, %129, %131) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %132 = arith.constant 10000 : i32
//CHECK-NEXT:      memref.store %132, %2[] : memref<i32>
//CHECK-NEXT:      %133 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %134 = arith.index_cast %133 : i32 to index
//CHECK-NEXT:      %135 = arith.constant 1 : i32
//CHECK-NEXT:      %136 = arith.index_cast %135 : i32 to index
//CHECK-NEXT:      %137 = arith.constant -15 : i32
//CHECK-NEXT:      %138 = arith.index_cast %137 : i32 to index
//CHECK-NEXT:      %139 = arith.index_cast %138 : index to i64
//CHECK-NEXT:      %140 = math.absi %139 : i64
//CHECK-NEXT:      %141 = arith.index_cast %140 : i64 to index
//CHECK-NEXT:      %142 = arith.index_cast %134 : index to i32
//CHECK-NEXT:      %143 = arith.constant 1 : index
//CHECK-NEXT:      %144 = arith.addi %134, %143 : index
//CHECK-NEXT:      %145 = scf.for %146 = %136 to %144 step %141 iter_args(%147 = %142) -> (i32) {
//CHECK-NEXT:        %148 = arith.subi %146, %136 : index
//CHECK-NEXT:        %149 = arith.subi %134, %148 : index
//CHECK-NEXT:        %150 = arith.index_cast %149 : index to i32
//CHECK-NEXT:        memref.store %150, %3[] : memref<i32>
//CHECK-NEXT:        %151 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %152 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %153 = arith.subi %151, %152 : i32
//CHECK-NEXT:        memref.store %153, %2[] : memref<i32>
//CHECK-NEXT:        %154 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %155 = arith.index_cast %141 : index to i32
//CHECK-NEXT:        %156 = arith.addi %154, %155 : i32
//CHECK-NEXT:        scf.yield %156 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %145, %3[] : memref<i32>
//CHECK-NEXT:      %157 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %158 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %159 = arith.constant 9615 : i32
//CHECK-NEXT:        %160 = arith.cmpi eq, %158, %159 : i32
//CHECK-NEXT:        %161 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %160, %161[] : memref<i1>
//CHECK-NEXT:        %162 = arith.constant {{.*}} : index
//CHECK-NEXT:        %163 = arith.index_cast %162 : index to i64
//CHECK-NEXT:        %164 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %165 = "llvm.insertvalue"(%164, %157) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %166 = "llvm.insertvalue"(%165, %163) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %167 = arith.constant 47 : i32
//CHECK-NEXT:        %168 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %167, %168[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%161, %166, %168) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %169 = arith.constant 10000 : i32
//CHECK-NEXT:      memref.store %169, %2[] : memref<i32>
//CHECK-NEXT:      %170 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %171 = arith.constant 80 : i32
//CHECK-NEXT:      %172 = arith.subi %170, %171 : i32
//CHECK-NEXT:      %173 = arith.index_cast %172 : i32 to index
//CHECK-NEXT:      %174 = arith.constant 1 : i32
//CHECK-NEXT:      %175 = arith.index_cast %174 : i32 to index
//CHECK-NEXT:      %176 = arith.constant -1 : i32
//CHECK-NEXT:      %177 = arith.index_cast %176 : i32 to index
//CHECK-NEXT:      %178 = arith.index_cast %177 : index to i64
//CHECK-NEXT:      %179 = math.absi %178 : i64
//CHECK-NEXT:      %180 = arith.index_cast %179 : i64 to index
//CHECK-NEXT:      %181 = arith.index_cast %173 : index to i32
//CHECK-NEXT:      %182 = arith.constant 1 : index
//CHECK-NEXT:      %183 = arith.addi %173, %182 : index
//CHECK-NEXT:      %184 = scf.for %185 = %175 to %183 step %180 iter_args(%186 = %181) -> (i32) {
//CHECK-NEXT:        %187 = arith.subi %185, %175 : index
//CHECK-NEXT:        %188 = arith.subi %173, %187 : index
//CHECK-NEXT:        %189 = arith.index_cast %188 : index to i32
//CHECK-NEXT:        memref.store %189, %3[] : memref<i32>
//CHECK-NEXT:        %190 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %191 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %192 = arith.subi %190, %191 : i32
//CHECK-NEXT:        memref.store %192, %2[] : memref<i32>
//CHECK-NEXT:        %193 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %194 = arith.index_cast %180 : index to i32
//CHECK-NEXT:        %195 = arith.addi %193, %194 : i32
//CHECK-NEXT:        scf.yield %195 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %184, %3[] : memref<i32>
//CHECK-NEXT:      %196 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %197 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %198 = arith.constant 9790 : i32
//CHECK-NEXT:        %199 = arith.cmpi eq, %197, %198 : i32
//CHECK-NEXT:        %200 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %199, %200[] : memref<i1>
//CHECK-NEXT:        %201 = arith.constant {{.*}} : index
//CHECK-NEXT:        %202 = arith.index_cast %201 : index to i64
//CHECK-NEXT:        %203 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %204 = "llvm.insertvalue"(%203, %196) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %205 = "llvm.insertvalue"(%204, %202) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %206 = arith.constant 54 : i32
//CHECK-NEXT:        %207 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %206, %207[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%200, %205, %207) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %208 = arith.constant 0 : i32
//CHECK-NEXT:      memref.store %208, %2[] : memref<i32>
//CHECK-NEXT:      %209 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %210 = arith.constant 1 : i32
//CHECK-NEXT:      %211 = arith.subi %209, %210 : i32
//CHECK-NEXT:      %212 = arith.constant 1 : i32
//CHECK-NEXT:      %213 = arith.addi %211, %212 : i32
//CHECK-NEXT:      memref.store %213, %1[] : memref<i32>
//CHECK-NEXT:      memref.store %210, %3[] : memref<i32>
//CHECK-NEXT:      cf.br ^0
//CHECK-NEXT:    ^0:
//CHECK-NEXT:      %214 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %215 = arith.constant 0 : i32
//CHECK-NEXT:      %216 = arith.cmpi sgt, %214, %215 : i32
//CHECK-NEXT:      cf.cond_br %216, ^1, ^2
//CHECK-NEXT:    ^1:
//CHECK-NEXT:      %217 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %218 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %219 = arith.addi %217, %218 : i32
//CHECK-NEXT:      memref.store %219, %2[] : memref<i32>
//CHECK-NEXT:      %220 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %221 = arith.constant 10 : i32
//CHECK-NEXT:      %222 = arith.cmpi sgt, %220, %221 : i32
//CHECK-NEXT:      cf.cond_br %222, ^2, ^3
//CHECK-NEXT:    ^3:
//CHECK-NEXT:      %223 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %224 = arith.constant 1 : i32
//CHECK-NEXT:      %225 = arith.subi %223, %224 : i32
//CHECK-NEXT:      memref.store %225, %1[] : memref<i32>
//CHECK-NEXT:      %226 = memref.load %3[] : memref<i32>
//CHECK-NEXT:      %227 = arith.constant 1 : i32
//CHECK-NEXT:      %228 = arith.addi %226, %227 : i32
//CHECK-NEXT:      memref.store %228, %3[] : memref<i32>
//CHECK-NEXT:      cf.br ^0
//CHECK-NEXT:    ^2:
//CHECK-NEXT:      %229 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %230 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %231 = arith.constant 66 : i32
//CHECK-NEXT:        %232 = arith.cmpi eq, %230, %231 : i32
//CHECK-NEXT:        %233 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %232, %233[] : memref<i1>
//CHECK-NEXT:        %234 = arith.constant {{.*}} : index
//CHECK-NEXT:        %235 = arith.index_cast %234 : index to i64
//CHECK-NEXT:        %236 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %237 = "llvm.insertvalue"(%236, %229) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %238 = "llvm.insertvalue"(%237, %235) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %239 = arith.constant 62 : i32
//CHECK-NEXT:        %240 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %239, %240[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%233, %238, %240) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %241 = arith.constant 0 : i32
//CHECK-NEXT:      memref.store %241, %2[] : memref<i32>
//CHECK-NEXT:      %242 = arith.constant 1 : i32
//CHECK-NEXT:      %243 = arith.index_cast %242 : i32 to index
//CHECK-NEXT:      %244 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %245 = arith.index_cast %244 : i32 to index
//CHECK-NEXT:      %246 = arith.constant 1 : index
//CHECK-NEXT:      %247 = arith.index_cast %243 : index to i32
//CHECK-NEXT:      %248 = arith.constant 1 : index
//CHECK-NEXT:      %249 = arith.addi %245, %248 : index
//CHECK-NEXT:      %250 = arith.constant 20 : i32
//CHECK-NEXT:      %251 = arith.constant true
//CHECK-NEXT:      %252 = scf.for %253 = %243 to %249 step %246 iter_args(%254 = %247) -> (i32) {
//CHECK-NEXT:        memref.store %254, %3[] : memref<i32>
//CHECK-NEXT:        %255 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %256 = arith.cmpi sgt, %255, %250 : i32
//CHECK-NEXT:        %257 = arith.xori %256, %251 : i1
//CHECK-NEXT:        scf.if %257 {
//CHECK-NEXT:          %258 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %259 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %260 = arith.addi %258, %259 : i32
//CHECK-NEXT:          memref.store %260, %2[] : memref<i32>
//CHECK-NEXT:        } else {
//CHECK-NEXT:        }
//CHECK-NEXT:        %261 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %262 = arith.index_cast %246 : index to i32
//CHECK-NEXT:        %263 = arith.addi %261, %262 : i32
//CHECK-NEXT:        scf.yield %263 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %252, %3[] : memref<i32>
//CHECK-NEXT:      %264 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %265 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %266 = arith.constant 210 : i32
//CHECK-NEXT:        %267 = arith.cmpi eq, %265, %266 : i32
//CHECK-NEXT:        %268 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i1>
//CHECK-NEXT:        memref.store %267, %268[] : memref<i1>
//CHECK-NEXT:        %269 = arith.constant {{.*}} : index
//CHECK-NEXT:        %270 = arith.index_cast %269 : index to i64
//CHECK-NEXT:        %271 = "llvm.mlir.undef"() : () -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %272 = "llvm.insertvalue"(%271, %264) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>, !llvm.ptr) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %273 = "llvm.insertvalue"(%272, %270) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>, i64) -> !llvm.struct<(!llvm.ptr, i64)>
//CHECK-NEXT:        %274 = arith.constant 70 : i32
//CHECK-NEXT:        %275 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %274, %275[] : memref<i32>
//CHECK-NEXT:        func.call @_QPassert(%268, %273, %275) : (memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func private @_QPassert(memref<i1>, !llvm.struct<(!llvm.ptr, i64)>, memref<i32>) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
