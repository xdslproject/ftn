// RUN: xftn %S/../../../../examples/solvers/gauss_seidel_heap.F90 --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    func.func @_QMgauss_seidel_heap_modPmain() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf32>>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = arith.constant 512 : index
//CHECK-NEXT:      %6 = arith.constant 1024 : index
//CHECK-NEXT:      %7 = memref.alloc(%6, %5, %5) : memref<?x?x?xf32>
//CHECK-NEXT:      memref.store %7, %0[] : memref<memref<?x?x?xf32>>
//CHECK-NEXT:      %8 = arith.constant 1 : i32
//CHECK-NEXT:      %9 = arith.index_cast %8 : i32 to index
//CHECK-NEXT:      %10 = arith.index_cast %9 : index to i32
//CHECK-NEXT:      %11 = arith.constant 1 : index
//CHECK-NEXT:      %12 = arith.addi %9, %11 : index
//CHECK-NEXT:      %13 = arith.constant 2 : i32
//CHECK-NEXT:      %14 = arith.constant 1023 : i32
//CHECK-NEXT:      %15 = arith.constant 511 : i32
//CHECK-NEXT:      %16 = arith.constant 1.666600e-01 : f32
//CHECK-NEXT:      %17 = scf.for %18 = %9 to %12 step %9 iter_args(%19 = %10) -> (i32) {
//CHECK-NEXT:        memref.store %19, %3[] : memref<i32>
//CHECK-NEXT:        %20 = arith.index_cast %13 : i32 to index
//CHECK-NEXT:        %21 = arith.index_cast %14 : i32 to index
//CHECK-NEXT:        %22 = arith.index_cast %20 : index to i32
//CHECK-NEXT:        %23 = arith.addi %21, %11 : index
//CHECK-NEXT:        %24 = scf.for %25 = %20 to %23 step %9 iter_args(%26 = %22) -> (i32) {
//CHECK-NEXT:          memref.store %26, %4[] : memref<i32>
//CHECK-NEXT:          %27 = arith.index_cast %15 : i32 to index
//CHECK-NEXT:          %28 = arith.addi %27, %11 : index
//CHECK-NEXT:          %29 = scf.for %30 = %20 to %28 step %9 iter_args(%31 = %22) -> (i32) {
//CHECK-NEXT:            memref.store %31, %2[] : memref<i32>
//CHECK-NEXT:            %32 = scf.for %33 = %20 to %28 step %9 iter_args(%34 = %22) -> (i32) {
//CHECK-NEXT:              memref.store %34, %1[] : memref<i32>
//CHECK-NEXT:              %35 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %36 = arith.extui %35 : i32 to i64
//CHECK-NEXT:              %37 = arith.index_cast %36 : i64 to index
//CHECK-NEXT:              %38 = arith.subi %37, %11 : index
//CHECK-NEXT:              %39 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %40 = arith.subi %39, %8 : i32
//CHECK-NEXT:              %41 = arith.extui %40 : i32 to i64
//CHECK-NEXT:              %42 = arith.index_cast %41 : i64 to index
//CHECK-NEXT:              %43 = arith.subi %42, %11 : index
//CHECK-NEXT:              %44 = memref.load %4[] : memref<i32>
//CHECK-NEXT:              %45 = arith.extui %44 : i32 to i64
//CHECK-NEXT:              %46 = arith.index_cast %45 : i64 to index
//CHECK-NEXT:              %47 = arith.subi %46, %11 : index
//CHECK-NEXT:              %48 = memref.load %0[] : memref<memref<?x?x?xf32>>
//CHECK-NEXT:              %49 = memref.load %48[%47, %43, %38] : memref<?x?x?xf32>
//CHECK-NEXT:              %50 = arith.addi %39, %8 : i32
//CHECK-NEXT:              %51 = arith.extui %50 : i32 to i64
//CHECK-NEXT:              %52 = arith.index_cast %51 : i64 to index
//CHECK-NEXT:              %53 = arith.subi %52, %11 : index
//CHECK-NEXT:              %54 = memref.load %48[%47, %53, %38] : memref<?x?x?xf32>
//CHECK-NEXT:              %55 = arith.addf %49, %54 fastmath<contract> : f32
//CHECK-NEXT:              %56 = arith.subi %35, %8 : i32
//CHECK-NEXT:              %57 = arith.extui %56 : i32 to i64
//CHECK-NEXT:              %58 = arith.index_cast %57 : i64 to index
//CHECK-NEXT:              %59 = arith.subi %58, %11 : index
//CHECK-NEXT:              %60 = arith.extui %39 : i32 to i64
//CHECK-NEXT:              %61 = arith.index_cast %60 : i64 to index
//CHECK-NEXT:              %62 = arith.subi %61, %11 : index
//CHECK-NEXT:              %63 = memref.load %48[%47, %62, %59] : memref<?x?x?xf32>
//CHECK-NEXT:              %64 = arith.addf %55, %63 fastmath<contract> : f32
//CHECK-NEXT:              %65 = arith.addi %35, %8 : i32
//CHECK-NEXT:              %66 = arith.extui %65 : i32 to i64
//CHECK-NEXT:              %67 = arith.index_cast %66 : i64 to index
//CHECK-NEXT:              %68 = arith.subi %67, %11 : index
//CHECK-NEXT:              %69 = memref.load %48[%47, %62, %68] : memref<?x?x?xf32>
//CHECK-NEXT:              %70 = arith.addf %64, %69 fastmath<contract> : f32
//CHECK-NEXT:              %71 = arith.subi %44, %8 : i32
//CHECK-NEXT:              %72 = arith.extui %71 : i32 to i64
//CHECK-NEXT:              %73 = arith.index_cast %72 : i64 to index
//CHECK-NEXT:              %74 = arith.subi %73, %11 : index
//CHECK-NEXT:              %75 = memref.load %48[%74, %62, %38] : memref<?x?x?xf32>
//CHECK-NEXT:              %76 = arith.addf %70, %75 fastmath<contract> : f32
//CHECK-NEXT:              %77 = arith.addi %44, %8 : i32
//CHECK-NEXT:              %78 = arith.extui %77 : i32 to i64
//CHECK-NEXT:              %79 = arith.index_cast %78 : i64 to index
//CHECK-NEXT:              %80 = arith.subi %79, %11 : index
//CHECK-NEXT:              %81 = memref.load %48[%80, %62, %38] : memref<?x?x?xf32>
//CHECK-NEXT:              %82 = arith.addf %76, %81 fastmath<contract> : f32
//CHECK-NEXT:              %83 = arith.mulf %82, %16 fastmath<contract> : f32
//CHECK-NEXT:              memref.store %83, %48[%47, %62, %38] : memref<?x?x?xf32>
//CHECK-NEXT:              %84 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %85 = arith.addi %84, %10 : i32
//CHECK-NEXT:              scf.yield %85 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %32, %1[] : memref<i32>
//CHECK-NEXT:            %86 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %87 = arith.addi %86, %10 : i32
//CHECK-NEXT:            scf.yield %87 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %29, %2[] : memref<i32>
//CHECK-NEXT:          %88 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %89 = arith.addi %88, %10 : i32
//CHECK-NEXT:          scf.yield %89 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %24, %4[] : memref<i32>
//CHECK-NEXT:        %90 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %91 = arith.addi %90, %10 : i32
//CHECK-NEXT:        scf.yield %91 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %17, %3[] : memref<i32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMgauss_seidel_heap_modPmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
