// RUN: xftn %S/../../../../examples/solvers/gauss_seidel_stack.F90 --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    func.func @_QMgauss_seidel_stack_modPmain() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<256x256xf32>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = arith.constant 1 : i32
//CHECK-NEXT:      %5 = arith.index_cast %4 : i32 to index
//CHECK-NEXT:      %6 = arith.constant 1000 : i32
//CHECK-NEXT:      %7 = arith.index_cast %6 : i32 to index
//CHECK-NEXT:      %8 = arith.index_cast %5 : index to i32
//CHECK-NEXT:      %9 = arith.constant 1 : index
//CHECK-NEXT:      %10 = arith.addi %7, %9 : index
//CHECK-NEXT:      %11 = arith.constant 2 : i32
//CHECK-NEXT:      %12 = arith.constant 255 : i32
//CHECK-NEXT:      %13 = arith.constant 2.500000e-01 : f32
//CHECK-NEXT:      %14 = scf.for %15 = %5 to %10 step %5 iter_args(%16 = %8) -> (i32) {
//CHECK-NEXT:        memref.store %16, %3[] : memref<i32>
//CHECK-NEXT:        %17 = arith.index_cast %11 : i32 to index
//CHECK-NEXT:        %18 = arith.index_cast %12 : i32 to index
//CHECK-NEXT:        %19 = arith.index_cast %17 : index to i32
//CHECK-NEXT:        %20 = arith.addi %18, %9 : index
//CHECK-NEXT:        %21 = scf.for %22 = %17 to %20 step %5 iter_args(%23 = %19) -> (i32) {
//CHECK-NEXT:          memref.store %23, %1[] : memref<i32>
//CHECK-NEXT:          %24 = scf.for %25 = %17 to %20 step %5 iter_args(%26 = %19) -> (i32) {
//CHECK-NEXT:            memref.store %26, %2[] : memref<i32>
//CHECK-NEXT:            %27 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %28 = arith.extui %27 : i32 to i64
//CHECK-NEXT:            %29 = arith.index_cast %28 : i64 to index
//CHECK-NEXT:            %30 = arith.subi %29, %9 : index
//CHECK-NEXT:            %31 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %32 = arith.subi %31, %4 : i32
//CHECK-NEXT:            %33 = arith.extui %32 : i32 to i64
//CHECK-NEXT:            %34 = arith.index_cast %33 : i64 to index
//CHECK-NEXT:            %35 = arith.subi %34, %9 : index
//CHECK-NEXT:            %36 = memref.load %0[%35, %30] : memref<256x256xf32>
//CHECK-NEXT:            %37 = arith.addi %31, %4 : i32
//CHECK-NEXT:            %38 = arith.extui %37 : i32 to i64
//CHECK-NEXT:            %39 = arith.index_cast %38 : i64 to index
//CHECK-NEXT:            %40 = arith.subi %39, %9 : index
//CHECK-NEXT:            %41 = memref.load %0[%40, %30] : memref<256x256xf32>
//CHECK-NEXT:            %42 = arith.addf %36, %41 fastmath<contract> : f32
//CHECK-NEXT:            %43 = arith.subi %27, %4 : i32
//CHECK-NEXT:            %44 = arith.extui %43 : i32 to i64
//CHECK-NEXT:            %45 = arith.index_cast %44 : i64 to index
//CHECK-NEXT:            %46 = arith.subi %45, %9 : index
//CHECK-NEXT:            %47 = arith.extui %31 : i32 to i64
//CHECK-NEXT:            %48 = arith.index_cast %47 : i64 to index
//CHECK-NEXT:            %49 = arith.subi %48, %9 : index
//CHECK-NEXT:            %50 = memref.load %0[%49, %46] : memref<256x256xf32>
//CHECK-NEXT:            %51 = arith.addf %42, %50 fastmath<contract> : f32
//CHECK-NEXT:            %52 = arith.addi %27, %4 : i32
//CHECK-NEXT:            %53 = arith.extui %52 : i32 to i64
//CHECK-NEXT:            %54 = arith.index_cast %53 : i64 to index
//CHECK-NEXT:            %55 = arith.subi %54, %9 : index
//CHECK-NEXT:            %56 = memref.load %0[%49, %55] : memref<256x256xf32>
//CHECK-NEXT:            %57 = arith.addf %51, %56 fastmath<contract> : f32
//CHECK-NEXT:            %58 = arith.mulf %57, %13 fastmath<contract> : f32
//CHECK-NEXT:            memref.store %58, %0[%49, %30] : memref<256x256xf32>
//CHECK-NEXT:            %59 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %60 = arith.addi %59, %8 : i32
//CHECK-NEXT:            scf.yield %60 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %24, %2[] : memref<i32>
//CHECK-NEXT:          %61 = memref.load %1[] : memref<i32>
//CHECK-NEXT:          %62 = arith.addi %61, %8 : i32
//CHECK-NEXT:          scf.yield %62 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %21, %1[] : memref<i32>
//CHECK-NEXT:        %63 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %64 = arith.addi %63, %8 : i32
//CHECK-NEXT:        scf.yield %64 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %14, %3[] : memref<i32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMgauss_seidel_stack_modPmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
