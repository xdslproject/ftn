// RUN: xftn %S/../../../../examples/advection/tra_adv.F90 --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    func.func @_QMtra_adv_modPtra_adv() {
//CHECK-NEXT:      %0 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i64>
//CHECK-NEXT:      %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %6 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %8 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %9 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %10 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %11 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %12 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<f64>
//CHECK-NEXT:      %13 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?xf64>>
//CHECK-NEXT:      %14 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %15 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %16 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %17 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %18 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?xf64>>
//CHECK-NEXT:      %19 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %20 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %21 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %22 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %23 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?xf64>>
//CHECK-NEXT:      %24 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %25 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %26 = arith.constant 1024 : i32
//CHECK-NEXT:      memref.store %26, %4[] : memref<i32>
//CHECK-NEXT:      %27 = arith.constant 512 : i32
//CHECK-NEXT:      memref.store %27, %5[] : memref<i32>
//CHECK-NEXT:      %28 = arith.constant 512 : i32
//CHECK-NEXT:      memref.store %28, %6[] : memref<i32>
//CHECK-NEXT:      %29 = arith.constant 20 : i64
//CHECK-NEXT:      memref.store %29, %0[] : memref<i64>
//CHECK-NEXT:      %30 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %31 = arith.index_cast %30 : i32 to index
//CHECK-NEXT:      %32 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %33 = arith.index_cast %32 : i32 to index
//CHECK-NEXT:      %34 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %35 = arith.index_cast %34 : i32 to index
//CHECK-NEXT:      %36 = memref.alloc(%35, %33, %31) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %36, %16[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %37 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %38 = arith.index_cast %37 : i32 to index
//CHECK-NEXT:      %39 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %40 = arith.index_cast %39 : i32 to index
//CHECK-NEXT:      %41 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %42 = arith.index_cast %41 : i32 to index
//CHECK-NEXT:      %43 = memref.alloc(%42, %40, %38) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %43, %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %44 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %45 = arith.index_cast %44 : i32 to index
//CHECK-NEXT:      %46 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %47 = arith.index_cast %46 : i32 to index
//CHECK-NEXT:      %48 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %49 = arith.index_cast %48 : i32 to index
//CHECK-NEXT:      %50 = memref.alloc(%49, %47, %45) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %50, %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %51 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %52 = arith.index_cast %51 : i32 to index
//CHECK-NEXT:      %53 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %54 = arith.index_cast %53 : i32 to index
//CHECK-NEXT:      %55 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %56 = arith.index_cast %55 : i32 to index
//CHECK-NEXT:      %57 = memref.alloc(%56, %54, %52) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %57, %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %58 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %59 = arith.index_cast %58 : i32 to index
//CHECK-NEXT:      %60 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %61 = arith.index_cast %60 : i32 to index
//CHECK-NEXT:      %62 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %63 = arith.index_cast %62 : i32 to index
//CHECK-NEXT:      %64 = memref.alloc(%63, %61, %59) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %64, %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %65 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %66 = arith.index_cast %65 : i32 to index
//CHECK-NEXT:      %67 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %68 = arith.index_cast %67 : i32 to index
//CHECK-NEXT:      %69 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %70 = arith.index_cast %69 : i32 to index
//CHECK-NEXT:      %71 = memref.alloc(%70, %68, %66) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %71, %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %72 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %73 = arith.index_cast %72 : i32 to index
//CHECK-NEXT:      %74 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %75 = arith.index_cast %74 : i32 to index
//CHECK-NEXT:      %76 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %77 = arith.index_cast %76 : i32 to index
//CHECK-NEXT:      %78 = memref.alloc(%77, %75, %73) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %78, %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %79 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %80 = arith.index_cast %79 : i32 to index
//CHECK-NEXT:      %81 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %82 = arith.index_cast %81 : i32 to index
//CHECK-NEXT:      %83 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %84 = arith.index_cast %83 : i32 to index
//CHECK-NEXT:      %85 = memref.alloc(%84, %82, %80) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %85, %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %86 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %87 = arith.index_cast %86 : i32 to index
//CHECK-NEXT:      %88 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %89 = arith.index_cast %88 : i32 to index
//CHECK-NEXT:      %90 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %91 = arith.index_cast %90 : i32 to index
//CHECK-NEXT:      %92 = memref.alloc(%91, %89, %87) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %92, %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %93 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %94 = arith.index_cast %93 : i32 to index
//CHECK-NEXT:      %95 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %96 = arith.index_cast %95 : i32 to index
//CHECK-NEXT:      %97 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %98 = arith.index_cast %97 : i32 to index
//CHECK-NEXT:      %99 = memref.alloc(%98, %96, %94) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %99, %17[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %100 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %101 = arith.index_cast %100 : i32 to index
//CHECK-NEXT:      %102 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %103 = arith.index_cast %102 : i32 to index
//CHECK-NEXT:      %104 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %105 = arith.index_cast %104 : i32 to index
//CHECK-NEXT:      %106 = memref.alloc(%105, %103, %101) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %106, %19[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %107 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %108 = arith.index_cast %107 : i32 to index
//CHECK-NEXT:      %109 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %110 = arith.index_cast %109 : i32 to index
//CHECK-NEXT:      %111 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %112 = arith.index_cast %111 : i32 to index
//CHECK-NEXT:      %113 = memref.alloc(%112, %110, %108) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %113, %15[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %114 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %115 = arith.index_cast %114 : i32 to index
//CHECK-NEXT:      %116 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %117 = arith.index_cast %116 : i32 to index
//CHECK-NEXT:      %118 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %119 = arith.index_cast %118 : i32 to index
//CHECK-NEXT:      %120 = memref.alloc(%119, %117, %115) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %120, %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %121 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %122 = arith.index_cast %121 : i32 to index
//CHECK-NEXT:      %123 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %124 = arith.index_cast %123 : i32 to index
//CHECK-NEXT:      %125 = memref.alloc(%124, %122) : memref<?x?xf64>
//CHECK-NEXT:      memref.store %125, %23[] : memref<memref<?x?xf64>>
//CHECK-NEXT:      %126 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %127 = arith.index_cast %126 : i32 to index
//CHECK-NEXT:      %128 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %129 = arith.index_cast %128 : i32 to index
//CHECK-NEXT:      %130 = memref.alloc(%129, %127) : memref<?x?xf64>
//CHECK-NEXT:      memref.store %130, %13[] : memref<memref<?x?xf64>>
//CHECK-NEXT:      %131 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %132 = arith.index_cast %131 : i32 to index
//CHECK-NEXT:      %133 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %134 = arith.index_cast %133 : i32 to index
//CHECK-NEXT:      %135 = memref.alloc(%134, %132) : memref<?x?xf64>
//CHECK-NEXT:      memref.store %135, %18[] : memref<memref<?x?xf64>>
//CHECK-NEXT:      %136 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %137 = arith.index_cast %136 : i32 to index
//CHECK-NEXT:      %138 = memref.alloc(%137) : memref<?xf64>
//CHECK-NEXT:      memref.store %138, %14[] : memref<memref<?xf64>>
//CHECK-NEXT:      %139 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %140 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %141 = arith.muli %139, %140 : i32
//CHECK-NEXT:      %142 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %143 = arith.muli %141, %142 : i32
//CHECK-NEXT:      %144 = arith.sitofp %143 : i32 to f64
//CHECK-NEXT:      memref.store %144, %12[] : memref<f64>
//CHECK-NEXT:      %145 = arith.constant 6 : i32
//CHECK-NEXT:      %146 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %147 = "llvm.getelementptr"(%146) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %148 = arith.constant 62 : i32
//CHECK-NEXT:      %149 = func.call @_FortranAioBeginExternalListOutput(%145, %147, %148) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:      %150 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %151 = "llvm.getelementptr"(%150) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %152 = arith.constant 12 : index
//CHECK-NEXT:      %153 = arith.index_cast %152 : index to i64
//CHECK-NEXT:      %154 = func.call @_FortranAioOutputAscii(%149, %151, %153) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:      %155 = func.call @_FortranAioEndIoStatement(%149) : (!llvm.ptr) -> i32
//CHECK-NEXT:      %156 = arith.constant 1 : i32
//CHECK-NEXT:      %157 = arith.index_cast %156 : i32 to index
//CHECK-NEXT:      %158 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %159 = arith.index_cast %158 : i32 to index
//CHECK-NEXT:      %160 = arith.constant 1 : index
//CHECK-NEXT:      %161 = arith.index_cast %157 : index to i32
//CHECK-NEXT:      %162 = arith.constant 1 : index
//CHECK-NEXT:      %163 = arith.addi %159, %162 : index
//CHECK-NEXT:      %164 = scf.for %165 = %157 to %163 step %160 iter_args(%166 = %161) -> (i32) {
//CHECK-NEXT:        memref.store %166, %3[] : memref<i32>
//CHECK-NEXT:        %167 = arith.constant 1 : i32
//CHECK-NEXT:        %168 = arith.index_cast %167 : i32 to index
//CHECK-NEXT:        %169 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %170 = arith.index_cast %169 : i32 to index
//CHECK-NEXT:        %171 = arith.constant 1 : index
//CHECK-NEXT:        %172 = arith.index_cast %168 : index to i32
//CHECK-NEXT:        %173 = arith.constant 1 : index
//CHECK-NEXT:        %174 = arith.addi %170, %173 : index
//CHECK-NEXT:        %175 = scf.for %176 = %168 to %174 step %171 iter_args(%177 = %172) -> (i32) {
//CHECK-NEXT:          memref.store %177, %2[] : memref<i32>
//CHECK-NEXT:          %178 = arith.constant 1 : i32
//CHECK-NEXT:          %179 = arith.index_cast %178 : i32 to index
//CHECK-NEXT:          %180 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %181 = arith.index_cast %180 : i32 to index
//CHECK-NEXT:          %182 = arith.constant 1 : index
//CHECK-NEXT:          %183 = arith.index_cast %179 : index to i32
//CHECK-NEXT:          %184 = arith.constant 1 : index
//CHECK-NEXT:          %185 = arith.addi %181, %184 : index
//CHECK-NEXT:          %186 = scf.for %187 = %179 to %185 step %182 iter_args(%188 = %183) -> (i32) {
//CHECK-NEXT:            memref.store %188, %1[] : memref<i32>
//CHECK-NEXT:            %189 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %190 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %191 = arith.muli %189, %190 : i32
//CHECK-NEXT:            %192 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %193 = arith.muli %191, %192 : i32
//CHECK-NEXT:            %194 = arith.sitofp %193 : i32 to f64
//CHECK-NEXT:            %195 = memref.load %12[] : memref<f64>
//CHECK-NEXT:            %196 = arith.divf %194, %195 fastmath<contract> : f64
//CHECK-NEXT:            %197 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %198 = arith.extui %197 : i32 to i64
//CHECK-NEXT:            %199 = arith.index_cast %198 : i64 to index
//CHECK-NEXT:            %200 = arith.constant 1 : index
//CHECK-NEXT:            %201 = arith.subi %199, %200 : index
//CHECK-NEXT:            %202 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %203 = arith.extui %202 : i32 to i64
//CHECK-NEXT:            %204 = arith.index_cast %203 : i64 to index
//CHECK-NEXT:            %205 = arith.constant 1 : index
//CHECK-NEXT:            %206 = arith.subi %204, %205 : index
//CHECK-NEXT:            %207 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %208 = arith.extui %207 : i32 to i64
//CHECK-NEXT:            %209 = arith.index_cast %208 : i64 to index
//CHECK-NEXT:            %210 = arith.constant 1 : index
//CHECK-NEXT:            %211 = arith.subi %209, %210 : index
//CHECK-NEXT:            %212 = memref.load %17[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %196, %212[%211, %206, %201] : memref<?x?x?xf64>
//CHECK-NEXT:            %213 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %214 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %215 = arith.muli %213, %214 : i32
//CHECK-NEXT:            %216 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %217 = arith.muli %215, %216 : i32
//CHECK-NEXT:            %218 = arith.sitofp %217 : i32 to f64
//CHECK-NEXT:            %219 = memref.load %12[] : memref<f64>
//CHECK-NEXT:            %220 = arith.divf %218, %219 fastmath<contract> : f64
//CHECK-NEXT:            %221 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %222 = arith.extui %221 : i32 to i64
//CHECK-NEXT:            %223 = arith.index_cast %222 : i64 to index
//CHECK-NEXT:            %224 = arith.constant 1 : index
//CHECK-NEXT:            %225 = arith.subi %223, %224 : index
//CHECK-NEXT:            %226 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %227 = arith.extui %226 : i32 to i64
//CHECK-NEXT:            %228 = arith.index_cast %227 : i64 to index
//CHECK-NEXT:            %229 = arith.constant 1 : index
//CHECK-NEXT:            %230 = arith.subi %228, %229 : index
//CHECK-NEXT:            %231 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %232 = arith.extui %231 : i32 to i64
//CHECK-NEXT:            %233 = arith.index_cast %232 : i64 to index
//CHECK-NEXT:            %234 = arith.constant 1 : index
//CHECK-NEXT:            %235 = arith.subi %233, %234 : index
//CHECK-NEXT:            %236 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %220, %236[%235, %230, %225] : memref<?x?x?xf64>
//CHECK-NEXT:            %237 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %238 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %239 = arith.muli %237, %238 : i32
//CHECK-NEXT:            %240 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %241 = arith.muli %239, %240 : i32
//CHECK-NEXT:            %242 = arith.sitofp %241 : i32 to f64
//CHECK-NEXT:            %243 = memref.load %12[] : memref<f64>
//CHECK-NEXT:            %244 = arith.divf %242, %243 fastmath<contract> : f64
//CHECK-NEXT:            %245 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %246 = arith.extui %245 : i32 to i64
//CHECK-NEXT:            %247 = arith.index_cast %246 : i64 to index
//CHECK-NEXT:            %248 = arith.constant 1 : index
//CHECK-NEXT:            %249 = arith.subi %247, %248 : index
//CHECK-NEXT:            %250 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %251 = arith.extui %250 : i32 to i64
//CHECK-NEXT:            %252 = arith.index_cast %251 : i64 to index
//CHECK-NEXT:            %253 = arith.constant 1 : index
//CHECK-NEXT:            %254 = arith.subi %252, %253 : index
//CHECK-NEXT:            %255 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %256 = arith.extui %255 : i32 to i64
//CHECK-NEXT:            %257 = arith.index_cast %256 : i64 to index
//CHECK-NEXT:            %258 = arith.constant 1 : index
//CHECK-NEXT:            %259 = arith.subi %257, %258 : index
//CHECK-NEXT:            %260 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %244, %260[%259, %254, %249] : memref<?x?x?xf64>
//CHECK-NEXT:            %261 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %262 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %263 = arith.muli %261, %262 : i32
//CHECK-NEXT:            %264 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %265 = arith.muli %263, %264 : i32
//CHECK-NEXT:            %266 = arith.sitofp %265 : i32 to f64
//CHECK-NEXT:            %267 = memref.load %12[] : memref<f64>
//CHECK-NEXT:            %268 = arith.divf %266, %267 fastmath<contract> : f64
//CHECK-NEXT:            %269 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %270 = arith.extui %269 : i32 to i64
//CHECK-NEXT:            %271 = arith.index_cast %270 : i64 to index
//CHECK-NEXT:            %272 = arith.constant 1 : index
//CHECK-NEXT:            %273 = arith.subi %271, %272 : index
//CHECK-NEXT:            %274 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %275 = arith.extui %274 : i32 to i64
//CHECK-NEXT:            %276 = arith.index_cast %275 : i64 to index
//CHECK-NEXT:            %277 = arith.constant 1 : index
//CHECK-NEXT:            %278 = arith.subi %276, %277 : index
//CHECK-NEXT:            %279 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %280 = arith.extui %279 : i32 to i64
//CHECK-NEXT:            %281 = arith.index_cast %280 : i64 to index
//CHECK-NEXT:            %282 = arith.constant 1 : index
//CHECK-NEXT:            %283 = arith.subi %281, %282 : index
//CHECK-NEXT:            %284 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %268, %284[%283, %278, %273] : memref<?x?x?xf64>
//CHECK-NEXT:            %285 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %286 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %287 = arith.muli %285, %286 : i32
//CHECK-NEXT:            %288 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %289 = arith.muli %287, %288 : i32
//CHECK-NEXT:            %290 = arith.sitofp %289 : i32 to f64
//CHECK-NEXT:            %291 = memref.load %12[] : memref<f64>
//CHECK-NEXT:            %292 = arith.divf %290, %291 fastmath<contract> : f64
//CHECK-NEXT:            %293 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %294 = arith.extui %293 : i32 to i64
//CHECK-NEXT:            %295 = arith.index_cast %294 : i64 to index
//CHECK-NEXT:            %296 = arith.constant 1 : index
//CHECK-NEXT:            %297 = arith.subi %295, %296 : index
//CHECK-NEXT:            %298 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %299 = arith.extui %298 : i32 to i64
//CHECK-NEXT:            %300 = arith.index_cast %299 : i64 to index
//CHECK-NEXT:            %301 = arith.constant 1 : index
//CHECK-NEXT:            %302 = arith.subi %300, %301 : index
//CHECK-NEXT:            %303 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %304 = arith.extui %303 : i32 to i64
//CHECK-NEXT:            %305 = arith.index_cast %304 : i64 to index
//CHECK-NEXT:            %306 = arith.constant 1 : index
//CHECK-NEXT:            %307 = arith.subi %305, %306 : index
//CHECK-NEXT:            %308 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %292, %308[%307, %302, %297] : memref<?x?x?xf64>
//CHECK-NEXT:            %309 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %310 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %311 = arith.muli %309, %310 : i32
//CHECK-NEXT:            %312 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %313 = arith.muli %311, %312 : i32
//CHECK-NEXT:            %314 = arith.sitofp %313 : i32 to f64
//CHECK-NEXT:            %315 = memref.load %12[] : memref<f64>
//CHECK-NEXT:            %316 = arith.divf %314, %315 fastmath<contract> : f64
//CHECK-NEXT:            %317 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %318 = arith.extui %317 : i32 to i64
//CHECK-NEXT:            %319 = arith.index_cast %318 : i64 to index
//CHECK-NEXT:            %320 = arith.constant 1 : index
//CHECK-NEXT:            %321 = arith.subi %319, %320 : index
//CHECK-NEXT:            %322 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %323 = arith.extui %322 : i32 to i64
//CHECK-NEXT:            %324 = arith.index_cast %323 : i64 to index
//CHECK-NEXT:            %325 = arith.constant 1 : index
//CHECK-NEXT:            %326 = arith.subi %324, %325 : index
//CHECK-NEXT:            %327 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %328 = arith.extui %327 : i32 to i64
//CHECK-NEXT:            %329 = arith.index_cast %328 : i64 to index
//CHECK-NEXT:            %330 = arith.constant 1 : index
//CHECK-NEXT:            %331 = arith.subi %329, %330 : index
//CHECK-NEXT:            %332 = memref.load %19[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %316, %332[%331, %326, %321] : memref<?x?x?xf64>
//CHECK-NEXT:            %333 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %334 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %335 = arith.muli %333, %334 : i32
//CHECK-NEXT:            %336 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %337 = arith.muli %335, %336 : i32
//CHECK-NEXT:            %338 = arith.sitofp %337 : i32 to f64
//CHECK-NEXT:            %339 = memref.load %12[] : memref<f64>
//CHECK-NEXT:            %340 = arith.divf %338, %339 fastmath<contract> : f64
//CHECK-NEXT:            %341 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %342 = arith.extui %341 : i32 to i64
//CHECK-NEXT:            %343 = arith.index_cast %342 : i64 to index
//CHECK-NEXT:            %344 = arith.constant 1 : index
//CHECK-NEXT:            %345 = arith.subi %343, %344 : index
//CHECK-NEXT:            %346 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %347 = arith.extui %346 : i32 to i64
//CHECK-NEXT:            %348 = arith.index_cast %347 : i64 to index
//CHECK-NEXT:            %349 = arith.constant 1 : index
//CHECK-NEXT:            %350 = arith.subi %348, %349 : index
//CHECK-NEXT:            %351 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %352 = arith.extui %351 : i32 to i64
//CHECK-NEXT:            %353 = arith.index_cast %352 : i64 to index
//CHECK-NEXT:            %354 = arith.constant 1 : index
//CHECK-NEXT:            %355 = arith.subi %353, %354 : index
//CHECK-NEXT:            %356 = memref.load %16[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %340, %356[%355, %350, %345] : memref<?x?x?xf64>
//CHECK-NEXT:            %357 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %358 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %359 = arith.muli %357, %358 : i32
//CHECK-NEXT:            %360 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %361 = arith.muli %359, %360 : i32
//CHECK-NEXT:            %362 = arith.sitofp %361 : i32 to f64
//CHECK-NEXT:            %363 = memref.load %12[] : memref<f64>
//CHECK-NEXT:            %364 = arith.divf %362, %363 fastmath<contract> : f64
//CHECK-NEXT:            %365 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %366 = arith.extui %365 : i32 to i64
//CHECK-NEXT:            %367 = arith.index_cast %366 : i64 to index
//CHECK-NEXT:            %368 = arith.constant 1 : index
//CHECK-NEXT:            %369 = arith.subi %367, %368 : index
//CHECK-NEXT:            %370 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %371 = arith.extui %370 : i32 to i64
//CHECK-NEXT:            %372 = arith.index_cast %371 : i64 to index
//CHECK-NEXT:            %373 = arith.constant 1 : index
//CHECK-NEXT:            %374 = arith.subi %372, %373 : index
//CHECK-NEXT:            %375 = memref.load %3[] : memref<i32>
//CHECK-NEXT:            %376 = arith.extui %375 : i32 to i64
//CHECK-NEXT:            %377 = arith.index_cast %376 : i64 to index
//CHECK-NEXT:            %378 = arith.constant 1 : index
//CHECK-NEXT:            %379 = arith.subi %377, %378 : index
//CHECK-NEXT:            %380 = memref.load %15[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %364, %380[%379, %374, %369] : memref<?x?x?xf64>
//CHECK-NEXT:            %381 = arith.addi %187, %182 : index
//CHECK-NEXT:            %382 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %383 = arith.index_cast %182 : index to i32
//CHECK-NEXT:            %384 = arith.addi %382, %383 : i32
//CHECK-NEXT:            scf.yield %384 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %186, %1[] : memref<i32>
//CHECK-NEXT:          %385 = arith.addi %176, %171 : index
//CHECK-NEXT:          %386 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %387 = arith.index_cast %171 : index to i32
//CHECK-NEXT:          %388 = arith.addi %386, %387 : i32
//CHECK-NEXT:          scf.yield %388 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %175, %2[] : memref<i32>
//CHECK-NEXT:        %389 = arith.addi %165, %160 : index
//CHECK-NEXT:        %390 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %391 = arith.index_cast %160 : index to i32
//CHECK-NEXT:        %392 = arith.addi %390, %391 : i32
//CHECK-NEXT:        scf.yield %392 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %164, %3[] : memref<i32>
//CHECK-NEXT:      %393 = memref.load %4[] : memref<i32>
//CHECK-NEXT:      %394 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %395 = arith.muli %393, %394 : i32
//CHECK-NEXT:      %396 = arith.sitofp %395 : i32 to f64
//CHECK-NEXT:      memref.store %396, %12[] : memref<f64>
//CHECK-NEXT:      %397 = arith.constant 1 : i32
//CHECK-NEXT:      %398 = arith.index_cast %397 : i32 to index
//CHECK-NEXT:      %399 = memref.load %5[] : memref<i32>
//CHECK-NEXT:      %400 = arith.index_cast %399 : i32 to index
//CHECK-NEXT:      %401 = arith.constant 1 : index
//CHECK-NEXT:      %402 = arith.index_cast %398 : index to i32
//CHECK-NEXT:      %403 = arith.constant 1 : index
//CHECK-NEXT:      %404 = arith.addi %400, %403 : index
//CHECK-NEXT:      %405 = scf.for %406 = %398 to %404 step %401 iter_args(%407 = %402) -> (i32) {
//CHECK-NEXT:        memref.store %407, %2[] : memref<i32>
//CHECK-NEXT:        %408 = arith.constant 1 : i32
//CHECK-NEXT:        %409 = arith.index_cast %408 : i32 to index
//CHECK-NEXT:        %410 = memref.load %4[] : memref<i32>
//CHECK-NEXT:        %411 = arith.index_cast %410 : i32 to index
//CHECK-NEXT:        %412 = arith.constant 1 : index
//CHECK-NEXT:        %413 = arith.index_cast %409 : index to i32
//CHECK-NEXT:        %414 = arith.constant 1 : index
//CHECK-NEXT:        %415 = arith.addi %411, %414 : index
//CHECK-NEXT:        %416 = scf.for %417 = %409 to %415 step %412 iter_args(%418 = %413) -> (i32) {
//CHECK-NEXT:          memref.store %418, %1[] : memref<i32>
//CHECK-NEXT:          %419 = memref.load %1[] : memref<i32>
//CHECK-NEXT:          %420 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %421 = arith.muli %419, %420 : i32
//CHECK-NEXT:          %422 = arith.sitofp %421 : i32 to f64
//CHECK-NEXT:          %423 = memref.load %12[] : memref<f64>
//CHECK-NEXT:          %424 = arith.divf %422, %423 fastmath<contract> : f64
//CHECK-NEXT:          %425 = memref.load %1[] : memref<i32>
//CHECK-NEXT:          %426 = arith.extui %425 : i32 to i64
//CHECK-NEXT:          %427 = arith.index_cast %426 : i64 to index
//CHECK-NEXT:          %428 = arith.constant 1 : index
//CHECK-NEXT:          %429 = arith.subi %427, %428 : index
//CHECK-NEXT:          %430 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %431 = arith.extui %430 : i32 to i64
//CHECK-NEXT:          %432 = arith.index_cast %431 : i64 to index
//CHECK-NEXT:          %433 = arith.constant 1 : index
//CHECK-NEXT:          %434 = arith.subi %432, %433 : index
//CHECK-NEXT:          %435 = memref.load %23[] : memref<memref<?x?xf64>>
//CHECK-NEXT:          memref.store %424, %435[%434, %429] : memref<?x?xf64>
//CHECK-NEXT:          %436 = memref.load %1[] : memref<i32>
//CHECK-NEXT:          %437 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %438 = arith.muli %436, %437 : i32
//CHECK-NEXT:          %439 = arith.sitofp %438 : i32 to f64
//CHECK-NEXT:          %440 = memref.load %12[] : memref<f64>
//CHECK-NEXT:          %441 = arith.divf %439, %440 fastmath<contract> : f64
//CHECK-NEXT:          %442 = memref.load %1[] : memref<i32>
//CHECK-NEXT:          %443 = arith.extui %442 : i32 to i64
//CHECK-NEXT:          %444 = arith.index_cast %443 : i64 to index
//CHECK-NEXT:          %445 = arith.constant 1 : index
//CHECK-NEXT:          %446 = arith.subi %444, %445 : index
//CHECK-NEXT:          %447 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %448 = arith.extui %447 : i32 to i64
//CHECK-NEXT:          %449 = arith.index_cast %448 : i64 to index
//CHECK-NEXT:          %450 = arith.constant 1 : index
//CHECK-NEXT:          %451 = arith.subi %449, %450 : index
//CHECK-NEXT:          %452 = memref.load %18[] : memref<memref<?x?xf64>>
//CHECK-NEXT:          memref.store %441, %452[%451, %446] : memref<?x?xf64>
//CHECK-NEXT:          %453 = memref.load %1[] : memref<i32>
//CHECK-NEXT:          %454 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %455 = arith.muli %453, %454 : i32
//CHECK-NEXT:          %456 = arith.sitofp %455 : i32 to f64
//CHECK-NEXT:          %457 = memref.load %12[] : memref<f64>
//CHECK-NEXT:          %458 = arith.divf %456, %457 fastmath<contract> : f64
//CHECK-NEXT:          %459 = memref.load %1[] : memref<i32>
//CHECK-NEXT:          %460 = arith.extui %459 : i32 to i64
//CHECK-NEXT:          %461 = arith.index_cast %460 : i64 to index
//CHECK-NEXT:          %462 = arith.constant 1 : index
//CHECK-NEXT:          %463 = arith.subi %461, %462 : index
//CHECK-NEXT:          %464 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %465 = arith.extui %464 : i32 to i64
//CHECK-NEXT:          %466 = arith.index_cast %465 : i64 to index
//CHECK-NEXT:          %467 = arith.constant 1 : index
//CHECK-NEXT:          %468 = arith.subi %466, %467 : index
//CHECK-NEXT:          %469 = memref.load %13[] : memref<memref<?x?xf64>>
//CHECK-NEXT:          memref.store %458, %469[%468, %463] : memref<?x?xf64>
//CHECK-NEXT:          %470 = arith.addi %417, %412 : index
//CHECK-NEXT:          %471 = memref.load %1[] : memref<i32>
//CHECK-NEXT:          %472 = arith.index_cast %412 : index to i32
//CHECK-NEXT:          %473 = arith.addi %471, %472 : i32
//CHECK-NEXT:          scf.yield %473 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %416, %1[] : memref<i32>
//CHECK-NEXT:        %474 = arith.addi %406, %401 : index
//CHECK-NEXT:        %475 = memref.load %2[] : memref<i32>
//CHECK-NEXT:        %476 = arith.index_cast %401 : index to i32
//CHECK-NEXT:        %477 = arith.addi %475, %476 : i32
//CHECK-NEXT:        scf.yield %477 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %405, %2[] : memref<i32>
//CHECK-NEXT:      %478 = arith.constant 1 : i32
//CHECK-NEXT:      %479 = arith.index_cast %478 : i32 to index
//CHECK-NEXT:      %480 = memref.load %6[] : memref<i32>
//CHECK-NEXT:      %481 = arith.index_cast %480 : i32 to index
//CHECK-NEXT:      %482 = arith.constant 1 : index
//CHECK-NEXT:      %483 = arith.index_cast %479 : index to i32
//CHECK-NEXT:      %484 = arith.constant 1 : index
//CHECK-NEXT:      %485 = arith.addi %481, %484 : index
//CHECK-NEXT:      %486 = scf.for %487 = %479 to %485 step %482 iter_args(%488 = %483) -> (i32) {
//CHECK-NEXT:        memref.store %488, %3[] : memref<i32>
//CHECK-NEXT:        %489 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %490 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %491 = arith.divsi %489, %490 : i32
//CHECK-NEXT:        %492 = arith.sitofp %491 : i32 to f64
//CHECK-NEXT:        %493 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %494 = arith.extui %493 : i32 to i64
//CHECK-NEXT:        %495 = arith.index_cast %494 : i64 to index
//CHECK-NEXT:        %496 = arith.constant 1 : index
//CHECK-NEXT:        %497 = arith.subi %495, %496 : index
//CHECK-NEXT:        %498 = memref.load %14[] : memref<memref<?xf64>>
//CHECK-NEXT:        memref.store %492, %498[%497] : memref<?xf64>
//CHECK-NEXT:        %499 = arith.addi %487, %482 : index
//CHECK-NEXT:        %500 = memref.load %3[] : memref<i32>
//CHECK-NEXT:        %501 = arith.index_cast %482 : index to i32
//CHECK-NEXT:        %502 = arith.addi %500, %501 : i32
//CHECK-NEXT:        scf.yield %502 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %486, %3[] : memref<i32>
//CHECK-NEXT:      %503 = arith.constant 1 : i32
//CHECK-NEXT:      %504 = arith.index_cast %503 : i32 to index
//CHECK-NEXT:      %505 = memref.load %0[] : memref<i64>
//CHECK-NEXT:      %506 = arith.index_cast %505 : i64 to index
//CHECK-NEXT:      %507 = arith.constant 1 : index
//CHECK-NEXT:      %508 = arith.index_cast %504 : index to i32
//CHECK-NEXT:      %509 = arith.constant 1 : index
//CHECK-NEXT:      %510 = arith.addi %506, %509 : index
//CHECK-NEXT:      %511 = scf.for %512 = %504 to %510 step %507 iter_args(%513 = %508) -> (i32) {
//CHECK-NEXT:        memref.store %513, %7[] : memref<i32>
//CHECK-NEXT:        %514 = arith.constant 6 : i32
//CHECK-NEXT:        %515 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %516 = "llvm.getelementptr"(%515) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %517 = arith.constant 98 : i32
//CHECK-NEXT:        %518 = func.call @_FortranAioBeginExternalListOutput(%514, %516, %517) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:        %519 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %520 = "llvm.getelementptr"(%519) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %521 = arith.constant 19 : index
//CHECK-NEXT:        %522 = arith.index_cast %521 : index to i64
//CHECK-NEXT:        %523 = func.call @_FortranAioOutputAscii(%518, %520, %522) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %524 = memref.load %7[] : memref<i32>
//CHECK-NEXT:        %525 = func.call @_FortranAioOutputInteger32(%518, %524) : (!llvm.ptr, i32) -> i1
//CHECK-NEXT:        %526 = func.call @_FortranAioEndIoStatement(%518) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %527 = arith.constant 1 : i32
//CHECK-NEXT:        %528 = arith.index_cast %527 : i32 to index
//CHECK-NEXT:        %529 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %530 = arith.index_cast %529 : i32 to index
//CHECK-NEXT:        %531 = arith.constant 1 : index
//CHECK-NEXT:        %532 = arith.index_cast %528 : index to i32
//CHECK-NEXT:        %533 = arith.constant 1 : index
//CHECK-NEXT:        %534 = arith.addi %530, %533 : index
//CHECK-NEXT:        %535 = scf.for %536 = %528 to %534 step %531 iter_args(%537 = %532) -> (i32) {
//CHECK-NEXT:          memref.store %537, %3[] : memref<i32>
//CHECK-NEXT:          %538 = arith.constant 1 : i32
//CHECK-NEXT:          %539 = arith.index_cast %538 : i32 to index
//CHECK-NEXT:          %540 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %541 = arith.index_cast %540 : i32 to index
//CHECK-NEXT:          %542 = arith.constant 1 : index
//CHECK-NEXT:          %543 = arith.index_cast %539 : index to i32
//CHECK-NEXT:          %544 = arith.constant 1 : index
//CHECK-NEXT:          %545 = arith.addi %541, %544 : index
//CHECK-NEXT:          %546 = scf.for %547 = %539 to %545 step %542 iter_args(%548 = %543) -> (i32) {
//CHECK-NEXT:            memref.store %548, %2[] : memref<i32>
//CHECK-NEXT:            %549 = arith.constant 1 : i32
//CHECK-NEXT:            %550 = arith.index_cast %549 : i32 to index
//CHECK-NEXT:            %551 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %552 = arith.index_cast %551 : i32 to index
//CHECK-NEXT:            %553 = arith.constant 1 : index
//CHECK-NEXT:            %554 = arith.index_cast %550 : index to i32
//CHECK-NEXT:            %555 = arith.constant 1 : index
//CHECK-NEXT:            %556 = arith.addi %552, %555 : index
//CHECK-NEXT:            %557 = scf.for %558 = %550 to %556 step %553 iter_args(%559 = %554) -> (i32) {
//CHECK-NEXT:              memref.store %559, %1[] : memref<i32>
//CHECK-NEXT:              %560 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %561 = arith.extui %560 : i32 to i64
//CHECK-NEXT:              %562 = arith.index_cast %561 : i64 to index
//CHECK-NEXT:              %563 = arith.constant 1 : index
//CHECK-NEXT:              %564 = arith.subi %562, %563 : index
//CHECK-NEXT:              %565 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %566 = arith.extui %565 : i32 to i64
//CHECK-NEXT:              %567 = arith.index_cast %566 : i64 to index
//CHECK-NEXT:              %568 = arith.constant 1 : index
//CHECK-NEXT:              %569 = arith.subi %567, %568 : index
//CHECK-NEXT:              %570 = memref.load %13[] : memref<memref<?x?xf64>>
//CHECK-NEXT:              %571 = memref.load %570[%569, %564] : memref<?x?xf64>
//CHECK-NEXT:              %572 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %573 = arith.extui %572 : i32 to i64
//CHECK-NEXT:              %574 = arith.index_cast %573 : i64 to index
//CHECK-NEXT:              %575 = arith.constant 1 : index
//CHECK-NEXT:              %576 = arith.subi %574, %575 : index
//CHECK-NEXT:              %577 = memref.load %14[] : memref<memref<?xf64>>
//CHECK-NEXT:              %578 = memref.load %577[%576] : memref<?xf64>
//CHECK-NEXT:              %579 = arith.mulf %571, %578 fastmath<contract> : f64
//CHECK-NEXT:              %580 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %581 = arith.extui %580 : i32 to i64
//CHECK-NEXT:              %582 = arith.index_cast %581 : i64 to index
//CHECK-NEXT:              %583 = arith.constant 1 : index
//CHECK-NEXT:              %584 = arith.subi %582, %583 : index
//CHECK-NEXT:              %585 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %586 = arith.extui %585 : i32 to i64
//CHECK-NEXT:              %587 = arith.index_cast %586 : i64 to index
//CHECK-NEXT:              %588 = arith.constant 1 : index
//CHECK-NEXT:              %589 = arith.subi %587, %588 : index
//CHECK-NEXT:              %590 = memref.load %18[] : memref<memref<?x?xf64>>
//CHECK-NEXT:              %591 = memref.load %590[%589, %584] : memref<?x?xf64>
//CHECK-NEXT:              %592 = arith.cmpf ogt, %579, %591 : f64
//CHECK-NEXT:              %593 = arith.select %592, %579, %591 : f64
//CHECK-NEXT:              %594 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %595 = arith.extui %594 : i32 to i64
//CHECK-NEXT:              %596 = arith.index_cast %595 : i64 to index
//CHECK-NEXT:              %597 = arith.constant 1 : index
//CHECK-NEXT:              %598 = arith.subi %596, %597 : index
//CHECK-NEXT:              %599 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %600 = arith.extui %599 : i32 to i64
//CHECK-NEXT:              %601 = arith.index_cast %600 : i64 to index
//CHECK-NEXT:              %602 = arith.constant 1 : index
//CHECK-NEXT:              %603 = arith.subi %601, %602 : index
//CHECK-NEXT:              %604 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %605 = arith.extui %604 : i32 to i64
//CHECK-NEXT:              %606 = arith.index_cast %605 : i64 to index
//CHECK-NEXT:              %607 = arith.constant 1 : index
//CHECK-NEXT:              %608 = arith.subi %606, %607 : index
//CHECK-NEXT:              %609 = memref.load %15[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %610 = memref.load %609[%608, %603, %598] : memref<?x?x?xf64>
//CHECK-NEXT:              %611 = arith.mulf %593, %610 fastmath<contract> : f64
//CHECK-NEXT:              %612 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %613 = arith.extui %612 : i32 to i64
//CHECK-NEXT:              %614 = arith.index_cast %613 : i64 to index
//CHECK-NEXT:              %615 = arith.constant 1 : index
//CHECK-NEXT:              %616 = arith.subi %614, %615 : index
//CHECK-NEXT:              %617 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %618 = arith.extui %617 : i32 to i64
//CHECK-NEXT:              %619 = arith.index_cast %618 : i64 to index
//CHECK-NEXT:              %620 = arith.constant 1 : index
//CHECK-NEXT:              %621 = arith.subi %619, %620 : index
//CHECK-NEXT:              %622 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %623 = arith.extui %622 : i32 to i64
//CHECK-NEXT:              %624 = arith.index_cast %623 : i64 to index
//CHECK-NEXT:              %625 = arith.constant 1 : index
//CHECK-NEXT:              %626 = arith.subi %624, %625 : index
//CHECK-NEXT:              %627 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %611, %627[%626, %621, %616] : memref<?x?x?xf64>
//CHECK-NEXT:              %628 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %629 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %630 = arith.extui %629 : i32 to i64
//CHECK-NEXT:              %631 = arith.index_cast %630 : i64 to index
//CHECK-NEXT:              %632 = arith.constant 1 : index
//CHECK-NEXT:              %633 = arith.subi %631, %632 : index
//CHECK-NEXT:              %634 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %635 = arith.extui %634 : i32 to i64
//CHECK-NEXT:              %636 = arith.index_cast %635 : i64 to index
//CHECK-NEXT:              %637 = arith.constant 1 : index
//CHECK-NEXT:              %638 = arith.subi %636, %637 : index
//CHECK-NEXT:              %639 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %640 = arith.extui %639 : i32 to i64
//CHECK-NEXT:              %641 = arith.index_cast %640 : i64 to index
//CHECK-NEXT:              %642 = arith.constant 1 : index
//CHECK-NEXT:              %643 = arith.subi %641, %642 : index
//CHECK-NEXT:              %644 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %645 = memref.load %644[%643, %638, %633] : memref<?x?x?xf64>
//CHECK-NEXT:              %646 = arith.subf %628, %645 fastmath<contract> : f64
//CHECK-NEXT:              %647 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %648 = arith.extui %647 : i32 to i64
//CHECK-NEXT:              %649 = arith.index_cast %648 : i64 to index
//CHECK-NEXT:              %650 = arith.constant 1 : index
//CHECK-NEXT:              %651 = arith.subi %649, %650 : index
//CHECK-NEXT:              %652 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %653 = arith.extui %652 : i32 to i64
//CHECK-NEXT:              %654 = arith.index_cast %653 : i64 to index
//CHECK-NEXT:              %655 = arith.constant 1 : index
//CHECK-NEXT:              %656 = arith.subi %654, %655 : index
//CHECK-NEXT:              %657 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %658 = arith.extui %657 : i32 to i64
//CHECK-NEXT:              %659 = arith.index_cast %658 : i64 to index
//CHECK-NEXT:              %660 = arith.constant 1 : index
//CHECK-NEXT:              %661 = arith.subi %659, %660 : index
//CHECK-NEXT:              %662 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %646, %662[%661, %656, %651] : memref<?x?x?xf64>
//CHECK-NEXT:              %663 = arith.addi %558, %553 : index
//CHECK-NEXT:              %664 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %665 = arith.index_cast %553 : index to i32
//CHECK-NEXT:              %666 = arith.addi %664, %665 : i32
//CHECK-NEXT:              scf.yield %666 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %557, %1[] : memref<i32>
//CHECK-NEXT:            %667 = arith.addi %547, %542 : index
//CHECK-NEXT:            %668 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %669 = arith.index_cast %542 : index to i32
//CHECK-NEXT:            %670 = arith.addi %668, %669 : i32
//CHECK-NEXT:            scf.yield %670 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %546, %2[] : memref<i32>
//CHECK-NEXT:          %671 = arith.addi %536, %531 : index
//CHECK-NEXT:          %672 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %673 = arith.index_cast %531 : index to i32
//CHECK-NEXT:          %674 = arith.addi %672, %673 : i32
//CHECK-NEXT:          scf.yield %674 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %535, %3[] : memref<i32>
//CHECK-NEXT:        %675 = arith.constant 1 : i32
//CHECK-NEXT:        %676 = arith.index_cast %675 : i32 to index
//CHECK-NEXT:        %677 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %678 = arith.index_cast %677 : i32 to index
//CHECK-NEXT:        %679 = arith.constant 1 : index
//CHECK-NEXT:        %680 = arith.index_cast %676 : index to i32
//CHECK-NEXT:        %681 = arith.constant 1 : index
//CHECK-NEXT:        %682 = arith.addi %678, %681 : index
//CHECK-NEXT:        %683 = scf.for %684 = %676 to %682 step %679 iter_args(%685 = %680) -> (i32) {
//CHECK-NEXT:          memref.store %685, %2[] : memref<i32>
//CHECK-NEXT:          %686 = arith.constant 1 : i32
//CHECK-NEXT:          %687 = arith.index_cast %686 : i32 to index
//CHECK-NEXT:          %688 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %689 = arith.index_cast %688 : i32 to index
//CHECK-NEXT:          %690 = arith.constant 1 : index
//CHECK-NEXT:          %691 = arith.index_cast %687 : index to i32
//CHECK-NEXT:          %692 = arith.constant 1 : index
//CHECK-NEXT:          %693 = arith.addi %689, %692 : index
//CHECK-NEXT:          %694 = scf.for %695 = %687 to %693 step %690 iter_args(%696 = %691) -> (i32) {
//CHECK-NEXT:            memref.store %696, %1[] : memref<i32>
//CHECK-NEXT:            %697 = arith.constant 0.000000e+00 : f64
//CHECK-NEXT:            %698 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %699 = arith.extui %698 : i32 to i64
//CHECK-NEXT:            %700 = arith.index_cast %699 : i64 to index
//CHECK-NEXT:            %701 = arith.constant 1 : index
//CHECK-NEXT:            %702 = arith.subi %700, %701 : index
//CHECK-NEXT:            %703 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %704 = arith.extui %703 : i32 to i64
//CHECK-NEXT:            %705 = arith.index_cast %704 : i64 to index
//CHECK-NEXT:            %706 = arith.constant 1 : index
//CHECK-NEXT:            %707 = arith.subi %705, %706 : index
//CHECK-NEXT:            %708 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %709 = arith.extui %708 : i32 to i64
//CHECK-NEXT:            %710 = arith.index_cast %709 : i64 to index
//CHECK-NEXT:            %711 = arith.constant 1 : index
//CHECK-NEXT:            %712 = arith.subi %710, %711 : index
//CHECK-NEXT:            %713 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %697, %713[%712, %707, %702] : memref<?x?x?xf64>
//CHECK-NEXT:            %714 = arith.constant 0.000000e+00 : f64
//CHECK-NEXT:            %715 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %716 = arith.extui %715 : i32 to i64
//CHECK-NEXT:            %717 = arith.index_cast %716 : i64 to index
//CHECK-NEXT:            %718 = arith.constant 1 : index
//CHECK-NEXT:            %719 = arith.subi %717, %718 : index
//CHECK-NEXT:            %720 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %721 = arith.extui %720 : i32 to i64
//CHECK-NEXT:            %722 = arith.index_cast %721 : i64 to index
//CHECK-NEXT:            %723 = arith.constant 1 : index
//CHECK-NEXT:            %724 = arith.subi %722, %723 : index
//CHECK-NEXT:            %725 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %726 = arith.extui %725 : i32 to i64
//CHECK-NEXT:            %727 = arith.index_cast %726 : i64 to index
//CHECK-NEXT:            %728 = arith.constant 1 : index
//CHECK-NEXT:            %729 = arith.subi %727, %728 : index
//CHECK-NEXT:            %730 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %714, %730[%729, %724, %719] : memref<?x?x?xf64>
//CHECK-NEXT:            %731 = arith.addi %695, %690 : index
//CHECK-NEXT:            %732 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %733 = arith.index_cast %690 : index to i32
//CHECK-NEXT:            %734 = arith.addi %732, %733 : i32
//CHECK-NEXT:            scf.yield %734 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %694, %1[] : memref<i32>
//CHECK-NEXT:          %735 = arith.addi %684, %679 : index
//CHECK-NEXT:          %736 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %737 = arith.index_cast %679 : index to i32
//CHECK-NEXT:          %738 = arith.addi %736, %737 : i32
//CHECK-NEXT:          scf.yield %738 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %683, %2[] : memref<i32>
//CHECK-NEXT:        %739 = arith.constant 1 : i32
//CHECK-NEXT:        %740 = arith.index_cast %739 : i32 to index
//CHECK-NEXT:        %741 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %742 = arith.constant 1 : i32
//CHECK-NEXT:        %743 = arith.subi %741, %742 : i32
//CHECK-NEXT:        %744 = arith.index_cast %743 : i32 to index
//CHECK-NEXT:        %745 = arith.constant 1 : index
//CHECK-NEXT:        %746 = arith.index_cast %740 : index to i32
//CHECK-NEXT:        %747 = arith.constant 1 : index
//CHECK-NEXT:        %748 = arith.addi %744, %747 : index
//CHECK-NEXT:        %749 = scf.for %750 = %740 to %748 step %745 iter_args(%751 = %746) -> (i32) {
//CHECK-NEXT:          memref.store %751, %3[] : memref<i32>
//CHECK-NEXT:          %752 = arith.constant 1 : i32
//CHECK-NEXT:          %753 = arith.index_cast %752 : i32 to index
//CHECK-NEXT:          %754 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %755 = arith.constant 1 : i32
//CHECK-NEXT:          %756 = arith.subi %754, %755 : i32
//CHECK-NEXT:          %757 = arith.index_cast %756 : i32 to index
//CHECK-NEXT:          %758 = arith.constant 1 : index
//CHECK-NEXT:          %759 = arith.index_cast %753 : index to i32
//CHECK-NEXT:          %760 = arith.constant 1 : index
//CHECK-NEXT:          %761 = arith.addi %757, %760 : index
//CHECK-NEXT:          %762 = scf.for %763 = %753 to %761 step %758 iter_args(%764 = %759) -> (i32) {
//CHECK-NEXT:            memref.store %764, %2[] : memref<i32>
//CHECK-NEXT:            %765 = arith.constant 1 : i32
//CHECK-NEXT:            %766 = arith.index_cast %765 : i32 to index
//CHECK-NEXT:            %767 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %768 = arith.constant 1 : i32
//CHECK-NEXT:            %769 = arith.subi %767, %768 : i32
//CHECK-NEXT:            %770 = arith.index_cast %769 : i32 to index
//CHECK-NEXT:            %771 = arith.constant 1 : index
//CHECK-NEXT:            %772 = arith.index_cast %766 : index to i32
//CHECK-NEXT:            %773 = arith.constant 1 : index
//CHECK-NEXT:            %774 = arith.addi %770, %773 : index
//CHECK-NEXT:            %775 = scf.for %776 = %766 to %774 step %771 iter_args(%777 = %772) -> (i32) {
//CHECK-NEXT:              memref.store %777, %1[] : memref<i32>
//CHECK-NEXT:              %778 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %779 = arith.extui %778 : i32 to i64
//CHECK-NEXT:              %780 = arith.index_cast %779 : i64 to index
//CHECK-NEXT:              %781 = arith.constant 1 : index
//CHECK-NEXT:              %782 = arith.subi %780, %781 : index
//CHECK-NEXT:              %783 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %784 = arith.extui %783 : i32 to i64
//CHECK-NEXT:              %785 = arith.index_cast %784 : i64 to index
//CHECK-NEXT:              %786 = arith.constant 1 : index
//CHECK-NEXT:              %787 = arith.subi %785, %786 : index
//CHECK-NEXT:              %788 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %789 = arith.extui %788 : i32 to i64
//CHECK-NEXT:              %790 = arith.index_cast %789 : i64 to index
//CHECK-NEXT:              %791 = arith.constant 1 : index
//CHECK-NEXT:              %792 = arith.subi %790, %791 : index
//CHECK-NEXT:              %793 = memref.load %17[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %794 = memref.load %793[%792, %787, %782] : memref<?x?x?xf64>
//CHECK-NEXT:              %795 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %796 = arith.constant 1 : i32
//CHECK-NEXT:              %797 = arith.addi %795, %796 : i32
//CHECK-NEXT:              %798 = arith.extui %797 : i32 to i64
//CHECK-NEXT:              %799 = arith.index_cast %798 : i64 to index
//CHECK-NEXT:              %800 = arith.constant 1 : index
//CHECK-NEXT:              %801 = arith.subi %799, %800 : index
//CHECK-NEXT:              %802 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %803 = arith.extui %802 : i32 to i64
//CHECK-NEXT:              %804 = arith.index_cast %803 : i64 to index
//CHECK-NEXT:              %805 = arith.constant 1 : index
//CHECK-NEXT:              %806 = arith.subi %804, %805 : index
//CHECK-NEXT:              %807 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %808 = arith.extui %807 : i32 to i64
//CHECK-NEXT:              %809 = arith.index_cast %808 : i64 to index
//CHECK-NEXT:              %810 = arith.constant 1 : index
//CHECK-NEXT:              %811 = arith.subi %809, %810 : index
//CHECK-NEXT:              %812 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %813 = memref.load %812[%811, %806, %801] : memref<?x?x?xf64>
//CHECK-NEXT:              %814 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %815 = arith.extui %814 : i32 to i64
//CHECK-NEXT:              %816 = arith.index_cast %815 : i64 to index
//CHECK-NEXT:              %817 = arith.constant 1 : index
//CHECK-NEXT:              %818 = arith.subi %816, %817 : index
//CHECK-NEXT:              %819 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %820 = arith.extui %819 : i32 to i64
//CHECK-NEXT:              %821 = arith.index_cast %820 : i64 to index
//CHECK-NEXT:              %822 = arith.constant 1 : index
//CHECK-NEXT:              %823 = arith.subi %821, %822 : index
//CHECK-NEXT:              %824 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %825 = arith.extui %824 : i32 to i64
//CHECK-NEXT:              %826 = arith.index_cast %825 : i64 to index
//CHECK-NEXT:              %827 = arith.constant 1 : index
//CHECK-NEXT:              %828 = arith.subi %826, %827 : index
//CHECK-NEXT:              %829 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %830 = memref.load %829[%828, %823, %818] : memref<?x?x?xf64>
//CHECK-NEXT:              %831 = arith.subf %813, %830 fastmath<contract> : f64
//CHECK-NEXT:              %832 = arith.mulf %794, %831 fastmath<contract> : f64
//CHECK-NEXT:              %833 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %834 = arith.extui %833 : i32 to i64
//CHECK-NEXT:              %835 = arith.index_cast %834 : i64 to index
//CHECK-NEXT:              %836 = arith.constant 1 : index
//CHECK-NEXT:              %837 = arith.subi %835, %836 : index
//CHECK-NEXT:              %838 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %839 = arith.extui %838 : i32 to i64
//CHECK-NEXT:              %840 = arith.index_cast %839 : i64 to index
//CHECK-NEXT:              %841 = arith.constant 1 : index
//CHECK-NEXT:              %842 = arith.subi %840, %841 : index
//CHECK-NEXT:              %843 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %844 = arith.extui %843 : i32 to i64
//CHECK-NEXT:              %845 = arith.index_cast %844 : i64 to index
//CHECK-NEXT:              %846 = arith.constant 1 : index
//CHECK-NEXT:              %847 = arith.subi %845, %846 : index
//CHECK-NEXT:              %848 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %832, %848[%847, %842, %837] : memref<?x?x?xf64>
//CHECK-NEXT:              %849 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %850 = arith.extui %849 : i32 to i64
//CHECK-NEXT:              %851 = arith.index_cast %850 : i64 to index
//CHECK-NEXT:              %852 = arith.constant 1 : index
//CHECK-NEXT:              %853 = arith.subi %851, %852 : index
//CHECK-NEXT:              %854 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %855 = arith.extui %854 : i32 to i64
//CHECK-NEXT:              %856 = arith.index_cast %855 : i64 to index
//CHECK-NEXT:              %857 = arith.constant 1 : index
//CHECK-NEXT:              %858 = arith.subi %856, %857 : index
//CHECK-NEXT:              %859 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %860 = arith.extui %859 : i32 to i64
//CHECK-NEXT:              %861 = arith.index_cast %860 : i64 to index
//CHECK-NEXT:              %862 = arith.constant 1 : index
//CHECK-NEXT:              %863 = arith.subi %861, %862 : index
//CHECK-NEXT:              %864 = memref.load %19[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %865 = memref.load %864[%863, %858, %853] : memref<?x?x?xf64>
//CHECK-NEXT:              %866 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %867 = arith.extui %866 : i32 to i64
//CHECK-NEXT:              %868 = arith.index_cast %867 : i64 to index
//CHECK-NEXT:              %869 = arith.constant 1 : index
//CHECK-NEXT:              %870 = arith.subi %868, %869 : index
//CHECK-NEXT:              %871 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %872 = arith.constant 1 : i32
//CHECK-NEXT:              %873 = arith.addi %871, %872 : i32
//CHECK-NEXT:              %874 = arith.extui %873 : i32 to i64
//CHECK-NEXT:              %875 = arith.index_cast %874 : i64 to index
//CHECK-NEXT:              %876 = arith.constant 1 : index
//CHECK-NEXT:              %877 = arith.subi %875, %876 : index
//CHECK-NEXT:              %878 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %879 = arith.extui %878 : i32 to i64
//CHECK-NEXT:              %880 = arith.index_cast %879 : i64 to index
//CHECK-NEXT:              %881 = arith.constant 1 : index
//CHECK-NEXT:              %882 = arith.subi %880, %881 : index
//CHECK-NEXT:              %883 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %884 = memref.load %883[%882, %877, %870] : memref<?x?x?xf64>
//CHECK-NEXT:              %885 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %886 = arith.extui %885 : i32 to i64
//CHECK-NEXT:              %887 = arith.index_cast %886 : i64 to index
//CHECK-NEXT:              %888 = arith.constant 1 : index
//CHECK-NEXT:              %889 = arith.subi %887, %888 : index
//CHECK-NEXT:              %890 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %891 = arith.extui %890 : i32 to i64
//CHECK-NEXT:              %892 = arith.index_cast %891 : i64 to index
//CHECK-NEXT:              %893 = arith.constant 1 : index
//CHECK-NEXT:              %894 = arith.subi %892, %893 : index
//CHECK-NEXT:              %895 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %896 = arith.extui %895 : i32 to i64
//CHECK-NEXT:              %897 = arith.index_cast %896 : i64 to index
//CHECK-NEXT:              %898 = arith.constant 1 : index
//CHECK-NEXT:              %899 = arith.subi %897, %898 : index
//CHECK-NEXT:              %900 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %901 = memref.load %900[%899, %894, %889] : memref<?x?x?xf64>
//CHECK-NEXT:              %902 = arith.subf %884, %901 fastmath<contract> : f64
//CHECK-NEXT:              %903 = arith.mulf %865, %902 fastmath<contract> : f64
//CHECK-NEXT:              %904 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %905 = arith.extui %904 : i32 to i64
//CHECK-NEXT:              %906 = arith.index_cast %905 : i64 to index
//CHECK-NEXT:              %907 = arith.constant 1 : index
//CHECK-NEXT:              %908 = arith.subi %906, %907 : index
//CHECK-NEXT:              %909 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %910 = arith.extui %909 : i32 to i64
//CHECK-NEXT:              %911 = arith.index_cast %910 : i64 to index
//CHECK-NEXT:              %912 = arith.constant 1 : index
//CHECK-NEXT:              %913 = arith.subi %911, %912 : index
//CHECK-NEXT:              %914 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %915 = arith.extui %914 : i32 to i64
//CHECK-NEXT:              %916 = arith.index_cast %915 : i64 to index
//CHECK-NEXT:              %917 = arith.constant 1 : index
//CHECK-NEXT:              %918 = arith.subi %916, %917 : index
//CHECK-NEXT:              %919 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %903, %919[%918, %913, %908] : memref<?x?x?xf64>
//CHECK-NEXT:              %920 = arith.addi %776, %771 : index
//CHECK-NEXT:              %921 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %922 = arith.index_cast %771 : index to i32
//CHECK-NEXT:              %923 = arith.addi %921, %922 : i32
//CHECK-NEXT:              scf.yield %923 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %775, %1[] : memref<i32>
//CHECK-NEXT:            %924 = arith.addi %763, %758 : index
//CHECK-NEXT:            %925 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %926 = arith.index_cast %758 : index to i32
//CHECK-NEXT:            %927 = arith.addi %925, %926 : i32
//CHECK-NEXT:            scf.yield %927 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %762, %2[] : memref<i32>
//CHECK-NEXT:          %928 = arith.addi %750, %745 : index
//CHECK-NEXT:          %929 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %930 = arith.index_cast %745 : index to i32
//CHECK-NEXT:          %931 = arith.addi %929, %930 : i32
//CHECK-NEXT:          scf.yield %931 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %749, %3[] : memref<i32>
//CHECK-NEXT:        %932 = arith.constant 1 : i32
//CHECK-NEXT:        %933 = arith.index_cast %932 : i32 to index
//CHECK-NEXT:        %934 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %935 = arith.index_cast %934 : i32 to index
//CHECK-NEXT:        %936 = arith.constant 1 : index
//CHECK-NEXT:        %937 = arith.index_cast %933 : index to i32
//CHECK-NEXT:        %938 = arith.constant 1 : index
//CHECK-NEXT:        %939 = arith.addi %935, %938 : index
//CHECK-NEXT:        %940 = scf.for %941 = %933 to %939 step %936 iter_args(%942 = %937) -> (i32) {
//CHECK-NEXT:          memref.store %942, %2[] : memref<i32>
//CHECK-NEXT:          %943 = arith.constant 1 : i32
//CHECK-NEXT:          %944 = arith.index_cast %943 : i32 to index
//CHECK-NEXT:          %945 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %946 = arith.index_cast %945 : i32 to index
//CHECK-NEXT:          %947 = arith.constant 1 : index
//CHECK-NEXT:          %948 = arith.index_cast %944 : index to i32
//CHECK-NEXT:          %949 = arith.constant 1 : index
//CHECK-NEXT:          %950 = arith.addi %946, %949 : index
//CHECK-NEXT:          %951 = scf.for %952 = %944 to %950 step %947 iter_args(%953 = %948) -> (i32) {
//CHECK-NEXT:            memref.store %953, %1[] : memref<i32>
//CHECK-NEXT:            %954 = arith.constant 0.000000e+00 : f64
//CHECK-NEXT:            %955 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %956 = arith.extui %955 : i32 to i64
//CHECK-NEXT:            %957 = arith.index_cast %956 : i64 to index
//CHECK-NEXT:            %958 = arith.constant 1 : index
//CHECK-NEXT:            %959 = arith.subi %957, %958 : index
//CHECK-NEXT:            %960 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %961 = arith.extui %960 : i32 to i64
//CHECK-NEXT:            %962 = arith.index_cast %961 : i64 to index
//CHECK-NEXT:            %963 = arith.constant 1 : index
//CHECK-NEXT:            %964 = arith.subi %962, %963 : index
//CHECK-NEXT:            %965 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %966 = arith.extui %965 : i32 to i64
//CHECK-NEXT:            %967 = arith.index_cast %966 : i64 to index
//CHECK-NEXT:            %968 = arith.constant 1 : index
//CHECK-NEXT:            %969 = arith.subi %967, %968 : index
//CHECK-NEXT:            %970 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %954, %970[%969, %964, %959] : memref<?x?x?xf64>
//CHECK-NEXT:            %971 = arith.constant 0.000000e+00 : f64
//CHECK-NEXT:            %972 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %973 = arith.extui %972 : i32 to i64
//CHECK-NEXT:            %974 = arith.index_cast %973 : i64 to index
//CHECK-NEXT:            %975 = arith.constant 1 : index
//CHECK-NEXT:            %976 = arith.subi %974, %975 : index
//CHECK-NEXT:            %977 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %978 = arith.extui %977 : i32 to i64
//CHECK-NEXT:            %979 = arith.index_cast %978 : i64 to index
//CHECK-NEXT:            %980 = arith.constant 1 : index
//CHECK-NEXT:            %981 = arith.subi %979, %980 : index
//CHECK-NEXT:            %982 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %983 = arith.extui %982 : i32 to i64
//CHECK-NEXT:            %984 = arith.index_cast %983 : i64 to index
//CHECK-NEXT:            %985 = arith.constant 1 : index
//CHECK-NEXT:            %986 = arith.subi %984, %985 : index
//CHECK-NEXT:            %987 = memref.load %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %971, %987[%986, %981, %976] : memref<?x?x?xf64>
//CHECK-NEXT:            %988 = arith.addi %952, %947 : index
//CHECK-NEXT:            %989 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %990 = arith.index_cast %947 : index to i32
//CHECK-NEXT:            %991 = arith.addi %989, %990 : i32
//CHECK-NEXT:            scf.yield %991 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %951, %1[] : memref<i32>
//CHECK-NEXT:          %992 = arith.addi %941, %936 : index
//CHECK-NEXT:          %993 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %994 = arith.index_cast %936 : index to i32
//CHECK-NEXT:          %995 = arith.addi %993, %994 : i32
//CHECK-NEXT:          scf.yield %995 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %940, %2[] : memref<i32>
//CHECK-NEXT:        %996 = arith.constant 1 : i32
//CHECK-NEXT:        %997 = arith.index_cast %996 : i32 to index
//CHECK-NEXT:        %998 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %999 = arith.constant 1 : i32
//CHECK-NEXT:        %1000 = arith.subi %998, %999 : i32
//CHECK-NEXT:        %1001 = arith.index_cast %1000 : i32 to index
//CHECK-NEXT:        %1002 = arith.constant 1 : index
//CHECK-NEXT:        %1003 = arith.index_cast %997 : index to i32
//CHECK-NEXT:        %1004 = arith.constant 1 : index
//CHECK-NEXT:        %1005 = arith.addi %1001, %1004 : index
//CHECK-NEXT:        %1006 = scf.for %1007 = %997 to %1005 step %1002 iter_args(%1008 = %1003) -> (i32) {
//CHECK-NEXT:          memref.store %1008, %3[] : memref<i32>
//CHECK-NEXT:          %1009 = arith.constant 2 : i32
//CHECK-NEXT:          %1010 = arith.index_cast %1009 : i32 to index
//CHECK-NEXT:          %1011 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %1012 = arith.index_cast %1011 : i32 to index
//CHECK-NEXT:          %1013 = arith.constant 1 : index
//CHECK-NEXT:          %1014 = arith.index_cast %1010 : index to i32
//CHECK-NEXT:          %1015 = arith.constant 1 : index
//CHECK-NEXT:          %1016 = arith.addi %1012, %1015 : index
//CHECK-NEXT:          %1017 = scf.for %1018 = %1010 to %1016 step %1013 iter_args(%1019 = %1014) -> (i32) {
//CHECK-NEXT:            memref.store %1019, %2[] : memref<i32>
//CHECK-NEXT:            %1020 = arith.constant 2 : i32
//CHECK-NEXT:            %1021 = arith.index_cast %1020 : i32 to index
//CHECK-NEXT:            %1022 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %1023 = arith.index_cast %1022 : i32 to index
//CHECK-NEXT:            %1024 = arith.constant 1 : index
//CHECK-NEXT:            %1025 = arith.index_cast %1021 : index to i32
//CHECK-NEXT:            %1026 = arith.constant 1 : index
//CHECK-NEXT:            %1027 = arith.addi %1023, %1026 : index
//CHECK-NEXT:            %1028 = scf.for %1029 = %1021 to %1027 step %1024 iter_args(%1030 = %1025) -> (i32) {
//CHECK-NEXT:              memref.store %1030, %1[] : memref<i32>
//CHECK-NEXT:              %1031 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1032 = arith.extui %1031 : i32 to i64
//CHECK-NEXT:              %1033 = arith.index_cast %1032 : i64 to index
//CHECK-NEXT:              %1034 = arith.constant 1 : index
//CHECK-NEXT:              %1035 = arith.subi %1033, %1034 : index
//CHECK-NEXT:              %1036 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1037 = arith.extui %1036 : i32 to i64
//CHECK-NEXT:              %1038 = arith.index_cast %1037 : i64 to index
//CHECK-NEXT:              %1039 = arith.constant 1 : index
//CHECK-NEXT:              %1040 = arith.subi %1038, %1039 : index
//CHECK-NEXT:              %1041 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1042 = arith.extui %1041 : i32 to i64
//CHECK-NEXT:              %1043 = arith.index_cast %1042 : i64 to index
//CHECK-NEXT:              %1044 = arith.constant 1 : index
//CHECK-NEXT:              %1045 = arith.subi %1043, %1044 : index
//CHECK-NEXT:              %1046 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1047 = memref.load %1046[%1045, %1040, %1035] : memref<?x?x?xf64>
//CHECK-NEXT:              %1048 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1049 = arith.constant 1 : i32
//CHECK-NEXT:              %1050 = arith.subi %1048, %1049 : i32
//CHECK-NEXT:              %1051 = arith.extui %1050 : i32 to i64
//CHECK-NEXT:              %1052 = arith.index_cast %1051 : i64 to index
//CHECK-NEXT:              %1053 = arith.constant 1 : index
//CHECK-NEXT:              %1054 = arith.subi %1052, %1053 : index
//CHECK-NEXT:              %1055 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1056 = arith.extui %1055 : i32 to i64
//CHECK-NEXT:              %1057 = arith.index_cast %1056 : i64 to index
//CHECK-NEXT:              %1058 = arith.constant 1 : index
//CHECK-NEXT:              %1059 = arith.subi %1057, %1058 : index
//CHECK-NEXT:              %1060 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1061 = arith.extui %1060 : i32 to i64
//CHECK-NEXT:              %1062 = arith.index_cast %1061 : i64 to index
//CHECK-NEXT:              %1063 = arith.constant 1 : index
//CHECK-NEXT:              %1064 = arith.subi %1062, %1063 : index
//CHECK-NEXT:              %1065 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1066 = memref.load %1065[%1064, %1059, %1054] : memref<?x?x?xf64>
//CHECK-NEXT:              %1067 = arith.addf %1047, %1066 fastmath<contract> : f64
//CHECK-NEXT:              %1068 = arith.constant 2.500000e-01 : f64
//CHECK-NEXT:              %1069 = arith.constant 2.500000e-01 : f64
//CHECK-NEXT:              %1070 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1071 = arith.extui %1070 : i32 to i64
//CHECK-NEXT:              %1072 = arith.index_cast %1071 : i64 to index
//CHECK-NEXT:              %1073 = arith.constant 1 : index
//CHECK-NEXT:              %1074 = arith.subi %1072, %1073 : index
//CHECK-NEXT:              %1075 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1076 = arith.extui %1075 : i32 to i64
//CHECK-NEXT:              %1077 = arith.index_cast %1076 : i64 to index
//CHECK-NEXT:              %1078 = arith.constant 1 : index
//CHECK-NEXT:              %1079 = arith.subi %1077, %1078 : index
//CHECK-NEXT:              %1080 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1081 = arith.extui %1080 : i32 to i64
//CHECK-NEXT:              %1082 = arith.index_cast %1081 : i64 to index
//CHECK-NEXT:              %1083 = arith.constant 1 : index
//CHECK-NEXT:              %1084 = arith.subi %1082, %1083 : index
//CHECK-NEXT:              %1085 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1086 = memref.load %1085[%1084, %1079, %1074] : memref<?x?x?xf64>
//CHECK-NEXT:              %1087 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1088 = arith.constant 1 : i32
//CHECK-NEXT:              %1089 = arith.subi %1087, %1088 : i32
//CHECK-NEXT:              %1090 = arith.extui %1089 : i32 to i64
//CHECK-NEXT:              %1091 = arith.index_cast %1090 : i64 to index
//CHECK-NEXT:              %1092 = arith.constant 1 : index
//CHECK-NEXT:              %1093 = arith.subi %1091, %1092 : index
//CHECK-NEXT:              %1094 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1095 = arith.extui %1094 : i32 to i64
//CHECK-NEXT:              %1096 = arith.index_cast %1095 : i64 to index
//CHECK-NEXT:              %1097 = arith.constant 1 : index
//CHECK-NEXT:              %1098 = arith.subi %1096, %1097 : index
//CHECK-NEXT:              %1099 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1100 = arith.extui %1099 : i32 to i64
//CHECK-NEXT:              %1101 = arith.index_cast %1100 : i64 to index
//CHECK-NEXT:              %1102 = arith.constant 1 : index
//CHECK-NEXT:              %1103 = arith.subi %1101, %1102 : index
//CHECK-NEXT:              %1104 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1105 = memref.load %1104[%1103, %1098, %1093] : memref<?x?x?xf64>
//CHECK-NEXT:              %1106 = arith.mulf %1086, %1105 fastmath<contract> : f64
//CHECK-NEXT:              %1107 = math.copysign %1069, %1106 fastmath<contract> : f64
//CHECK-NEXT:              %1108 = arith.addf %1068, %1107 fastmath<contract> : f64
//CHECK-NEXT:              %1109 = arith.mulf %1067, %1108 fastmath<contract> : f64
//CHECK-NEXT:              %1110 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1111 = arith.extui %1110 : i32 to i64
//CHECK-NEXT:              %1112 = arith.index_cast %1111 : i64 to index
//CHECK-NEXT:              %1113 = arith.constant 1 : index
//CHECK-NEXT:              %1114 = arith.subi %1112, %1113 : index
//CHECK-NEXT:              %1115 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1116 = arith.extui %1115 : i32 to i64
//CHECK-NEXT:              %1117 = arith.index_cast %1116 : i64 to index
//CHECK-NEXT:              %1118 = arith.constant 1 : index
//CHECK-NEXT:              %1119 = arith.subi %1117, %1118 : index
//CHECK-NEXT:              %1120 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1121 = arith.extui %1120 : i32 to i64
//CHECK-NEXT:              %1122 = arith.index_cast %1121 : i64 to index
//CHECK-NEXT:              %1123 = arith.constant 1 : index
//CHECK-NEXT:              %1124 = arith.subi %1122, %1123 : index
//CHECK-NEXT:              %1125 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %1109, %1125[%1124, %1119, %1114] : memref<?x?x?xf64>
//CHECK-NEXT:              %1126 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1127 = arith.extui %1126 : i32 to i64
//CHECK-NEXT:              %1128 = arith.index_cast %1127 : i64 to index
//CHECK-NEXT:              %1129 = arith.constant 1 : index
//CHECK-NEXT:              %1130 = arith.subi %1128, %1129 : index
//CHECK-NEXT:              %1131 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1132 = arith.extui %1131 : i32 to i64
//CHECK-NEXT:              %1133 = arith.index_cast %1132 : i64 to index
//CHECK-NEXT:              %1134 = arith.constant 1 : index
//CHECK-NEXT:              %1135 = arith.subi %1133, %1134 : index
//CHECK-NEXT:              %1136 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1137 = arith.extui %1136 : i32 to i64
//CHECK-NEXT:              %1138 = arith.index_cast %1137 : i64 to index
//CHECK-NEXT:              %1139 = arith.constant 1 : index
//CHECK-NEXT:              %1140 = arith.subi %1138, %1139 : index
//CHECK-NEXT:              %1141 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1142 = memref.load %1141[%1140, %1135, %1130] : memref<?x?x?xf64>
//CHECK-NEXT:              %1143 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1144 = arith.extui %1143 : i32 to i64
//CHECK-NEXT:              %1145 = arith.index_cast %1144 : i64 to index
//CHECK-NEXT:              %1146 = arith.constant 1 : index
//CHECK-NEXT:              %1147 = arith.subi %1145, %1146 : index
//CHECK-NEXT:              %1148 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1149 = arith.constant 1 : i32
//CHECK-NEXT:              %1150 = arith.subi %1148, %1149 : i32
//CHECK-NEXT:              %1151 = arith.extui %1150 : i32 to i64
//CHECK-NEXT:              %1152 = arith.index_cast %1151 : i64 to index
//CHECK-NEXT:              %1153 = arith.constant 1 : index
//CHECK-NEXT:              %1154 = arith.subi %1152, %1153 : index
//CHECK-NEXT:              %1155 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1156 = arith.extui %1155 : i32 to i64
//CHECK-NEXT:              %1157 = arith.index_cast %1156 : i64 to index
//CHECK-NEXT:              %1158 = arith.constant 1 : index
//CHECK-NEXT:              %1159 = arith.subi %1157, %1158 : index
//CHECK-NEXT:              %1160 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1161 = memref.load %1160[%1159, %1154, %1147] : memref<?x?x?xf64>
//CHECK-NEXT:              %1162 = arith.addf %1142, %1161 fastmath<contract> : f64
//CHECK-NEXT:              %1163 = arith.constant 2.500000e-01 : f64
//CHECK-NEXT:              %1164 = arith.constant 2.500000e-01 : f64
//CHECK-NEXT:              %1165 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1166 = arith.extui %1165 : i32 to i64
//CHECK-NEXT:              %1167 = arith.index_cast %1166 : i64 to index
//CHECK-NEXT:              %1168 = arith.constant 1 : index
//CHECK-NEXT:              %1169 = arith.subi %1167, %1168 : index
//CHECK-NEXT:              %1170 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1171 = arith.extui %1170 : i32 to i64
//CHECK-NEXT:              %1172 = arith.index_cast %1171 : i64 to index
//CHECK-NEXT:              %1173 = arith.constant 1 : index
//CHECK-NEXT:              %1174 = arith.subi %1172, %1173 : index
//CHECK-NEXT:              %1175 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1176 = arith.extui %1175 : i32 to i64
//CHECK-NEXT:              %1177 = arith.index_cast %1176 : i64 to index
//CHECK-NEXT:              %1178 = arith.constant 1 : index
//CHECK-NEXT:              %1179 = arith.subi %1177, %1178 : index
//CHECK-NEXT:              %1180 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1181 = memref.load %1180[%1179, %1174, %1169] : memref<?x?x?xf64>
//CHECK-NEXT:              %1182 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1183 = arith.extui %1182 : i32 to i64
//CHECK-NEXT:              %1184 = arith.index_cast %1183 : i64 to index
//CHECK-NEXT:              %1185 = arith.constant 1 : index
//CHECK-NEXT:              %1186 = arith.subi %1184, %1185 : index
//CHECK-NEXT:              %1187 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1188 = arith.constant 1 : i32
//CHECK-NEXT:              %1189 = arith.subi %1187, %1188 : i32
//CHECK-NEXT:              %1190 = arith.extui %1189 : i32 to i64
//CHECK-NEXT:              %1191 = arith.index_cast %1190 : i64 to index
//CHECK-NEXT:              %1192 = arith.constant 1 : index
//CHECK-NEXT:              %1193 = arith.subi %1191, %1192 : index
//CHECK-NEXT:              %1194 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1195 = arith.extui %1194 : i32 to i64
//CHECK-NEXT:              %1196 = arith.index_cast %1195 : i64 to index
//CHECK-NEXT:              %1197 = arith.constant 1 : index
//CHECK-NEXT:              %1198 = arith.subi %1196, %1197 : index
//CHECK-NEXT:              %1199 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1200 = memref.load %1199[%1198, %1193, %1186] : memref<?x?x?xf64>
//CHECK-NEXT:              %1201 = arith.mulf %1181, %1200 fastmath<contract> : f64
//CHECK-NEXT:              %1202 = math.copysign %1164, %1201 fastmath<contract> : f64
//CHECK-NEXT:              %1203 = arith.addf %1163, %1202 fastmath<contract> : f64
//CHECK-NEXT:              %1204 = arith.mulf %1162, %1203 fastmath<contract> : f64
//CHECK-NEXT:              %1205 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1206 = arith.extui %1205 : i32 to i64
//CHECK-NEXT:              %1207 = arith.index_cast %1206 : i64 to index
//CHECK-NEXT:              %1208 = arith.constant 1 : index
//CHECK-NEXT:              %1209 = arith.subi %1207, %1208 : index
//CHECK-NEXT:              %1210 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1211 = arith.extui %1210 : i32 to i64
//CHECK-NEXT:              %1212 = arith.index_cast %1211 : i64 to index
//CHECK-NEXT:              %1213 = arith.constant 1 : index
//CHECK-NEXT:              %1214 = arith.subi %1212, %1213 : index
//CHECK-NEXT:              %1215 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1216 = arith.extui %1215 : i32 to i64
//CHECK-NEXT:              %1217 = arith.index_cast %1216 : i64 to index
//CHECK-NEXT:              %1218 = arith.constant 1 : index
//CHECK-NEXT:              %1219 = arith.subi %1217, %1218 : index
//CHECK-NEXT:              %1220 = memref.load %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %1204, %1220[%1219, %1214, %1209] : memref<?x?x?xf64>
//CHECK-NEXT:              %1221 = arith.addi %1029, %1024 : index
//CHECK-NEXT:              %1222 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1223 = arith.index_cast %1024 : index to i32
//CHECK-NEXT:              %1224 = arith.addi %1222, %1223 : i32
//CHECK-NEXT:              scf.yield %1224 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %1028, %1[] : memref<i32>
//CHECK-NEXT:            %1225 = arith.addi %1018, %1013 : index
//CHECK-NEXT:            %1226 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %1227 = arith.index_cast %1013 : index to i32
//CHECK-NEXT:            %1228 = arith.addi %1226, %1227 : i32
//CHECK-NEXT:            scf.yield %1228 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %1017, %2[] : memref<i32>
//CHECK-NEXT:          %1229 = arith.addi %1007, %1002 : index
//CHECK-NEXT:          %1230 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %1231 = arith.index_cast %1002 : index to i32
//CHECK-NEXT:          %1232 = arith.addi %1230, %1231 : i32
//CHECK-NEXT:          scf.yield %1232 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %1006, %3[] : memref<i32>
//CHECK-NEXT:        %1233 = arith.constant 1 : i32
//CHECK-NEXT:        %1234 = arith.index_cast %1233 : i32 to index
//CHECK-NEXT:        %1235 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %1236 = arith.constant 1 : i32
//CHECK-NEXT:        %1237 = arith.subi %1235, %1236 : i32
//CHECK-NEXT:        %1238 = arith.index_cast %1237 : i32 to index
//CHECK-NEXT:        %1239 = arith.constant 1 : index
//CHECK-NEXT:        %1240 = arith.index_cast %1234 : index to i32
//CHECK-NEXT:        %1241 = arith.constant 1 : index
//CHECK-NEXT:        %1242 = arith.addi %1238, %1241 : index
//CHECK-NEXT:        %1243 = scf.for %1244 = %1234 to %1242 step %1239 iter_args(%1245 = %1240) -> (i32) {
//CHECK-NEXT:          memref.store %1245, %3[] : memref<i32>
//CHECK-NEXT:          %1246 = arith.constant 2 : i32
//CHECK-NEXT:          %1247 = arith.index_cast %1246 : i32 to index
//CHECK-NEXT:          %1248 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %1249 = arith.index_cast %1248 : i32 to index
//CHECK-NEXT:          %1250 = arith.constant 1 : index
//CHECK-NEXT:          %1251 = arith.index_cast %1247 : index to i32
//CHECK-NEXT:          %1252 = arith.constant 1 : index
//CHECK-NEXT:          %1253 = arith.addi %1249, %1252 : index
//CHECK-NEXT:          %1254 = scf.for %1255 = %1247 to %1253 step %1250 iter_args(%1256 = %1251) -> (i32) {
//CHECK-NEXT:            memref.store %1256, %2[] : memref<i32>
//CHECK-NEXT:            %1257 = arith.constant 2 : i32
//CHECK-NEXT:            %1258 = arith.index_cast %1257 : i32 to index
//CHECK-NEXT:            %1259 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %1260 = arith.index_cast %1259 : i32 to index
//CHECK-NEXT:            %1261 = arith.constant 1 : index
//CHECK-NEXT:            %1262 = arith.index_cast %1258 : index to i32
//CHECK-NEXT:            %1263 = arith.constant 1 : index
//CHECK-NEXT:            %1264 = arith.addi %1260, %1263 : index
//CHECK-NEXT:            %1265 = scf.for %1266 = %1258 to %1264 step %1261 iter_args(%1267 = %1262) -> (i32) {
//CHECK-NEXT:              memref.store %1267, %1[] : memref<i32>
//CHECK-NEXT:              %1268 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %1269 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1270 = arith.extui %1269 : i32 to i64
//CHECK-NEXT:              %1271 = arith.index_cast %1270 : i64 to index
//CHECK-NEXT:              %1272 = arith.constant 1 : index
//CHECK-NEXT:              %1273 = arith.subi %1271, %1272 : index
//CHECK-NEXT:              %1274 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1275 = arith.extui %1274 : i32 to i64
//CHECK-NEXT:              %1276 = arith.index_cast %1275 : i64 to index
//CHECK-NEXT:              %1277 = arith.constant 1 : index
//CHECK-NEXT:              %1278 = arith.subi %1276, %1277 : index
//CHECK-NEXT:              %1279 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1280 = arith.extui %1279 : i32 to i64
//CHECK-NEXT:              %1281 = arith.index_cast %1280 : i64 to index
//CHECK-NEXT:              %1282 = arith.constant 1 : index
//CHECK-NEXT:              %1283 = arith.subi %1281, %1282 : index
//CHECK-NEXT:              %1284 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1285 = memref.load %1284[%1283, %1278, %1273] : memref<?x?x?xf64>
//CHECK-NEXT:              %1286 = math.copysign %1268, %1285 fastmath<contract> : f64
//CHECK-NEXT:              %1287 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1288 = arith.extui %1287 : i32 to i64
//CHECK-NEXT:              %1289 = arith.index_cast %1288 : i64 to index
//CHECK-NEXT:              %1290 = arith.constant 1 : index
//CHECK-NEXT:              %1291 = arith.subi %1289, %1290 : index
//CHECK-NEXT:              %1292 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1293 = arith.extui %1292 : i32 to i64
//CHECK-NEXT:              %1294 = arith.index_cast %1293 : i64 to index
//CHECK-NEXT:              %1295 = arith.constant 1 : index
//CHECK-NEXT:              %1296 = arith.subi %1294, %1295 : index
//CHECK-NEXT:              %1297 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1298 = arith.extui %1297 : i32 to i64
//CHECK-NEXT:              %1299 = arith.index_cast %1298 : i64 to index
//CHECK-NEXT:              %1300 = arith.constant 1 : index
//CHECK-NEXT:              %1301 = arith.subi %1299, %1300 : index
//CHECK-NEXT:              %1302 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1303 = memref.load %1302[%1301, %1296, %1291] : memref<?x?x?xf64>
//CHECK-NEXT:              %1304 = math.absf %1303 fastmath<contract> : f64
//CHECK-NEXT:              %1305 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:              %1306 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1307 = arith.constant 1 : i32
//CHECK-NEXT:              %1308 = arith.subi %1306, %1307 : i32
//CHECK-NEXT:              %1309 = arith.extui %1308 : i32 to i64
//CHECK-NEXT:              %1310 = arith.index_cast %1309 : i64 to index
//CHECK-NEXT:              %1311 = arith.constant 1 : index
//CHECK-NEXT:              %1312 = arith.subi %1310, %1311 : index
//CHECK-NEXT:              %1313 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1314 = arith.extui %1313 : i32 to i64
//CHECK-NEXT:              %1315 = arith.index_cast %1314 : i64 to index
//CHECK-NEXT:              %1316 = arith.constant 1 : index
//CHECK-NEXT:              %1317 = arith.subi %1315, %1316 : index
//CHECK-NEXT:              %1318 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1319 = arith.extui %1318 : i32 to i64
//CHECK-NEXT:              %1320 = arith.index_cast %1319 : i64 to index
//CHECK-NEXT:              %1321 = arith.constant 1 : index
//CHECK-NEXT:              %1322 = arith.subi %1320, %1321 : index
//CHECK-NEXT:              %1323 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1324 = memref.load %1323[%1322, %1317, %1312] : memref<?x?x?xf64>
//CHECK-NEXT:              %1325 = math.absf %1324 fastmath<contract> : f64
//CHECK-NEXT:              %1326 = arith.mulf %1305, %1325 fastmath<contract> : f64
//CHECK-NEXT:              %1327 = arith.cmpf olt, %1304, %1326 : f64
//CHECK-NEXT:              %1328 = arith.select %1327, %1304, %1326 : f64
//CHECK-NEXT:              %1329 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:              %1330 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1331 = arith.extui %1330 : i32 to i64
//CHECK-NEXT:              %1332 = arith.index_cast %1331 : i64 to index
//CHECK-NEXT:              %1333 = arith.constant 1 : index
//CHECK-NEXT:              %1334 = arith.subi %1332, %1333 : index
//CHECK-NEXT:              %1335 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1336 = arith.extui %1335 : i32 to i64
//CHECK-NEXT:              %1337 = arith.index_cast %1336 : i64 to index
//CHECK-NEXT:              %1338 = arith.constant 1 : index
//CHECK-NEXT:              %1339 = arith.subi %1337, %1338 : index
//CHECK-NEXT:              %1340 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1341 = arith.extui %1340 : i32 to i64
//CHECK-NEXT:              %1342 = arith.index_cast %1341 : i64 to index
//CHECK-NEXT:              %1343 = arith.constant 1 : index
//CHECK-NEXT:              %1344 = arith.subi %1342, %1343 : index
//CHECK-NEXT:              %1345 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1346 = memref.load %1345[%1344, %1339, %1334] : memref<?x?x?xf64>
//CHECK-NEXT:              %1347 = math.absf %1346 fastmath<contract> : f64
//CHECK-NEXT:              %1348 = arith.mulf %1329, %1347 fastmath<contract> : f64
//CHECK-NEXT:              %1349 = arith.cmpf olt, %1328, %1348 : f64
//CHECK-NEXT:              %1350 = arith.select %1349, %1328, %1348 : f64
//CHECK-NEXT:              %1351 = arith.mulf %1286, %1350 fastmath<contract> : f64
//CHECK-NEXT:              %1352 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1353 = arith.extui %1352 : i32 to i64
//CHECK-NEXT:              %1354 = arith.index_cast %1353 : i64 to index
//CHECK-NEXT:              %1355 = arith.constant 1 : index
//CHECK-NEXT:              %1356 = arith.subi %1354, %1355 : index
//CHECK-NEXT:              %1357 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1358 = arith.extui %1357 : i32 to i64
//CHECK-NEXT:              %1359 = arith.index_cast %1358 : i64 to index
//CHECK-NEXT:              %1360 = arith.constant 1 : index
//CHECK-NEXT:              %1361 = arith.subi %1359, %1360 : index
//CHECK-NEXT:              %1362 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1363 = arith.extui %1362 : i32 to i64
//CHECK-NEXT:              %1364 = arith.index_cast %1363 : i64 to index
//CHECK-NEXT:              %1365 = arith.constant 1 : index
//CHECK-NEXT:              %1366 = arith.subi %1364, %1365 : index
//CHECK-NEXT:              %1367 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %1351, %1367[%1366, %1361, %1356] : memref<?x?x?xf64>
//CHECK-NEXT:              %1368 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %1369 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1370 = arith.extui %1369 : i32 to i64
//CHECK-NEXT:              %1371 = arith.index_cast %1370 : i64 to index
//CHECK-NEXT:              %1372 = arith.constant 1 : index
//CHECK-NEXT:              %1373 = arith.subi %1371, %1372 : index
//CHECK-NEXT:              %1374 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1375 = arith.extui %1374 : i32 to i64
//CHECK-NEXT:              %1376 = arith.index_cast %1375 : i64 to index
//CHECK-NEXT:              %1377 = arith.constant 1 : index
//CHECK-NEXT:              %1378 = arith.subi %1376, %1377 : index
//CHECK-NEXT:              %1379 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1380 = arith.extui %1379 : i32 to i64
//CHECK-NEXT:              %1381 = arith.index_cast %1380 : i64 to index
//CHECK-NEXT:              %1382 = arith.constant 1 : index
//CHECK-NEXT:              %1383 = arith.subi %1381, %1382 : index
//CHECK-NEXT:              %1384 = memref.load %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1385 = memref.load %1384[%1383, %1378, %1373] : memref<?x?x?xf64>
//CHECK-NEXT:              %1386 = math.copysign %1368, %1385 fastmath<contract> : f64
//CHECK-NEXT:              %1387 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1388 = arith.extui %1387 : i32 to i64
//CHECK-NEXT:              %1389 = arith.index_cast %1388 : i64 to index
//CHECK-NEXT:              %1390 = arith.constant 1 : index
//CHECK-NEXT:              %1391 = arith.subi %1389, %1390 : index
//CHECK-NEXT:              %1392 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1393 = arith.extui %1392 : i32 to i64
//CHECK-NEXT:              %1394 = arith.index_cast %1393 : i64 to index
//CHECK-NEXT:              %1395 = arith.constant 1 : index
//CHECK-NEXT:              %1396 = arith.subi %1394, %1395 : index
//CHECK-NEXT:              %1397 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1398 = arith.extui %1397 : i32 to i64
//CHECK-NEXT:              %1399 = arith.index_cast %1398 : i64 to index
//CHECK-NEXT:              %1400 = arith.constant 1 : index
//CHECK-NEXT:              %1401 = arith.subi %1399, %1400 : index
//CHECK-NEXT:              %1402 = memref.load %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1403 = memref.load %1402[%1401, %1396, %1391] : memref<?x?x?xf64>
//CHECK-NEXT:              %1404 = math.absf %1403 fastmath<contract> : f64
//CHECK-NEXT:              %1405 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:              %1406 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1407 = arith.extui %1406 : i32 to i64
//CHECK-NEXT:              %1408 = arith.index_cast %1407 : i64 to index
//CHECK-NEXT:              %1409 = arith.constant 1 : index
//CHECK-NEXT:              %1410 = arith.subi %1408, %1409 : index
//CHECK-NEXT:              %1411 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1412 = arith.constant 1 : i32
//CHECK-NEXT:              %1413 = arith.subi %1411, %1412 : i32
//CHECK-NEXT:              %1414 = arith.extui %1413 : i32 to i64
//CHECK-NEXT:              %1415 = arith.index_cast %1414 : i64 to index
//CHECK-NEXT:              %1416 = arith.constant 1 : index
//CHECK-NEXT:              %1417 = arith.subi %1415, %1416 : index
//CHECK-NEXT:              %1418 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1419 = arith.extui %1418 : i32 to i64
//CHECK-NEXT:              %1420 = arith.index_cast %1419 : i64 to index
//CHECK-NEXT:              %1421 = arith.constant 1 : index
//CHECK-NEXT:              %1422 = arith.subi %1420, %1421 : index
//CHECK-NEXT:              %1423 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1424 = memref.load %1423[%1422, %1417, %1410] : memref<?x?x?xf64>
//CHECK-NEXT:              %1425 = math.absf %1424 fastmath<contract> : f64
//CHECK-NEXT:              %1426 = arith.mulf %1405, %1425 fastmath<contract> : f64
//CHECK-NEXT:              %1427 = arith.cmpf olt, %1404, %1426 : f64
//CHECK-NEXT:              %1428 = arith.select %1427, %1404, %1426 : f64
//CHECK-NEXT:              %1429 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:              %1430 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1431 = arith.extui %1430 : i32 to i64
//CHECK-NEXT:              %1432 = arith.index_cast %1431 : i64 to index
//CHECK-NEXT:              %1433 = arith.constant 1 : index
//CHECK-NEXT:              %1434 = arith.subi %1432, %1433 : index
//CHECK-NEXT:              %1435 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1436 = arith.extui %1435 : i32 to i64
//CHECK-NEXT:              %1437 = arith.index_cast %1436 : i64 to index
//CHECK-NEXT:              %1438 = arith.constant 1 : index
//CHECK-NEXT:              %1439 = arith.subi %1437, %1438 : index
//CHECK-NEXT:              %1440 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1441 = arith.extui %1440 : i32 to i64
//CHECK-NEXT:              %1442 = arith.index_cast %1441 : i64 to index
//CHECK-NEXT:              %1443 = arith.constant 1 : index
//CHECK-NEXT:              %1444 = arith.subi %1442, %1443 : index
//CHECK-NEXT:              %1445 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1446 = memref.load %1445[%1444, %1439, %1434] : memref<?x?x?xf64>
//CHECK-NEXT:              %1447 = math.absf %1446 fastmath<contract> : f64
//CHECK-NEXT:              %1448 = arith.mulf %1429, %1447 fastmath<contract> : f64
//CHECK-NEXT:              %1449 = arith.cmpf olt, %1428, %1448 : f64
//CHECK-NEXT:              %1450 = arith.select %1449, %1428, %1448 : f64
//CHECK-NEXT:              %1451 = arith.mulf %1386, %1450 fastmath<contract> : f64
//CHECK-NEXT:              %1452 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1453 = arith.extui %1452 : i32 to i64
//CHECK-NEXT:              %1454 = arith.index_cast %1453 : i64 to index
//CHECK-NEXT:              %1455 = arith.constant 1 : index
//CHECK-NEXT:              %1456 = arith.subi %1454, %1455 : index
//CHECK-NEXT:              %1457 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1458 = arith.extui %1457 : i32 to i64
//CHECK-NEXT:              %1459 = arith.index_cast %1458 : i64 to index
//CHECK-NEXT:              %1460 = arith.constant 1 : index
//CHECK-NEXT:              %1461 = arith.subi %1459, %1460 : index
//CHECK-NEXT:              %1462 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1463 = arith.extui %1462 : i32 to i64
//CHECK-NEXT:              %1464 = arith.index_cast %1463 : i64 to index
//CHECK-NEXT:              %1465 = arith.constant 1 : index
//CHECK-NEXT:              %1466 = arith.subi %1464, %1465 : index
//CHECK-NEXT:              %1467 = memref.load %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %1451, %1467[%1466, %1461, %1456] : memref<?x?x?xf64>
//CHECK-NEXT:              %1468 = arith.addi %1266, %1261 : index
//CHECK-NEXT:              %1469 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1470 = arith.index_cast %1261 : index to i32
//CHECK-NEXT:              %1471 = arith.addi %1469, %1470 : i32
//CHECK-NEXT:              scf.yield %1471 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %1265, %1[] : memref<i32>
//CHECK-NEXT:            %1472 = arith.addi %1255, %1250 : index
//CHECK-NEXT:            %1473 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %1474 = arith.index_cast %1250 : index to i32
//CHECK-NEXT:            %1475 = arith.addi %1473, %1474 : i32
//CHECK-NEXT:            scf.yield %1475 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %1254, %2[] : memref<i32>
//CHECK-NEXT:          %1476 = arith.addi %1244, %1239 : index
//CHECK-NEXT:          %1477 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %1478 = arith.index_cast %1239 : index to i32
//CHECK-NEXT:          %1479 = arith.addi %1477, %1478 : i32
//CHECK-NEXT:          scf.yield %1479 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %1243, %3[] : memref<i32>
//CHECK-NEXT:        %1480 = arith.constant 1 : i32
//CHECK-NEXT:        %1481 = arith.index_cast %1480 : i32 to index
//CHECK-NEXT:        %1482 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %1483 = arith.constant 1 : i32
//CHECK-NEXT:        %1484 = arith.subi %1482, %1483 : i32
//CHECK-NEXT:        %1485 = arith.index_cast %1484 : i32 to index
//CHECK-NEXT:        %1486 = arith.constant 1 : index
//CHECK-NEXT:        %1487 = arith.index_cast %1481 : index to i32
//CHECK-NEXT:        %1488 = arith.constant 1 : index
//CHECK-NEXT:        %1489 = arith.addi %1485, %1488 : index
//CHECK-NEXT:        %1490 = scf.for %1491 = %1481 to %1489 step %1486 iter_args(%1492 = %1487) -> (i32) {
//CHECK-NEXT:          memref.store %1492, %3[] : memref<i32>
//CHECK-NEXT:          %1493 = arith.constant 2 : i32
//CHECK-NEXT:          %1494 = arith.index_cast %1493 : i32 to index
//CHECK-NEXT:          %1495 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %1496 = arith.constant 1 : i32
//CHECK-NEXT:          %1497 = arith.subi %1495, %1496 : i32
//CHECK-NEXT:          %1498 = arith.index_cast %1497 : i32 to index
//CHECK-NEXT:          %1499 = arith.constant 1 : index
//CHECK-NEXT:          %1500 = arith.index_cast %1494 : index to i32
//CHECK-NEXT:          %1501 = arith.constant 1 : index
//CHECK-NEXT:          %1502 = arith.addi %1498, %1501 : index
//CHECK-NEXT:          %1503 = scf.for %1504 = %1494 to %1502 step %1499 iter_args(%1505 = %1500) -> (i32) {
//CHECK-NEXT:            memref.store %1505, %2[] : memref<i32>
//CHECK-NEXT:            %1506 = arith.constant 2 : i32
//CHECK-NEXT:            %1507 = arith.index_cast %1506 : i32 to index
//CHECK-NEXT:            %1508 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %1509 = arith.constant 1 : i32
//CHECK-NEXT:            %1510 = arith.subi %1508, %1509 : i32
//CHECK-NEXT:            %1511 = arith.index_cast %1510 : i32 to index
//CHECK-NEXT:            %1512 = arith.constant 1 : index
//CHECK-NEXT:            %1513 = arith.index_cast %1507 : index to i32
//CHECK-NEXT:            %1514 = arith.constant 1 : index
//CHECK-NEXT:            %1515 = arith.addi %1511, %1514 : index
//CHECK-NEXT:            %1516 = scf.for %1517 = %1507 to %1515 step %1512 iter_args(%1518 = %1513) -> (i32) {
//CHECK-NEXT:              memref.store %1518, %1[] : memref<i32>
//CHECK-NEXT:              %1519 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1520 = arith.extui %1519 : i32 to i64
//CHECK-NEXT:              %1521 = arith.index_cast %1520 : i64 to index
//CHECK-NEXT:              %1522 = arith.constant 1 : index
//CHECK-NEXT:              %1523 = arith.subi %1521, %1522 : index
//CHECK-NEXT:              %1524 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1525 = arith.extui %1524 : i32 to i64
//CHECK-NEXT:              %1526 = arith.index_cast %1525 : i64 to index
//CHECK-NEXT:              %1527 = arith.constant 1 : index
//CHECK-NEXT:              %1528 = arith.subi %1526, %1527 : index
//CHECK-NEXT:              %1529 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1530 = arith.extui %1529 : i32 to i64
//CHECK-NEXT:              %1531 = arith.index_cast %1530 : i64 to index
//CHECK-NEXT:              %1532 = arith.constant 1 : index
//CHECK-NEXT:              %1533 = arith.subi %1531, %1532 : index
//CHECK-NEXT:              %1534 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1535 = memref.load %1534[%1533, %1528, %1523] : memref<?x?x?xf64>
//CHECK-NEXT:              %1536 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1537 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1538 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1539 = arith.extui %1538 : i32 to i64
//CHECK-NEXT:              %1540 = arith.index_cast %1539 : i64 to index
//CHECK-NEXT:              %1541 = arith.constant 1 : index
//CHECK-NEXT:              %1542 = arith.subi %1540, %1541 : index
//CHECK-NEXT:              %1543 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1544 = arith.extui %1543 : i32 to i64
//CHECK-NEXT:              %1545 = arith.index_cast %1544 : i64 to index
//CHECK-NEXT:              %1546 = arith.constant 1 : index
//CHECK-NEXT:              %1547 = arith.subi %1545, %1546 : index
//CHECK-NEXT:              %1548 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1549 = arith.extui %1548 : i32 to i64
//CHECK-NEXT:              %1550 = arith.index_cast %1549 : i64 to index
//CHECK-NEXT:              %1551 = arith.constant 1 : index
//CHECK-NEXT:              %1552 = arith.subi %1550, %1551 : index
//CHECK-NEXT:              %1553 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1554 = memref.load %1553[%1552, %1547, %1542] : memref<?x?x?xf64>
//CHECK-NEXT:              %1555 = math.copysign %1537, %1554 fastmath<contract> : f64
//CHECK-NEXT:              %1556 = arith.subf %1536, %1555 fastmath<contract> : f64
//CHECK-NEXT:              %1557 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1558 = arith.constant 1 : i32
//CHECK-NEXT:              %1559 = arith.addi %1557, %1558 : i32
//CHECK-NEXT:              %1560 = arith.extui %1559 : i32 to i64
//CHECK-NEXT:              %1561 = arith.index_cast %1560 : i64 to index
//CHECK-NEXT:              %1562 = arith.constant 1 : index
//CHECK-NEXT:              %1563 = arith.subi %1561, %1562 : index
//CHECK-NEXT:              %1564 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1565 = arith.extui %1564 : i32 to i64
//CHECK-NEXT:              %1566 = arith.index_cast %1565 : i64 to index
//CHECK-NEXT:              %1567 = arith.constant 1 : index
//CHECK-NEXT:              %1568 = arith.subi %1566, %1567 : index
//CHECK-NEXT:              %1569 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1570 = arith.extui %1569 : i32 to i64
//CHECK-NEXT:              %1571 = arith.index_cast %1570 : i64 to index
//CHECK-NEXT:              %1572 = arith.constant 1 : index
//CHECK-NEXT:              %1573 = arith.subi %1571, %1572 : index
//CHECK-NEXT:              %1574 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1575 = memref.load %1574[%1573, %1568, %1563] : memref<?x?x?xf64>
//CHECK-NEXT:              %1576 = arith.mulf %1556, %1575 fastmath<contract> : f64
//CHECK-NEXT:              %1577 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1578 = arith.extui %1577 : i32 to i64
//CHECK-NEXT:              %1579 = arith.index_cast %1578 : i64 to index
//CHECK-NEXT:              %1580 = arith.constant 1 : index
//CHECK-NEXT:              %1581 = arith.subi %1579, %1580 : index
//CHECK-NEXT:              %1582 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1583 = arith.extui %1582 : i32 to i64
//CHECK-NEXT:              %1584 = arith.index_cast %1583 : i64 to index
//CHECK-NEXT:              %1585 = arith.constant 1 : index
//CHECK-NEXT:              %1586 = arith.subi %1584, %1585 : index
//CHECK-NEXT:              %1587 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1588 = arith.extui %1587 : i32 to i64
//CHECK-NEXT:              %1589 = arith.index_cast %1588 : i64 to index
//CHECK-NEXT:              %1590 = arith.constant 1 : index
//CHECK-NEXT:              %1591 = arith.subi %1589, %1590 : index
//CHECK-NEXT:              %1592 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1593 = memref.load %1592[%1591, %1586, %1581] : memref<?x?x?xf64>
//CHECK-NEXT:              %1594 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1595 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1596 = arith.extui %1595 : i32 to i64
//CHECK-NEXT:              %1597 = arith.index_cast %1596 : i64 to index
//CHECK-NEXT:              %1598 = arith.constant 1 : index
//CHECK-NEXT:              %1599 = arith.subi %1597, %1598 : index
//CHECK-NEXT:              %1600 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1601 = arith.extui %1600 : i32 to i64
//CHECK-NEXT:              %1602 = arith.index_cast %1601 : i64 to index
//CHECK-NEXT:              %1603 = arith.constant 1 : index
//CHECK-NEXT:              %1604 = arith.subi %1602, %1603 : index
//CHECK-NEXT:              %1605 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1606 = arith.extui %1605 : i32 to i64
//CHECK-NEXT:              %1607 = arith.index_cast %1606 : i64 to index
//CHECK-NEXT:              %1608 = arith.constant 1 : index
//CHECK-NEXT:              %1609 = arith.subi %1607, %1608 : index
//CHECK-NEXT:              %1610 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1611 = memref.load %1610[%1609, %1604, %1599] : memref<?x?x?xf64>
//CHECK-NEXT:              %1612 = math.copysign %1594, %1611 fastmath<contract> : f64
//CHECK-NEXT:              %1613 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1614 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1615 = arith.extui %1614 : i32 to i64
//CHECK-NEXT:              %1616 = arith.index_cast %1615 : i64 to index
//CHECK-NEXT:              %1617 = arith.constant 1 : index
//CHECK-NEXT:              %1618 = arith.subi %1616, %1617 : index
//CHECK-NEXT:              %1619 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1620 = arith.extui %1619 : i32 to i64
//CHECK-NEXT:              %1621 = arith.index_cast %1620 : i64 to index
//CHECK-NEXT:              %1622 = arith.constant 1 : index
//CHECK-NEXT:              %1623 = arith.subi %1621, %1622 : index
//CHECK-NEXT:              %1624 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1625 = arith.extui %1624 : i32 to i64
//CHECK-NEXT:              %1626 = arith.index_cast %1625 : i64 to index
//CHECK-NEXT:              %1627 = arith.constant 1 : index
//CHECK-NEXT:              %1628 = arith.subi %1626, %1627 : index
//CHECK-NEXT:              %1629 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1630 = memref.load %1629[%1628, %1623, %1618] : memref<?x?x?xf64>
//CHECK-NEXT:              %1631 = arith.mulf %1613, %1630 fastmath<contract> : f64
//CHECK-NEXT:              %1632 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %1633 = arith.mulf %1631, %1632 fastmath<contract> : f64
//CHECK-NEXT:              %1634 = arith.subf %1612, %1633 fastmath<contract> : f64
//CHECK-NEXT:              %1635 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1636 = arith.constant 1 : i32
//CHECK-NEXT:              %1637 = arith.addi %1635, %1636 : i32
//CHECK-NEXT:              %1638 = arith.extui %1637 : i32 to i64
//CHECK-NEXT:              %1639 = arith.index_cast %1638 : i64 to index
//CHECK-NEXT:              %1640 = arith.constant 1 : index
//CHECK-NEXT:              %1641 = arith.subi %1639, %1640 : index
//CHECK-NEXT:              %1642 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1643 = arith.extui %1642 : i32 to i64
//CHECK-NEXT:              %1644 = arith.index_cast %1643 : i64 to index
//CHECK-NEXT:              %1645 = arith.constant 1 : index
//CHECK-NEXT:              %1646 = arith.subi %1644, %1645 : index
//CHECK-NEXT:              %1647 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1648 = arith.extui %1647 : i32 to i64
//CHECK-NEXT:              %1649 = arith.index_cast %1648 : i64 to index
//CHECK-NEXT:              %1650 = arith.constant 1 : index
//CHECK-NEXT:              %1651 = arith.subi %1649, %1650 : index
//CHECK-NEXT:              %1652 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1653 = memref.load %1652[%1651, %1646, %1641] : memref<?x?x?xf64>
//CHECK-NEXT:              %1654 = arith.mulf %1634, %1653 fastmath<contract> : f64
//CHECK-NEXT:              %1655 = arith.mulf %1593, %1654 fastmath<contract> : f64
//CHECK-NEXT:              %1656 = arith.addf %1576, %1655 fastmath<contract> : f64
//CHECK-NEXT:              %1657 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %1658 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1659 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1660 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1661 = arith.extui %1660 : i32 to i64
//CHECK-NEXT:              %1662 = arith.index_cast %1661 : i64 to index
//CHECK-NEXT:              %1663 = arith.constant 1 : index
//CHECK-NEXT:              %1664 = arith.subi %1662, %1663 : index
//CHECK-NEXT:              %1665 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1666 = arith.extui %1665 : i32 to i64
//CHECK-NEXT:              %1667 = arith.index_cast %1666 : i64 to index
//CHECK-NEXT:              %1668 = arith.constant 1 : index
//CHECK-NEXT:              %1669 = arith.subi %1667, %1668 : index
//CHECK-NEXT:              %1670 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1671 = arith.extui %1670 : i32 to i64
//CHECK-NEXT:              %1672 = arith.index_cast %1671 : i64 to index
//CHECK-NEXT:              %1673 = arith.constant 1 : index
//CHECK-NEXT:              %1674 = arith.subi %1672, %1673 : index
//CHECK-NEXT:              %1675 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1676 = memref.load %1675[%1674, %1669, %1664] : memref<?x?x?xf64>
//CHECK-NEXT:              %1677 = math.copysign %1659, %1676 fastmath<contract> : f64
//CHECK-NEXT:              %1678 = arith.subf %1658, %1677 fastmath<contract> : f64
//CHECK-NEXT:              %1679 = arith.subf %1657, %1678 fastmath<contract> : f64
//CHECK-NEXT:              %1680 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1681 = arith.extui %1680 : i32 to i64
//CHECK-NEXT:              %1682 = arith.index_cast %1681 : i64 to index
//CHECK-NEXT:              %1683 = arith.constant 1 : index
//CHECK-NEXT:              %1684 = arith.subi %1682, %1683 : index
//CHECK-NEXT:              %1685 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1686 = arith.extui %1685 : i32 to i64
//CHECK-NEXT:              %1687 = arith.index_cast %1686 : i64 to index
//CHECK-NEXT:              %1688 = arith.constant 1 : index
//CHECK-NEXT:              %1689 = arith.subi %1687, %1688 : index
//CHECK-NEXT:              %1690 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1691 = arith.extui %1690 : i32 to i64
//CHECK-NEXT:              %1692 = arith.index_cast %1691 : i64 to index
//CHECK-NEXT:              %1693 = arith.constant 1 : index
//CHECK-NEXT:              %1694 = arith.subi %1692, %1693 : index
//CHECK-NEXT:              %1695 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1696 = memref.load %1695[%1694, %1689, %1684] : memref<?x?x?xf64>
//CHECK-NEXT:              %1697 = arith.mulf %1679, %1696 fastmath<contract> : f64
//CHECK-NEXT:              %1698 = arith.addf %1656, %1697 fastmath<contract> : f64
//CHECK-NEXT:              %1699 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1700 = arith.extui %1699 : i32 to i64
//CHECK-NEXT:              %1701 = arith.index_cast %1700 : i64 to index
//CHECK-NEXT:              %1702 = arith.constant 1 : index
//CHECK-NEXT:              %1703 = arith.subi %1701, %1702 : index
//CHECK-NEXT:              %1704 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1705 = arith.extui %1704 : i32 to i64
//CHECK-NEXT:              %1706 = arith.index_cast %1705 : i64 to index
//CHECK-NEXT:              %1707 = arith.constant 1 : index
//CHECK-NEXT:              %1708 = arith.subi %1706, %1707 : index
//CHECK-NEXT:              %1709 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1710 = arith.extui %1709 : i32 to i64
//CHECK-NEXT:              %1711 = arith.index_cast %1710 : i64 to index
//CHECK-NEXT:              %1712 = arith.constant 1 : index
//CHECK-NEXT:              %1713 = arith.subi %1711, %1712 : index
//CHECK-NEXT:              %1714 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1715 = memref.load %1714[%1713, %1708, %1703] : memref<?x?x?xf64>
//CHECK-NEXT:              %1716 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1717 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1718 = arith.extui %1717 : i32 to i64
//CHECK-NEXT:              %1719 = arith.index_cast %1718 : i64 to index
//CHECK-NEXT:              %1720 = arith.constant 1 : index
//CHECK-NEXT:              %1721 = arith.subi %1719, %1720 : index
//CHECK-NEXT:              %1722 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1723 = arith.extui %1722 : i32 to i64
//CHECK-NEXT:              %1724 = arith.index_cast %1723 : i64 to index
//CHECK-NEXT:              %1725 = arith.constant 1 : index
//CHECK-NEXT:              %1726 = arith.subi %1724, %1725 : index
//CHECK-NEXT:              %1727 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1728 = arith.extui %1727 : i32 to i64
//CHECK-NEXT:              %1729 = arith.index_cast %1728 : i64 to index
//CHECK-NEXT:              %1730 = arith.constant 1 : index
//CHECK-NEXT:              %1731 = arith.subi %1729, %1730 : index
//CHECK-NEXT:              %1732 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1733 = memref.load %1732[%1731, %1726, %1721] : memref<?x?x?xf64>
//CHECK-NEXT:              %1734 = math.copysign %1716, %1733 fastmath<contract> : f64
//CHECK-NEXT:              %1735 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1736 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1737 = arith.extui %1736 : i32 to i64
//CHECK-NEXT:              %1738 = arith.index_cast %1737 : i64 to index
//CHECK-NEXT:              %1739 = arith.constant 1 : index
//CHECK-NEXT:              %1740 = arith.subi %1738, %1739 : index
//CHECK-NEXT:              %1741 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1742 = arith.extui %1741 : i32 to i64
//CHECK-NEXT:              %1743 = arith.index_cast %1742 : i64 to index
//CHECK-NEXT:              %1744 = arith.constant 1 : index
//CHECK-NEXT:              %1745 = arith.subi %1743, %1744 : index
//CHECK-NEXT:              %1746 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1747 = arith.extui %1746 : i32 to i64
//CHECK-NEXT:              %1748 = arith.index_cast %1747 : i64 to index
//CHECK-NEXT:              %1749 = arith.constant 1 : index
//CHECK-NEXT:              %1750 = arith.subi %1748, %1749 : index
//CHECK-NEXT:              %1751 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1752 = memref.load %1751[%1750, %1745, %1740] : memref<?x?x?xf64>
//CHECK-NEXT:              %1753 = arith.mulf %1735, %1752 fastmath<contract> : f64
//CHECK-NEXT:              %1754 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %1755 = arith.mulf %1753, %1754 fastmath<contract> : f64
//CHECK-NEXT:              %1756 = arith.subf %1734, %1755 fastmath<contract> : f64
//CHECK-NEXT:              %1757 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1758 = arith.extui %1757 : i32 to i64
//CHECK-NEXT:              %1759 = arith.index_cast %1758 : i64 to index
//CHECK-NEXT:              %1760 = arith.constant 1 : index
//CHECK-NEXT:              %1761 = arith.subi %1759, %1760 : index
//CHECK-NEXT:              %1762 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1763 = arith.extui %1762 : i32 to i64
//CHECK-NEXT:              %1764 = arith.index_cast %1763 : i64 to index
//CHECK-NEXT:              %1765 = arith.constant 1 : index
//CHECK-NEXT:              %1766 = arith.subi %1764, %1765 : index
//CHECK-NEXT:              %1767 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1768 = arith.extui %1767 : i32 to i64
//CHECK-NEXT:              %1769 = arith.index_cast %1768 : i64 to index
//CHECK-NEXT:              %1770 = arith.constant 1 : index
//CHECK-NEXT:              %1771 = arith.subi %1769, %1770 : index
//CHECK-NEXT:              %1772 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1773 = memref.load %1772[%1771, %1766, %1761] : memref<?x?x?xf64>
//CHECK-NEXT:              %1774 = arith.mulf %1756, %1773 fastmath<contract> : f64
//CHECK-NEXT:              %1775 = arith.mulf %1715, %1774 fastmath<contract> : f64
//CHECK-NEXT:              %1776 = arith.addf %1698, %1775 fastmath<contract> : f64
//CHECK-NEXT:              %1777 = arith.mulf %1535, %1776 fastmath<contract> : f64
//CHECK-NEXT:              %1778 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1779 = arith.extui %1778 : i32 to i64
//CHECK-NEXT:              %1780 = arith.index_cast %1779 : i64 to index
//CHECK-NEXT:              %1781 = arith.constant 1 : index
//CHECK-NEXT:              %1782 = arith.subi %1780, %1781 : index
//CHECK-NEXT:              %1783 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1784 = arith.extui %1783 : i32 to i64
//CHECK-NEXT:              %1785 = arith.index_cast %1784 : i64 to index
//CHECK-NEXT:              %1786 = arith.constant 1 : index
//CHECK-NEXT:              %1787 = arith.subi %1785, %1786 : index
//CHECK-NEXT:              %1788 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1789 = arith.extui %1788 : i32 to i64
//CHECK-NEXT:              %1790 = arith.index_cast %1789 : i64 to index
//CHECK-NEXT:              %1791 = arith.constant 1 : index
//CHECK-NEXT:              %1792 = arith.subi %1790, %1791 : index
//CHECK-NEXT:              %1793 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %1777, %1793[%1792, %1787, %1782] : memref<?x?x?xf64>
//CHECK-NEXT:              %1794 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1795 = arith.extui %1794 : i32 to i64
//CHECK-NEXT:              %1796 = arith.index_cast %1795 : i64 to index
//CHECK-NEXT:              %1797 = arith.constant 1 : index
//CHECK-NEXT:              %1798 = arith.subi %1796, %1797 : index
//CHECK-NEXT:              %1799 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1800 = arith.extui %1799 : i32 to i64
//CHECK-NEXT:              %1801 = arith.index_cast %1800 : i64 to index
//CHECK-NEXT:              %1802 = arith.constant 1 : index
//CHECK-NEXT:              %1803 = arith.subi %1801, %1802 : index
//CHECK-NEXT:              %1804 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1805 = arith.extui %1804 : i32 to i64
//CHECK-NEXT:              %1806 = arith.index_cast %1805 : i64 to index
//CHECK-NEXT:              %1807 = arith.constant 1 : index
//CHECK-NEXT:              %1808 = arith.subi %1806, %1807 : index
//CHECK-NEXT:              %1809 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1810 = memref.load %1809[%1808, %1803, %1798] : memref<?x?x?xf64>
//CHECK-NEXT:              %1811 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1812 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1813 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1814 = arith.extui %1813 : i32 to i64
//CHECK-NEXT:              %1815 = arith.index_cast %1814 : i64 to index
//CHECK-NEXT:              %1816 = arith.constant 1 : index
//CHECK-NEXT:              %1817 = arith.subi %1815, %1816 : index
//CHECK-NEXT:              %1818 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1819 = arith.extui %1818 : i32 to i64
//CHECK-NEXT:              %1820 = arith.index_cast %1819 : i64 to index
//CHECK-NEXT:              %1821 = arith.constant 1 : index
//CHECK-NEXT:              %1822 = arith.subi %1820, %1821 : index
//CHECK-NEXT:              %1823 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1824 = arith.extui %1823 : i32 to i64
//CHECK-NEXT:              %1825 = arith.index_cast %1824 : i64 to index
//CHECK-NEXT:              %1826 = arith.constant 1 : index
//CHECK-NEXT:              %1827 = arith.subi %1825, %1826 : index
//CHECK-NEXT:              %1828 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1829 = memref.load %1828[%1827, %1822, %1817] : memref<?x?x?xf64>
//CHECK-NEXT:              %1830 = math.copysign %1812, %1829 fastmath<contract> : f64
//CHECK-NEXT:              %1831 = arith.subf %1811, %1830 fastmath<contract> : f64
//CHECK-NEXT:              %1832 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1833 = arith.extui %1832 : i32 to i64
//CHECK-NEXT:              %1834 = arith.index_cast %1833 : i64 to index
//CHECK-NEXT:              %1835 = arith.constant 1 : index
//CHECK-NEXT:              %1836 = arith.subi %1834, %1835 : index
//CHECK-NEXT:              %1837 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1838 = arith.constant 1 : i32
//CHECK-NEXT:              %1839 = arith.addi %1837, %1838 : i32
//CHECK-NEXT:              %1840 = arith.extui %1839 : i32 to i64
//CHECK-NEXT:              %1841 = arith.index_cast %1840 : i64 to index
//CHECK-NEXT:              %1842 = arith.constant 1 : index
//CHECK-NEXT:              %1843 = arith.subi %1841, %1842 : index
//CHECK-NEXT:              %1844 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1845 = arith.extui %1844 : i32 to i64
//CHECK-NEXT:              %1846 = arith.index_cast %1845 : i64 to index
//CHECK-NEXT:              %1847 = arith.constant 1 : index
//CHECK-NEXT:              %1848 = arith.subi %1846, %1847 : index
//CHECK-NEXT:              %1849 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1850 = memref.load %1849[%1848, %1843, %1836] : memref<?x?x?xf64>
//CHECK-NEXT:              %1851 = arith.mulf %1831, %1850 fastmath<contract> : f64
//CHECK-NEXT:              %1852 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1853 = arith.extui %1852 : i32 to i64
//CHECK-NEXT:              %1854 = arith.index_cast %1853 : i64 to index
//CHECK-NEXT:              %1855 = arith.constant 1 : index
//CHECK-NEXT:              %1856 = arith.subi %1854, %1855 : index
//CHECK-NEXT:              %1857 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1858 = arith.extui %1857 : i32 to i64
//CHECK-NEXT:              %1859 = arith.index_cast %1858 : i64 to index
//CHECK-NEXT:              %1860 = arith.constant 1 : index
//CHECK-NEXT:              %1861 = arith.subi %1859, %1860 : index
//CHECK-NEXT:              %1862 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1863 = arith.extui %1862 : i32 to i64
//CHECK-NEXT:              %1864 = arith.index_cast %1863 : i64 to index
//CHECK-NEXT:              %1865 = arith.constant 1 : index
//CHECK-NEXT:              %1866 = arith.subi %1864, %1865 : index
//CHECK-NEXT:              %1867 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1868 = memref.load %1867[%1866, %1861, %1856] : memref<?x?x?xf64>
//CHECK-NEXT:              %1869 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1870 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1871 = arith.extui %1870 : i32 to i64
//CHECK-NEXT:              %1872 = arith.index_cast %1871 : i64 to index
//CHECK-NEXT:              %1873 = arith.constant 1 : index
//CHECK-NEXT:              %1874 = arith.subi %1872, %1873 : index
//CHECK-NEXT:              %1875 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1876 = arith.extui %1875 : i32 to i64
//CHECK-NEXT:              %1877 = arith.index_cast %1876 : i64 to index
//CHECK-NEXT:              %1878 = arith.constant 1 : index
//CHECK-NEXT:              %1879 = arith.subi %1877, %1878 : index
//CHECK-NEXT:              %1880 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1881 = arith.extui %1880 : i32 to i64
//CHECK-NEXT:              %1882 = arith.index_cast %1881 : i64 to index
//CHECK-NEXT:              %1883 = arith.constant 1 : index
//CHECK-NEXT:              %1884 = arith.subi %1882, %1883 : index
//CHECK-NEXT:              %1885 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1886 = memref.load %1885[%1884, %1879, %1874] : memref<?x?x?xf64>
//CHECK-NEXT:              %1887 = math.copysign %1869, %1886 fastmath<contract> : f64
//CHECK-NEXT:              %1888 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1889 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1890 = arith.extui %1889 : i32 to i64
//CHECK-NEXT:              %1891 = arith.index_cast %1890 : i64 to index
//CHECK-NEXT:              %1892 = arith.constant 1 : index
//CHECK-NEXT:              %1893 = arith.subi %1891, %1892 : index
//CHECK-NEXT:              %1894 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1895 = arith.extui %1894 : i32 to i64
//CHECK-NEXT:              %1896 = arith.index_cast %1895 : i64 to index
//CHECK-NEXT:              %1897 = arith.constant 1 : index
//CHECK-NEXT:              %1898 = arith.subi %1896, %1897 : index
//CHECK-NEXT:              %1899 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1900 = arith.extui %1899 : i32 to i64
//CHECK-NEXT:              %1901 = arith.index_cast %1900 : i64 to index
//CHECK-NEXT:              %1902 = arith.constant 1 : index
//CHECK-NEXT:              %1903 = arith.subi %1901, %1902 : index
//CHECK-NEXT:              %1904 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1905 = memref.load %1904[%1903, %1898, %1893] : memref<?x?x?xf64>
//CHECK-NEXT:              %1906 = arith.mulf %1888, %1905 fastmath<contract> : f64
//CHECK-NEXT:              %1907 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %1908 = arith.mulf %1906, %1907 fastmath<contract> : f64
//CHECK-NEXT:              %1909 = arith.subf %1887, %1908 fastmath<contract> : f64
//CHECK-NEXT:              %1910 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1911 = arith.extui %1910 : i32 to i64
//CHECK-NEXT:              %1912 = arith.index_cast %1911 : i64 to index
//CHECK-NEXT:              %1913 = arith.constant 1 : index
//CHECK-NEXT:              %1914 = arith.subi %1912, %1913 : index
//CHECK-NEXT:              %1915 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1916 = arith.constant 1 : i32
//CHECK-NEXT:              %1917 = arith.addi %1915, %1916 : i32
//CHECK-NEXT:              %1918 = arith.extui %1917 : i32 to i64
//CHECK-NEXT:              %1919 = arith.index_cast %1918 : i64 to index
//CHECK-NEXT:              %1920 = arith.constant 1 : index
//CHECK-NEXT:              %1921 = arith.subi %1919, %1920 : index
//CHECK-NEXT:              %1922 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1923 = arith.extui %1922 : i32 to i64
//CHECK-NEXT:              %1924 = arith.index_cast %1923 : i64 to index
//CHECK-NEXT:              %1925 = arith.constant 1 : index
//CHECK-NEXT:              %1926 = arith.subi %1924, %1925 : index
//CHECK-NEXT:              %1927 = memref.load %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1928 = memref.load %1927[%1926, %1921, %1914] : memref<?x?x?xf64>
//CHECK-NEXT:              %1929 = arith.mulf %1909, %1928 fastmath<contract> : f64
//CHECK-NEXT:              %1930 = arith.mulf %1868, %1929 fastmath<contract> : f64
//CHECK-NEXT:              %1931 = arith.addf %1851, %1930 fastmath<contract> : f64
//CHECK-NEXT:              %1932 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %1933 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1934 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1935 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1936 = arith.extui %1935 : i32 to i64
//CHECK-NEXT:              %1937 = arith.index_cast %1936 : i64 to index
//CHECK-NEXT:              %1938 = arith.constant 1 : index
//CHECK-NEXT:              %1939 = arith.subi %1937, %1938 : index
//CHECK-NEXT:              %1940 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1941 = arith.extui %1940 : i32 to i64
//CHECK-NEXT:              %1942 = arith.index_cast %1941 : i64 to index
//CHECK-NEXT:              %1943 = arith.constant 1 : index
//CHECK-NEXT:              %1944 = arith.subi %1942, %1943 : index
//CHECK-NEXT:              %1945 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1946 = arith.extui %1945 : i32 to i64
//CHECK-NEXT:              %1947 = arith.index_cast %1946 : i64 to index
//CHECK-NEXT:              %1948 = arith.constant 1 : index
//CHECK-NEXT:              %1949 = arith.subi %1947, %1948 : index
//CHECK-NEXT:              %1950 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1951 = memref.load %1950[%1949, %1944, %1939] : memref<?x?x?xf64>
//CHECK-NEXT:              %1952 = math.copysign %1934, %1951 fastmath<contract> : f64
//CHECK-NEXT:              %1953 = arith.subf %1933, %1952 fastmath<contract> : f64
//CHECK-NEXT:              %1954 = arith.subf %1932, %1953 fastmath<contract> : f64
//CHECK-NEXT:              %1955 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1956 = arith.extui %1955 : i32 to i64
//CHECK-NEXT:              %1957 = arith.index_cast %1956 : i64 to index
//CHECK-NEXT:              %1958 = arith.constant 1 : index
//CHECK-NEXT:              %1959 = arith.subi %1957, %1958 : index
//CHECK-NEXT:              %1960 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1961 = arith.extui %1960 : i32 to i64
//CHECK-NEXT:              %1962 = arith.index_cast %1961 : i64 to index
//CHECK-NEXT:              %1963 = arith.constant 1 : index
//CHECK-NEXT:              %1964 = arith.subi %1962, %1963 : index
//CHECK-NEXT:              %1965 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1966 = arith.extui %1965 : i32 to i64
//CHECK-NEXT:              %1967 = arith.index_cast %1966 : i64 to index
//CHECK-NEXT:              %1968 = arith.constant 1 : index
//CHECK-NEXT:              %1969 = arith.subi %1967, %1968 : index
//CHECK-NEXT:              %1970 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1971 = memref.load %1970[%1969, %1964, %1959] : memref<?x?x?xf64>
//CHECK-NEXT:              %1972 = arith.mulf %1954, %1971 fastmath<contract> : f64
//CHECK-NEXT:              %1973 = arith.addf %1931, %1972 fastmath<contract> : f64
//CHECK-NEXT:              %1974 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1975 = arith.extui %1974 : i32 to i64
//CHECK-NEXT:              %1976 = arith.index_cast %1975 : i64 to index
//CHECK-NEXT:              %1977 = arith.constant 1 : index
//CHECK-NEXT:              %1978 = arith.subi %1976, %1977 : index
//CHECK-NEXT:              %1979 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1980 = arith.extui %1979 : i32 to i64
//CHECK-NEXT:              %1981 = arith.index_cast %1980 : i64 to index
//CHECK-NEXT:              %1982 = arith.constant 1 : index
//CHECK-NEXT:              %1983 = arith.subi %1981, %1982 : index
//CHECK-NEXT:              %1984 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %1985 = arith.extui %1984 : i32 to i64
//CHECK-NEXT:              %1986 = arith.index_cast %1985 : i64 to index
//CHECK-NEXT:              %1987 = arith.constant 1 : index
//CHECK-NEXT:              %1988 = arith.subi %1986, %1987 : index
//CHECK-NEXT:              %1989 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %1990 = memref.load %1989[%1988, %1983, %1978] : memref<?x?x?xf64>
//CHECK-NEXT:              %1991 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %1992 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %1993 = arith.extui %1992 : i32 to i64
//CHECK-NEXT:              %1994 = arith.index_cast %1993 : i64 to index
//CHECK-NEXT:              %1995 = arith.constant 1 : index
//CHECK-NEXT:              %1996 = arith.subi %1994, %1995 : index
//CHECK-NEXT:              %1997 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %1998 = arith.extui %1997 : i32 to i64
//CHECK-NEXT:              %1999 = arith.index_cast %1998 : i64 to index
//CHECK-NEXT:              %2000 = arith.constant 1 : index
//CHECK-NEXT:              %2001 = arith.subi %1999, %2000 : index
//CHECK-NEXT:              %2002 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2003 = arith.extui %2002 : i32 to i64
//CHECK-NEXT:              %2004 = arith.index_cast %2003 : i64 to index
//CHECK-NEXT:              %2005 = arith.constant 1 : index
//CHECK-NEXT:              %2006 = arith.subi %2004, %2005 : index
//CHECK-NEXT:              %2007 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2008 = memref.load %2007[%2006, %2001, %1996] : memref<?x?x?xf64>
//CHECK-NEXT:              %2009 = math.copysign %1991, %2008 fastmath<contract> : f64
//CHECK-NEXT:              %2010 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %2011 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2012 = arith.extui %2011 : i32 to i64
//CHECK-NEXT:              %2013 = arith.index_cast %2012 : i64 to index
//CHECK-NEXT:              %2014 = arith.constant 1 : index
//CHECK-NEXT:              %2015 = arith.subi %2013, %2014 : index
//CHECK-NEXT:              %2016 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2017 = arith.extui %2016 : i32 to i64
//CHECK-NEXT:              %2018 = arith.index_cast %2017 : i64 to index
//CHECK-NEXT:              %2019 = arith.constant 1 : index
//CHECK-NEXT:              %2020 = arith.subi %2018, %2019 : index
//CHECK-NEXT:              %2021 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2022 = arith.extui %2021 : i32 to i64
//CHECK-NEXT:              %2023 = arith.index_cast %2022 : i64 to index
//CHECK-NEXT:              %2024 = arith.constant 1 : index
//CHECK-NEXT:              %2025 = arith.subi %2023, %2024 : index
//CHECK-NEXT:              %2026 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2027 = memref.load %2026[%2025, %2020, %2015] : memref<?x?x?xf64>
//CHECK-NEXT:              %2028 = arith.mulf %2010, %2027 fastmath<contract> : f64
//CHECK-NEXT:              %2029 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %2030 = arith.mulf %2028, %2029 fastmath<contract> : f64
//CHECK-NEXT:              %2031 = arith.subf %2009, %2030 fastmath<contract> : f64
//CHECK-NEXT:              %2032 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2033 = arith.extui %2032 : i32 to i64
//CHECK-NEXT:              %2034 = arith.index_cast %2033 : i64 to index
//CHECK-NEXT:              %2035 = arith.constant 1 : index
//CHECK-NEXT:              %2036 = arith.subi %2034, %2035 : index
//CHECK-NEXT:              %2037 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2038 = arith.extui %2037 : i32 to i64
//CHECK-NEXT:              %2039 = arith.index_cast %2038 : i64 to index
//CHECK-NEXT:              %2040 = arith.constant 1 : index
//CHECK-NEXT:              %2041 = arith.subi %2039, %2040 : index
//CHECK-NEXT:              %2042 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2043 = arith.extui %2042 : i32 to i64
//CHECK-NEXT:              %2044 = arith.index_cast %2043 : i64 to index
//CHECK-NEXT:              %2045 = arith.constant 1 : index
//CHECK-NEXT:              %2046 = arith.subi %2044, %2045 : index
//CHECK-NEXT:              %2047 = memref.load %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2048 = memref.load %2047[%2046, %2041, %2036] : memref<?x?x?xf64>
//CHECK-NEXT:              %2049 = arith.mulf %2031, %2048 fastmath<contract> : f64
//CHECK-NEXT:              %2050 = arith.mulf %1990, %2049 fastmath<contract> : f64
//CHECK-NEXT:              %2051 = arith.addf %1973, %2050 fastmath<contract> : f64
//CHECK-NEXT:              %2052 = arith.mulf %1810, %2051 fastmath<contract> : f64
//CHECK-NEXT:              %2053 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2054 = arith.extui %2053 : i32 to i64
//CHECK-NEXT:              %2055 = arith.index_cast %2054 : i64 to index
//CHECK-NEXT:              %2056 = arith.constant 1 : index
//CHECK-NEXT:              %2057 = arith.subi %2055, %2056 : index
//CHECK-NEXT:              %2058 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2059 = arith.extui %2058 : i32 to i64
//CHECK-NEXT:              %2060 = arith.index_cast %2059 : i64 to index
//CHECK-NEXT:              %2061 = arith.constant 1 : index
//CHECK-NEXT:              %2062 = arith.subi %2060, %2061 : index
//CHECK-NEXT:              %2063 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2064 = arith.extui %2063 : i32 to i64
//CHECK-NEXT:              %2065 = arith.index_cast %2064 : i64 to index
//CHECK-NEXT:              %2066 = arith.constant 1 : index
//CHECK-NEXT:              %2067 = arith.subi %2065, %2066 : index
//CHECK-NEXT:              %2068 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %2052, %2068[%2067, %2062, %2057] : memref<?x?x?xf64>
//CHECK-NEXT:              %2069 = arith.addi %1517, %1512 : index
//CHECK-NEXT:              %2070 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2071 = arith.index_cast %1512 : index to i32
//CHECK-NEXT:              %2072 = arith.addi %2070, %2071 : i32
//CHECK-NEXT:              scf.yield %2072 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %1516, %1[] : memref<i32>
//CHECK-NEXT:            %2073 = arith.addi %1504, %1499 : index
//CHECK-NEXT:            %2074 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2075 = arith.index_cast %1499 : index to i32
//CHECK-NEXT:            %2076 = arith.addi %2074, %2075 : i32
//CHECK-NEXT:            scf.yield %2076 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %1503, %2[] : memref<i32>
//CHECK-NEXT:          %2077 = arith.addi %1491, %1486 : index
//CHECK-NEXT:          %2078 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %2079 = arith.index_cast %1486 : index to i32
//CHECK-NEXT:          %2080 = arith.addi %2078, %2079 : i32
//CHECK-NEXT:          scf.yield %2080 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %1490, %3[] : memref<i32>
//CHECK-NEXT:        %2081 = arith.constant 1 : i32
//CHECK-NEXT:        %2082 = arith.index_cast %2081 : i32 to index
//CHECK-NEXT:        %2083 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %2084 = arith.constant 1 : i32
//CHECK-NEXT:        %2085 = arith.subi %2083, %2084 : i32
//CHECK-NEXT:        %2086 = arith.index_cast %2085 : i32 to index
//CHECK-NEXT:        %2087 = arith.constant 1 : index
//CHECK-NEXT:        %2088 = arith.index_cast %2082 : index to i32
//CHECK-NEXT:        %2089 = arith.constant 1 : index
//CHECK-NEXT:        %2090 = arith.addi %2086, %2089 : index
//CHECK-NEXT:        %2091 = scf.for %2092 = %2082 to %2090 step %2087 iter_args(%2093 = %2088) -> (i32) {
//CHECK-NEXT:          memref.store %2093, %3[] : memref<i32>
//CHECK-NEXT:          %2094 = arith.constant 2 : i32
//CHECK-NEXT:          %2095 = arith.index_cast %2094 : i32 to index
//CHECK-NEXT:          %2096 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %2097 = arith.constant 1 : i32
//CHECK-NEXT:          %2098 = arith.subi %2096, %2097 : i32
//CHECK-NEXT:          %2099 = arith.index_cast %2098 : i32 to index
//CHECK-NEXT:          %2100 = arith.constant 1 : index
//CHECK-NEXT:          %2101 = arith.index_cast %2095 : index to i32
//CHECK-NEXT:          %2102 = arith.constant 1 : index
//CHECK-NEXT:          %2103 = arith.addi %2099, %2102 : index
//CHECK-NEXT:          %2104 = scf.for %2105 = %2095 to %2103 step %2100 iter_args(%2106 = %2101) -> (i32) {
//CHECK-NEXT:            memref.store %2106, %2[] : memref<i32>
//CHECK-NEXT:            %2107 = arith.constant 2 : i32
//CHECK-NEXT:            %2108 = arith.index_cast %2107 : i32 to index
//CHECK-NEXT:            %2109 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %2110 = arith.constant 1 : i32
//CHECK-NEXT:            %2111 = arith.subi %2109, %2110 : i32
//CHECK-NEXT:            %2112 = arith.index_cast %2111 : i32 to index
//CHECK-NEXT:            %2113 = arith.constant 1 : index
//CHECK-NEXT:            %2114 = arith.index_cast %2108 : index to i32
//CHECK-NEXT:            %2115 = arith.constant 1 : index
//CHECK-NEXT:            %2116 = arith.addi %2112, %2115 : index
//CHECK-NEXT:            %2117 = scf.for %2118 = %2108 to %2116 step %2113 iter_args(%2119 = %2114) -> (i32) {
//CHECK-NEXT:              memref.store %2119, %1[] : memref<i32>
//CHECK-NEXT:              %2120 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2121 = arith.extui %2120 : i32 to i64
//CHECK-NEXT:              %2122 = arith.index_cast %2121 : i64 to index
//CHECK-NEXT:              %2123 = arith.constant 1 : index
//CHECK-NEXT:              %2124 = arith.subi %2122, %2123 : index
//CHECK-NEXT:              %2125 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2126 = arith.extui %2125 : i32 to i64
//CHECK-NEXT:              %2127 = arith.index_cast %2126 : i64 to index
//CHECK-NEXT:              %2128 = arith.constant 1 : index
//CHECK-NEXT:              %2129 = arith.subi %2127, %2128 : index
//CHECK-NEXT:              %2130 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2131 = arith.extui %2130 : i32 to i64
//CHECK-NEXT:              %2132 = arith.index_cast %2131 : i64 to index
//CHECK-NEXT:              %2133 = arith.constant 1 : index
//CHECK-NEXT:              %2134 = arith.subi %2132, %2133 : index
//CHECK-NEXT:              %2135 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2136 = memref.load %2135[%2134, %2129, %2124] : memref<?x?x?xf64>
//CHECK-NEXT:              %2137 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %2138 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2139 = arith.extui %2138 : i32 to i64
//CHECK-NEXT:              %2140 = arith.index_cast %2139 : i64 to index
//CHECK-NEXT:              %2141 = arith.constant 1 : index
//CHECK-NEXT:              %2142 = arith.subi %2140, %2141 : index
//CHECK-NEXT:              %2143 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2144 = arith.extui %2143 : i32 to i64
//CHECK-NEXT:              %2145 = arith.index_cast %2144 : i64 to index
//CHECK-NEXT:              %2146 = arith.constant 1 : index
//CHECK-NEXT:              %2147 = arith.subi %2145, %2146 : index
//CHECK-NEXT:              %2148 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2149 = arith.extui %2148 : i32 to i64
//CHECK-NEXT:              %2150 = arith.index_cast %2149 : i64 to index
//CHECK-NEXT:              %2151 = arith.constant 1 : index
//CHECK-NEXT:              %2152 = arith.subi %2150, %2151 : index
//CHECK-NEXT:              %2153 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2154 = memref.load %2153[%2152, %2147, %2142] : memref<?x?x?xf64>
//CHECK-NEXT:              %2155 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2156 = arith.constant 1 : i32
//CHECK-NEXT:              %2157 = arith.subi %2155, %2156 : i32
//CHECK-NEXT:              %2158 = arith.extui %2157 : i32 to i64
//CHECK-NEXT:              %2159 = arith.index_cast %2158 : i64 to index
//CHECK-NEXT:              %2160 = arith.constant 1 : index
//CHECK-NEXT:              %2161 = arith.subi %2159, %2160 : index
//CHECK-NEXT:              %2162 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2163 = arith.extui %2162 : i32 to i64
//CHECK-NEXT:              %2164 = arith.index_cast %2163 : i64 to index
//CHECK-NEXT:              %2165 = arith.constant 1 : index
//CHECK-NEXT:              %2166 = arith.subi %2164, %2165 : index
//CHECK-NEXT:              %2167 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2168 = arith.extui %2167 : i32 to i64
//CHECK-NEXT:              %2169 = arith.index_cast %2168 : i64 to index
//CHECK-NEXT:              %2170 = arith.constant 1 : index
//CHECK-NEXT:              %2171 = arith.subi %2169, %2170 : index
//CHECK-NEXT:              %2172 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2173 = memref.load %2172[%2171, %2166, %2161] : memref<?x?x?xf64>
//CHECK-NEXT:              %2174 = arith.subf %2154, %2173 fastmath<contract> : f64
//CHECK-NEXT:              %2175 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2176 = arith.extui %2175 : i32 to i64
//CHECK-NEXT:              %2177 = arith.index_cast %2176 : i64 to index
//CHECK-NEXT:              %2178 = arith.constant 1 : index
//CHECK-NEXT:              %2179 = arith.subi %2177, %2178 : index
//CHECK-NEXT:              %2180 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2181 = arith.extui %2180 : i32 to i64
//CHECK-NEXT:              %2182 = arith.index_cast %2181 : i64 to index
//CHECK-NEXT:              %2183 = arith.constant 1 : index
//CHECK-NEXT:              %2184 = arith.subi %2182, %2183 : index
//CHECK-NEXT:              %2185 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2186 = arith.extui %2185 : i32 to i64
//CHECK-NEXT:              %2187 = arith.index_cast %2186 : i64 to index
//CHECK-NEXT:              %2188 = arith.constant 1 : index
//CHECK-NEXT:              %2189 = arith.subi %2187, %2188 : index
//CHECK-NEXT:              %2190 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2191 = memref.load %2190[%2189, %2184, %2179] : memref<?x?x?xf64>
//CHECK-NEXT:              %2192 = arith.addf %2174, %2191 fastmath<contract> : f64
//CHECK-NEXT:              %2193 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2194 = arith.extui %2193 : i32 to i64
//CHECK-NEXT:              %2195 = arith.index_cast %2194 : i64 to index
//CHECK-NEXT:              %2196 = arith.constant 1 : index
//CHECK-NEXT:              %2197 = arith.subi %2195, %2196 : index
//CHECK-NEXT:              %2198 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2199 = arith.constant 1 : i32
//CHECK-NEXT:              %2200 = arith.subi %2198, %2199 : i32
//CHECK-NEXT:              %2201 = arith.extui %2200 : i32 to i64
//CHECK-NEXT:              %2202 = arith.index_cast %2201 : i64 to index
//CHECK-NEXT:              %2203 = arith.constant 1 : index
//CHECK-NEXT:              %2204 = arith.subi %2202, %2203 : index
//CHECK-NEXT:              %2205 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2206 = arith.extui %2205 : i32 to i64
//CHECK-NEXT:              %2207 = arith.index_cast %2206 : i64 to index
//CHECK-NEXT:              %2208 = arith.constant 1 : index
//CHECK-NEXT:              %2209 = arith.subi %2207, %2208 : index
//CHECK-NEXT:              %2210 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2211 = memref.load %2210[%2209, %2204, %2197] : memref<?x?x?xf64>
//CHECK-NEXT:              %2212 = arith.subf %2192, %2211 fastmath<contract> : f64
//CHECK-NEXT:              %2213 = arith.mulf %2137, %2212 fastmath<contract> : f64
//CHECK-NEXT:              %2214 = arith.negf %2213 {fastmath = #arith.fastmath<contract>} : f64
//CHECK-NEXT:              %2215 = arith.addf %2136, %2214 fastmath<contract> : f64
//CHECK-NEXT:              %2216 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2217 = arith.extui %2216 : i32 to i64
//CHECK-NEXT:              %2218 = arith.index_cast %2217 : i64 to index
//CHECK-NEXT:              %2219 = arith.constant 1 : index
//CHECK-NEXT:              %2220 = arith.subi %2218, %2219 : index
//CHECK-NEXT:              %2221 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2222 = arith.extui %2221 : i32 to i64
//CHECK-NEXT:              %2223 = arith.index_cast %2222 : i64 to index
//CHECK-NEXT:              %2224 = arith.constant 1 : index
//CHECK-NEXT:              %2225 = arith.subi %2223, %2224 : index
//CHECK-NEXT:              %2226 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2227 = arith.extui %2226 : i32 to i64
//CHECK-NEXT:              %2228 = arith.index_cast %2227 : i64 to index
//CHECK-NEXT:              %2229 = arith.constant 1 : index
//CHECK-NEXT:              %2230 = arith.subi %2228, %2229 : index
//CHECK-NEXT:              %2231 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %2215, %2231[%2230, %2225, %2220] : memref<?x?x?xf64>
//CHECK-NEXT:              %2232 = arith.addi %2118, %2113 : index
//CHECK-NEXT:              %2233 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2234 = arith.index_cast %2113 : index to i32
//CHECK-NEXT:              %2235 = arith.addi %2233, %2234 : i32
//CHECK-NEXT:              scf.yield %2235 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %2117, %1[] : memref<i32>
//CHECK-NEXT:            %2236 = arith.addi %2105, %2100 : index
//CHECK-NEXT:            %2237 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2238 = arith.index_cast %2100 : index to i32
//CHECK-NEXT:            %2239 = arith.addi %2237, %2238 : i32
//CHECK-NEXT:            scf.yield %2239 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %2104, %2[] : memref<i32>
//CHECK-NEXT:          %2240 = arith.addi %2092, %2087 : index
//CHECK-NEXT:          %2241 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %2242 = arith.index_cast %2087 : index to i32
//CHECK-NEXT:          %2243 = arith.addi %2241, %2242 : i32
//CHECK-NEXT:          scf.yield %2243 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %2091, %3[] : memref<i32>
//CHECK-NEXT:        %2244 = arith.constant 1 : i32
//CHECK-NEXT:        %2245 = arith.index_cast %2244 : i32 to index
//CHECK-NEXT:        %2246 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %2247 = arith.index_cast %2246 : i32 to index
//CHECK-NEXT:        %2248 = arith.constant 1 : index
//CHECK-NEXT:        %2249 = arith.index_cast %2245 : index to i32
//CHECK-NEXT:        %2250 = arith.constant 1 : index
//CHECK-NEXT:        %2251 = arith.addi %2247, %2250 : index
//CHECK-NEXT:        %2252 = scf.for %2253 = %2245 to %2251 step %2248 iter_args(%2254 = %2249) -> (i32) {
//CHECK-NEXT:          memref.store %2254, %2[] : memref<i32>
//CHECK-NEXT:          %2255 = arith.constant 1 : i32
//CHECK-NEXT:          %2256 = arith.index_cast %2255 : i32 to index
//CHECK-NEXT:          %2257 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %2258 = arith.index_cast %2257 : i32 to index
//CHECK-NEXT:          %2259 = arith.constant 1 : index
//CHECK-NEXT:          %2260 = arith.index_cast %2256 : index to i32
//CHECK-NEXT:          %2261 = arith.constant 1 : index
//CHECK-NEXT:          %2262 = arith.addi %2258, %2261 : index
//CHECK-NEXT:          %2263 = scf.for %2264 = %2256 to %2262 step %2259 iter_args(%2265 = %2260) -> (i32) {
//CHECK-NEXT:            memref.store %2265, %1[] : memref<i32>
//CHECK-NEXT:            %2266 = arith.constant 0.000000e+00 : f64
//CHECK-NEXT:            %2267 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %2268 = arith.extui %2267 : i32 to i64
//CHECK-NEXT:            %2269 = arith.index_cast %2268 : i64 to index
//CHECK-NEXT:            %2270 = arith.constant 1 : index
//CHECK-NEXT:            %2271 = arith.subi %2269, %2270 : index
//CHECK-NEXT:            %2272 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2273 = arith.extui %2272 : i32 to i64
//CHECK-NEXT:            %2274 = arith.index_cast %2273 : i64 to index
//CHECK-NEXT:            %2275 = arith.constant 1 : index
//CHECK-NEXT:            %2276 = arith.subi %2274, %2275 : index
//CHECK-NEXT:            %2277 = arith.constant 1 : index
//CHECK-NEXT:            %2278 = arith.constant 1 : index
//CHECK-NEXT:            %2279 = arith.subi %2277, %2278 : index
//CHECK-NEXT:            %2280 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %2266, %2280[%2279, %2276, %2271] : memref<?x?x?xf64>
//CHECK-NEXT:            %2281 = arith.constant 0.000000e+00 : f64
//CHECK-NEXT:            %2282 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %2283 = arith.extui %2282 : i32 to i64
//CHECK-NEXT:            %2284 = arith.index_cast %2283 : i64 to index
//CHECK-NEXT:            %2285 = arith.constant 1 : index
//CHECK-NEXT:            %2286 = arith.subi %2284, %2285 : index
//CHECK-NEXT:            %2287 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2288 = arith.extui %2287 : i32 to i64
//CHECK-NEXT:            %2289 = arith.index_cast %2288 : i64 to index
//CHECK-NEXT:            %2290 = arith.constant 1 : index
//CHECK-NEXT:            %2291 = arith.subi %2289, %2290 : index
//CHECK-NEXT:            %2292 = memref.load %6[] : memref<i32>
//CHECK-NEXT:            %2293 = arith.extui %2292 : i32 to i64
//CHECK-NEXT:            %2294 = arith.index_cast %2293 : i64 to index
//CHECK-NEXT:            %2295 = arith.constant 1 : index
//CHECK-NEXT:            %2296 = arith.subi %2294, %2295 : index
//CHECK-NEXT:            %2297 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %2281, %2297[%2296, %2291, %2286] : memref<?x?x?xf64>
//CHECK-NEXT:            %2298 = arith.addi %2264, %2259 : index
//CHECK-NEXT:            %2299 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %2300 = arith.index_cast %2259 : index to i32
//CHECK-NEXT:            %2301 = arith.addi %2299, %2300 : i32
//CHECK-NEXT:            scf.yield %2301 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %2263, %1[] : memref<i32>
//CHECK-NEXT:          %2302 = arith.addi %2253, %2248 : index
//CHECK-NEXT:          %2303 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %2304 = arith.index_cast %2248 : index to i32
//CHECK-NEXT:          %2305 = arith.addi %2303, %2304 : i32
//CHECK-NEXT:          scf.yield %2305 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %2252, %2[] : memref<i32>
//CHECK-NEXT:        %2306 = arith.constant 2 : i32
//CHECK-NEXT:        %2307 = arith.index_cast %2306 : i32 to index
//CHECK-NEXT:        %2308 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %2309 = arith.constant 1 : i32
//CHECK-NEXT:        %2310 = arith.subi %2308, %2309 : i32
//CHECK-NEXT:        %2311 = arith.index_cast %2310 : i32 to index
//CHECK-NEXT:        %2312 = arith.constant 1 : index
//CHECK-NEXT:        %2313 = arith.index_cast %2307 : index to i32
//CHECK-NEXT:        %2314 = arith.constant 1 : index
//CHECK-NEXT:        %2315 = arith.addi %2311, %2314 : index
//CHECK-NEXT:        %2316 = scf.for %2317 = %2307 to %2315 step %2312 iter_args(%2318 = %2313) -> (i32) {
//CHECK-NEXT:          memref.store %2318, %3[] : memref<i32>
//CHECK-NEXT:          %2319 = arith.constant 1 : i32
//CHECK-NEXT:          %2320 = arith.index_cast %2319 : i32 to index
//CHECK-NEXT:          %2321 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %2322 = arith.index_cast %2321 : i32 to index
//CHECK-NEXT:          %2323 = arith.constant 1 : index
//CHECK-NEXT:          %2324 = arith.index_cast %2320 : index to i32
//CHECK-NEXT:          %2325 = arith.constant 1 : index
//CHECK-NEXT:          %2326 = arith.addi %2322, %2325 : index
//CHECK-NEXT:          %2327 = scf.for %2328 = %2320 to %2326 step %2323 iter_args(%2329 = %2324) -> (i32) {
//CHECK-NEXT:            memref.store %2329, %2[] : memref<i32>
//CHECK-NEXT:            %2330 = arith.constant 1 : i32
//CHECK-NEXT:            %2331 = arith.index_cast %2330 : i32 to index
//CHECK-NEXT:            %2332 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %2333 = arith.index_cast %2332 : i32 to index
//CHECK-NEXT:            %2334 = arith.constant 1 : index
//CHECK-NEXT:            %2335 = arith.index_cast %2331 : index to i32
//CHECK-NEXT:            %2336 = arith.constant 1 : index
//CHECK-NEXT:            %2337 = arith.addi %2333, %2336 : index
//CHECK-NEXT:            %2338 = scf.for %2339 = %2331 to %2337 step %2334 iter_args(%2340 = %2335) -> (i32) {
//CHECK-NEXT:              memref.store %2340, %1[] : memref<i32>
//CHECK-NEXT:              %2341 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2342 = arith.extui %2341 : i32 to i64
//CHECK-NEXT:              %2343 = arith.index_cast %2342 : i64 to index
//CHECK-NEXT:              %2344 = arith.constant 1 : index
//CHECK-NEXT:              %2345 = arith.subi %2343, %2344 : index
//CHECK-NEXT:              %2346 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2347 = arith.extui %2346 : i32 to i64
//CHECK-NEXT:              %2348 = arith.index_cast %2347 : i64 to index
//CHECK-NEXT:              %2349 = arith.constant 1 : index
//CHECK-NEXT:              %2350 = arith.subi %2348, %2349 : index
//CHECK-NEXT:              %2351 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2352 = arith.extui %2351 : i32 to i64
//CHECK-NEXT:              %2353 = arith.index_cast %2352 : i64 to index
//CHECK-NEXT:              %2354 = arith.constant 1 : index
//CHECK-NEXT:              %2355 = arith.subi %2353, %2354 : index
//CHECK-NEXT:              %2356 = memref.load %15[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2357 = memref.load %2356[%2355, %2350, %2345] : memref<?x?x?xf64>
//CHECK-NEXT:              %2358 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2359 = arith.extui %2358 : i32 to i64
//CHECK-NEXT:              %2360 = arith.index_cast %2359 : i64 to index
//CHECK-NEXT:              %2361 = arith.constant 1 : index
//CHECK-NEXT:              %2362 = arith.subi %2360, %2361 : index
//CHECK-NEXT:              %2363 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2364 = arith.extui %2363 : i32 to i64
//CHECK-NEXT:              %2365 = arith.index_cast %2364 : i64 to index
//CHECK-NEXT:              %2366 = arith.constant 1 : index
//CHECK-NEXT:              %2367 = arith.subi %2365, %2366 : index
//CHECK-NEXT:              %2368 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2369 = arith.constant 1 : i32
//CHECK-NEXT:              %2370 = arith.subi %2368, %2369 : i32
//CHECK-NEXT:              %2371 = arith.extui %2370 : i32 to i64
//CHECK-NEXT:              %2372 = arith.index_cast %2371 : i64 to index
//CHECK-NEXT:              %2373 = arith.constant 1 : index
//CHECK-NEXT:              %2374 = arith.subi %2372, %2373 : index
//CHECK-NEXT:              %2375 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2376 = memref.load %2375[%2374, %2367, %2362] : memref<?x?x?xf64>
//CHECK-NEXT:              %2377 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2378 = arith.extui %2377 : i32 to i64
//CHECK-NEXT:              %2379 = arith.index_cast %2378 : i64 to index
//CHECK-NEXT:              %2380 = arith.constant 1 : index
//CHECK-NEXT:              %2381 = arith.subi %2379, %2380 : index
//CHECK-NEXT:              %2382 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2383 = arith.extui %2382 : i32 to i64
//CHECK-NEXT:              %2384 = arith.index_cast %2383 : i64 to index
//CHECK-NEXT:              %2385 = arith.constant 1 : index
//CHECK-NEXT:              %2386 = arith.subi %2384, %2385 : index
//CHECK-NEXT:              %2387 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2388 = arith.extui %2387 : i32 to i64
//CHECK-NEXT:              %2389 = arith.index_cast %2388 : i64 to index
//CHECK-NEXT:              %2390 = arith.constant 1 : index
//CHECK-NEXT:              %2391 = arith.subi %2389, %2390 : index
//CHECK-NEXT:              %2392 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2393 = memref.load %2392[%2391, %2386, %2381] : memref<?x?x?xf64>
//CHECK-NEXT:              %2394 = arith.subf %2376, %2393 fastmath<contract> : f64
//CHECK-NEXT:              %2395 = arith.mulf %2357, %2394 fastmath<contract> : f64
//CHECK-NEXT:              %2396 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2397 = arith.extui %2396 : i32 to i64
//CHECK-NEXT:              %2398 = arith.index_cast %2397 : i64 to index
//CHECK-NEXT:              %2399 = arith.constant 1 : index
//CHECK-NEXT:              %2400 = arith.subi %2398, %2399 : index
//CHECK-NEXT:              %2401 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2402 = arith.extui %2401 : i32 to i64
//CHECK-NEXT:              %2403 = arith.index_cast %2402 : i64 to index
//CHECK-NEXT:              %2404 = arith.constant 1 : index
//CHECK-NEXT:              %2405 = arith.subi %2403, %2404 : index
//CHECK-NEXT:              %2406 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2407 = arith.extui %2406 : i32 to i64
//CHECK-NEXT:              %2408 = arith.index_cast %2407 : i64 to index
//CHECK-NEXT:              %2409 = arith.constant 1 : index
//CHECK-NEXT:              %2410 = arith.subi %2408, %2409 : index
//CHECK-NEXT:              %2411 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %2395, %2411[%2410, %2405, %2400] : memref<?x?x?xf64>
//CHECK-NEXT:              %2412 = arith.addi %2339, %2334 : index
//CHECK-NEXT:              %2413 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2414 = arith.index_cast %2334 : index to i32
//CHECK-NEXT:              %2415 = arith.addi %2413, %2414 : i32
//CHECK-NEXT:              scf.yield %2415 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %2338, %1[] : memref<i32>
//CHECK-NEXT:            %2416 = arith.addi %2328, %2323 : index
//CHECK-NEXT:            %2417 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2418 = arith.index_cast %2323 : index to i32
//CHECK-NEXT:            %2419 = arith.addi %2417, %2418 : i32
//CHECK-NEXT:            scf.yield %2419 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %2327, %2[] : memref<i32>
//CHECK-NEXT:          %2420 = arith.addi %2317, %2312 : index
//CHECK-NEXT:          %2421 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %2422 = arith.index_cast %2312 : index to i32
//CHECK-NEXT:          %2423 = arith.addi %2421, %2422 : i32
//CHECK-NEXT:          scf.yield %2423 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %2316, %3[] : memref<i32>
//CHECK-NEXT:        %2424 = arith.constant 1 : i32
//CHECK-NEXT:        %2425 = arith.index_cast %2424 : i32 to index
//CHECK-NEXT:        %2426 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %2427 = arith.index_cast %2426 : i32 to index
//CHECK-NEXT:        %2428 = arith.constant 1 : index
//CHECK-NEXT:        %2429 = arith.index_cast %2425 : index to i32
//CHECK-NEXT:        %2430 = arith.constant 1 : index
//CHECK-NEXT:        %2431 = arith.addi %2427, %2430 : index
//CHECK-NEXT:        %2432 = scf.for %2433 = %2425 to %2431 step %2428 iter_args(%2434 = %2429) -> (i32) {
//CHECK-NEXT:          memref.store %2434, %2[] : memref<i32>
//CHECK-NEXT:          %2435 = arith.constant 1 : i32
//CHECK-NEXT:          %2436 = arith.index_cast %2435 : i32 to index
//CHECK-NEXT:          %2437 = memref.load %4[] : memref<i32>
//CHECK-NEXT:          %2438 = arith.index_cast %2437 : i32 to index
//CHECK-NEXT:          %2439 = arith.constant 1 : index
//CHECK-NEXT:          %2440 = arith.index_cast %2436 : index to i32
//CHECK-NEXT:          %2441 = arith.constant 1 : index
//CHECK-NEXT:          %2442 = arith.addi %2438, %2441 : index
//CHECK-NEXT:          %2443 = scf.for %2444 = %2436 to %2442 step %2439 iter_args(%2445 = %2440) -> (i32) {
//CHECK-NEXT:            memref.store %2445, %1[] : memref<i32>
//CHECK-NEXT:            %2446 = arith.constant 0.000000e+00 : f64
//CHECK-NEXT:            %2447 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %2448 = arith.extui %2447 : i32 to i64
//CHECK-NEXT:            %2449 = arith.index_cast %2448 : i64 to index
//CHECK-NEXT:            %2450 = arith.constant 1 : index
//CHECK-NEXT:            %2451 = arith.subi %2449, %2450 : index
//CHECK-NEXT:            %2452 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2453 = arith.extui %2452 : i32 to i64
//CHECK-NEXT:            %2454 = arith.index_cast %2453 : i64 to index
//CHECK-NEXT:            %2455 = arith.constant 1 : index
//CHECK-NEXT:            %2456 = arith.subi %2454, %2455 : index
//CHECK-NEXT:            %2457 = arith.constant 1 : index
//CHECK-NEXT:            %2458 = arith.constant 1 : index
//CHECK-NEXT:            %2459 = arith.subi %2457, %2458 : index
//CHECK-NEXT:            %2460 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:            memref.store %2446, %2460[%2459, %2456, %2451] : memref<?x?x?xf64>
//CHECK-NEXT:            %2461 = arith.addi %2444, %2439 : index
//CHECK-NEXT:            %2462 = memref.load %1[] : memref<i32>
//CHECK-NEXT:            %2463 = arith.index_cast %2439 : index to i32
//CHECK-NEXT:            %2464 = arith.addi %2462, %2463 : i32
//CHECK-NEXT:            scf.yield %2464 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %2443, %1[] : memref<i32>
//CHECK-NEXT:          %2465 = arith.addi %2433, %2428 : index
//CHECK-NEXT:          %2466 = memref.load %2[] : memref<i32>
//CHECK-NEXT:          %2467 = arith.index_cast %2428 : index to i32
//CHECK-NEXT:          %2468 = arith.addi %2466, %2467 : i32
//CHECK-NEXT:          scf.yield %2468 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %2432, %2[] : memref<i32>
//CHECK-NEXT:        %2469 = arith.constant 2 : i32
//CHECK-NEXT:        %2470 = arith.index_cast %2469 : i32 to index
//CHECK-NEXT:        %2471 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %2472 = arith.constant 1 : i32
//CHECK-NEXT:        %2473 = arith.subi %2471, %2472 : i32
//CHECK-NEXT:        %2474 = arith.index_cast %2473 : i32 to index
//CHECK-NEXT:        %2475 = arith.constant 1 : index
//CHECK-NEXT:        %2476 = arith.index_cast %2470 : index to i32
//CHECK-NEXT:        %2477 = arith.constant 1 : index
//CHECK-NEXT:        %2478 = arith.addi %2474, %2477 : index
//CHECK-NEXT:        %2479 = scf.for %2480 = %2470 to %2478 step %2475 iter_args(%2481 = %2476) -> (i32) {
//CHECK-NEXT:          memref.store %2481, %3[] : memref<i32>
//CHECK-NEXT:          %2482 = arith.constant 1 : i32
//CHECK-NEXT:          %2483 = arith.index_cast %2482 : i32 to index
//CHECK-NEXT:          %2484 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %2485 = arith.index_cast %2484 : i32 to index
//CHECK-NEXT:          %2486 = arith.constant 1 : index
//CHECK-NEXT:          %2487 = arith.index_cast %2483 : index to i32
//CHECK-NEXT:          %2488 = arith.constant 1 : index
//CHECK-NEXT:          %2489 = arith.addi %2485, %2488 : index
//CHECK-NEXT:          %2490 = scf.for %2491 = %2483 to %2489 step %2486 iter_args(%2492 = %2487) -> (i32) {
//CHECK-NEXT:            memref.store %2492, %2[] : memref<i32>
//CHECK-NEXT:            %2493 = arith.constant 1 : i32
//CHECK-NEXT:            %2494 = arith.index_cast %2493 : i32 to index
//CHECK-NEXT:            %2495 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %2496 = arith.index_cast %2495 : i32 to index
//CHECK-NEXT:            %2497 = arith.constant 1 : index
//CHECK-NEXT:            %2498 = arith.index_cast %2494 : index to i32
//CHECK-NEXT:            %2499 = arith.constant 1 : index
//CHECK-NEXT:            %2500 = arith.addi %2496, %2499 : index
//CHECK-NEXT:            %2501 = scf.for %2502 = %2494 to %2500 step %2497 iter_args(%2503 = %2498) -> (i32) {
//CHECK-NEXT:              memref.store %2503, %1[] : memref<i32>
//CHECK-NEXT:              %2504 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2505 = arith.extui %2504 : i32 to i64
//CHECK-NEXT:              %2506 = arith.index_cast %2505 : i64 to index
//CHECK-NEXT:              %2507 = arith.constant 1 : index
//CHECK-NEXT:              %2508 = arith.subi %2506, %2507 : index
//CHECK-NEXT:              %2509 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2510 = arith.extui %2509 : i32 to i64
//CHECK-NEXT:              %2511 = arith.index_cast %2510 : i64 to index
//CHECK-NEXT:              %2512 = arith.constant 1 : index
//CHECK-NEXT:              %2513 = arith.subi %2511, %2512 : index
//CHECK-NEXT:              %2514 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2515 = arith.extui %2514 : i32 to i64
//CHECK-NEXT:              %2516 = arith.index_cast %2515 : i64 to index
//CHECK-NEXT:              %2517 = arith.constant 1 : index
//CHECK-NEXT:              %2518 = arith.subi %2516, %2517 : index
//CHECK-NEXT:              %2519 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2520 = memref.load %2519[%2518, %2513, %2508] : memref<?x?x?xf64>
//CHECK-NEXT:              %2521 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2522 = arith.extui %2521 : i32 to i64
//CHECK-NEXT:              %2523 = arith.index_cast %2522 : i64 to index
//CHECK-NEXT:              %2524 = arith.constant 1 : index
//CHECK-NEXT:              %2525 = arith.subi %2523, %2524 : index
//CHECK-NEXT:              %2526 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2527 = arith.extui %2526 : i32 to i64
//CHECK-NEXT:              %2528 = arith.index_cast %2527 : i64 to index
//CHECK-NEXT:              %2529 = arith.constant 1 : index
//CHECK-NEXT:              %2530 = arith.subi %2528, %2529 : index
//CHECK-NEXT:              %2531 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2532 = arith.constant 1 : i32
//CHECK-NEXT:              %2533 = arith.addi %2531, %2532 : i32
//CHECK-NEXT:              %2534 = arith.extui %2533 : i32 to i64
//CHECK-NEXT:              %2535 = arith.index_cast %2534 : i64 to index
//CHECK-NEXT:              %2536 = arith.constant 1 : index
//CHECK-NEXT:              %2537 = arith.subi %2535, %2536 : index
//CHECK-NEXT:              %2538 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2539 = memref.load %2538[%2537, %2530, %2525] : memref<?x?x?xf64>
//CHECK-NEXT:              %2540 = arith.addf %2520, %2539 fastmath<contract> : f64
//CHECK-NEXT:              %2541 = arith.constant 2.500000e-01 : f64
//CHECK-NEXT:              %2542 = arith.constant 2.500000e-01 : f64
//CHECK-NEXT:              %2543 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2544 = arith.extui %2543 : i32 to i64
//CHECK-NEXT:              %2545 = arith.index_cast %2544 : i64 to index
//CHECK-NEXT:              %2546 = arith.constant 1 : index
//CHECK-NEXT:              %2547 = arith.subi %2545, %2546 : index
//CHECK-NEXT:              %2548 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2549 = arith.extui %2548 : i32 to i64
//CHECK-NEXT:              %2550 = arith.index_cast %2549 : i64 to index
//CHECK-NEXT:              %2551 = arith.constant 1 : index
//CHECK-NEXT:              %2552 = arith.subi %2550, %2551 : index
//CHECK-NEXT:              %2553 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2554 = arith.extui %2553 : i32 to i64
//CHECK-NEXT:              %2555 = arith.index_cast %2554 : i64 to index
//CHECK-NEXT:              %2556 = arith.constant 1 : index
//CHECK-NEXT:              %2557 = arith.subi %2555, %2556 : index
//CHECK-NEXT:              %2558 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2559 = memref.load %2558[%2557, %2552, %2547] : memref<?x?x?xf64>
//CHECK-NEXT:              %2560 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2561 = arith.extui %2560 : i32 to i64
//CHECK-NEXT:              %2562 = arith.index_cast %2561 : i64 to index
//CHECK-NEXT:              %2563 = arith.constant 1 : index
//CHECK-NEXT:              %2564 = arith.subi %2562, %2563 : index
//CHECK-NEXT:              %2565 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2566 = arith.extui %2565 : i32 to i64
//CHECK-NEXT:              %2567 = arith.index_cast %2566 : i64 to index
//CHECK-NEXT:              %2568 = arith.constant 1 : index
//CHECK-NEXT:              %2569 = arith.subi %2567, %2568 : index
//CHECK-NEXT:              %2570 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2571 = arith.constant 1 : i32
//CHECK-NEXT:              %2572 = arith.addi %2570, %2571 : i32
//CHECK-NEXT:              %2573 = arith.extui %2572 : i32 to i64
//CHECK-NEXT:              %2574 = arith.index_cast %2573 : i64 to index
//CHECK-NEXT:              %2575 = arith.constant 1 : index
//CHECK-NEXT:              %2576 = arith.subi %2574, %2575 : index
//CHECK-NEXT:              %2577 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2578 = memref.load %2577[%2576, %2569, %2564] : memref<?x?x?xf64>
//CHECK-NEXT:              %2579 = arith.mulf %2559, %2578 fastmath<contract> : f64
//CHECK-NEXT:              %2580 = math.copysign %2542, %2579 fastmath<contract> : f64
//CHECK-NEXT:              %2581 = arith.addf %2541, %2580 fastmath<contract> : f64
//CHECK-NEXT:              %2582 = arith.mulf %2540, %2581 fastmath<contract> : f64
//CHECK-NEXT:              %2583 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2584 = arith.extui %2583 : i32 to i64
//CHECK-NEXT:              %2585 = arith.index_cast %2584 : i64 to index
//CHECK-NEXT:              %2586 = arith.constant 1 : index
//CHECK-NEXT:              %2587 = arith.subi %2585, %2586 : index
//CHECK-NEXT:              %2588 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2589 = arith.extui %2588 : i32 to i64
//CHECK-NEXT:              %2590 = arith.index_cast %2589 : i64 to index
//CHECK-NEXT:              %2591 = arith.constant 1 : index
//CHECK-NEXT:              %2592 = arith.subi %2590, %2591 : index
//CHECK-NEXT:              %2593 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2594 = arith.extui %2593 : i32 to i64
//CHECK-NEXT:              %2595 = arith.index_cast %2594 : i64 to index
//CHECK-NEXT:              %2596 = arith.constant 1 : index
//CHECK-NEXT:              %2597 = arith.subi %2595, %2596 : index
//CHECK-NEXT:              %2598 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %2582, %2598[%2597, %2592, %2587] : memref<?x?x?xf64>
//CHECK-NEXT:              %2599 = arith.addi %2502, %2497 : index
//CHECK-NEXT:              %2600 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2601 = arith.index_cast %2497 : index to i32
//CHECK-NEXT:              %2602 = arith.addi %2600, %2601 : i32
//CHECK-NEXT:              scf.yield %2602 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %2501, %1[] : memref<i32>
//CHECK-NEXT:            %2603 = arith.addi %2491, %2486 : index
//CHECK-NEXT:            %2604 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2605 = arith.index_cast %2486 : index to i32
//CHECK-NEXT:            %2606 = arith.addi %2604, %2605 : i32
//CHECK-NEXT:            scf.yield %2606 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %2490, %2[] : memref<i32>
//CHECK-NEXT:          %2607 = arith.addi %2480, %2475 : index
//CHECK-NEXT:          %2608 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %2609 = arith.index_cast %2475 : index to i32
//CHECK-NEXT:          %2610 = arith.addi %2608, %2609 : i32
//CHECK-NEXT:          scf.yield %2610 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %2479, %3[] : memref<i32>
//CHECK-NEXT:        %2611 = arith.constant 2 : i32
//CHECK-NEXT:        %2612 = arith.index_cast %2611 : i32 to index
//CHECK-NEXT:        %2613 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %2614 = arith.constant 1 : i32
//CHECK-NEXT:        %2615 = arith.subi %2613, %2614 : i32
//CHECK-NEXT:        %2616 = arith.index_cast %2615 : i32 to index
//CHECK-NEXT:        %2617 = arith.constant 1 : index
//CHECK-NEXT:        %2618 = arith.index_cast %2612 : index to i32
//CHECK-NEXT:        %2619 = arith.constant 1 : index
//CHECK-NEXT:        %2620 = arith.addi %2616, %2619 : index
//CHECK-NEXT:        %2621 = scf.for %2622 = %2612 to %2620 step %2617 iter_args(%2623 = %2618) -> (i32) {
//CHECK-NEXT:          memref.store %2623, %3[] : memref<i32>
//CHECK-NEXT:          %2624 = arith.constant 1 : i32
//CHECK-NEXT:          %2625 = arith.index_cast %2624 : i32 to index
//CHECK-NEXT:          %2626 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %2627 = arith.index_cast %2626 : i32 to index
//CHECK-NEXT:          %2628 = arith.constant 1 : index
//CHECK-NEXT:          %2629 = arith.index_cast %2625 : index to i32
//CHECK-NEXT:          %2630 = arith.constant 1 : index
//CHECK-NEXT:          %2631 = arith.addi %2627, %2630 : index
//CHECK-NEXT:          %2632 = scf.for %2633 = %2625 to %2631 step %2628 iter_args(%2634 = %2629) -> (i32) {
//CHECK-NEXT:            memref.store %2634, %2[] : memref<i32>
//CHECK-NEXT:            %2635 = arith.constant 1 : i32
//CHECK-NEXT:            %2636 = arith.index_cast %2635 : i32 to index
//CHECK-NEXT:            %2637 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %2638 = arith.index_cast %2637 : i32 to index
//CHECK-NEXT:            %2639 = arith.constant 1 : index
//CHECK-NEXT:            %2640 = arith.index_cast %2636 : index to i32
//CHECK-NEXT:            %2641 = arith.constant 1 : index
//CHECK-NEXT:            %2642 = arith.addi %2638, %2641 : index
//CHECK-NEXT:            %2643 = scf.for %2644 = %2636 to %2642 step %2639 iter_args(%2645 = %2640) -> (i32) {
//CHECK-NEXT:              memref.store %2645, %1[] : memref<i32>
//CHECK-NEXT:              %2646 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %2647 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2648 = arith.extui %2647 : i32 to i64
//CHECK-NEXT:              %2649 = arith.index_cast %2648 : i64 to index
//CHECK-NEXT:              %2650 = arith.constant 1 : index
//CHECK-NEXT:              %2651 = arith.subi %2649, %2650 : index
//CHECK-NEXT:              %2652 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2653 = arith.extui %2652 : i32 to i64
//CHECK-NEXT:              %2654 = arith.index_cast %2653 : i64 to index
//CHECK-NEXT:              %2655 = arith.constant 1 : index
//CHECK-NEXT:              %2656 = arith.subi %2654, %2655 : index
//CHECK-NEXT:              %2657 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2658 = arith.extui %2657 : i32 to i64
//CHECK-NEXT:              %2659 = arith.index_cast %2658 : i64 to index
//CHECK-NEXT:              %2660 = arith.constant 1 : index
//CHECK-NEXT:              %2661 = arith.subi %2659, %2660 : index
//CHECK-NEXT:              %2662 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2663 = memref.load %2662[%2661, %2656, %2651] : memref<?x?x?xf64>
//CHECK-NEXT:              %2664 = math.copysign %2646, %2663 fastmath<contract> : f64
//CHECK-NEXT:              %2665 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2666 = arith.extui %2665 : i32 to i64
//CHECK-NEXT:              %2667 = arith.index_cast %2666 : i64 to index
//CHECK-NEXT:              %2668 = arith.constant 1 : index
//CHECK-NEXT:              %2669 = arith.subi %2667, %2668 : index
//CHECK-NEXT:              %2670 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2671 = arith.extui %2670 : i32 to i64
//CHECK-NEXT:              %2672 = arith.index_cast %2671 : i64 to index
//CHECK-NEXT:              %2673 = arith.constant 1 : index
//CHECK-NEXT:              %2674 = arith.subi %2672, %2673 : index
//CHECK-NEXT:              %2675 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2676 = arith.extui %2675 : i32 to i64
//CHECK-NEXT:              %2677 = arith.index_cast %2676 : i64 to index
//CHECK-NEXT:              %2678 = arith.constant 1 : index
//CHECK-NEXT:              %2679 = arith.subi %2677, %2678 : index
//CHECK-NEXT:              %2680 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2681 = memref.load %2680[%2679, %2674, %2669] : memref<?x?x?xf64>
//CHECK-NEXT:              %2682 = math.absf %2681 fastmath<contract> : f64
//CHECK-NEXT:              %2683 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:              %2684 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2685 = arith.extui %2684 : i32 to i64
//CHECK-NEXT:              %2686 = arith.index_cast %2685 : i64 to index
//CHECK-NEXT:              %2687 = arith.constant 1 : index
//CHECK-NEXT:              %2688 = arith.subi %2686, %2687 : index
//CHECK-NEXT:              %2689 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2690 = arith.extui %2689 : i32 to i64
//CHECK-NEXT:              %2691 = arith.index_cast %2690 : i64 to index
//CHECK-NEXT:              %2692 = arith.constant 1 : index
//CHECK-NEXT:              %2693 = arith.subi %2691, %2692 : index
//CHECK-NEXT:              %2694 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2695 = arith.constant 1 : i32
//CHECK-NEXT:              %2696 = arith.addi %2694, %2695 : i32
//CHECK-NEXT:              %2697 = arith.extui %2696 : i32 to i64
//CHECK-NEXT:              %2698 = arith.index_cast %2697 : i64 to index
//CHECK-NEXT:              %2699 = arith.constant 1 : index
//CHECK-NEXT:              %2700 = arith.subi %2698, %2699 : index
//CHECK-NEXT:              %2701 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2702 = memref.load %2701[%2700, %2693, %2688] : memref<?x?x?xf64>
//CHECK-NEXT:              %2703 = math.absf %2702 fastmath<contract> : f64
//CHECK-NEXT:              %2704 = arith.mulf %2683, %2703 fastmath<contract> : f64
//CHECK-NEXT:              %2705 = arith.cmpf olt, %2682, %2704 : f64
//CHECK-NEXT:              %2706 = arith.select %2705, %2682, %2704 : f64
//CHECK-NEXT:              %2707 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:              %2708 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2709 = arith.extui %2708 : i32 to i64
//CHECK-NEXT:              %2710 = arith.index_cast %2709 : i64 to index
//CHECK-NEXT:              %2711 = arith.constant 1 : index
//CHECK-NEXT:              %2712 = arith.subi %2710, %2711 : index
//CHECK-NEXT:              %2713 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2714 = arith.extui %2713 : i32 to i64
//CHECK-NEXT:              %2715 = arith.index_cast %2714 : i64 to index
//CHECK-NEXT:              %2716 = arith.constant 1 : index
//CHECK-NEXT:              %2717 = arith.subi %2715, %2716 : index
//CHECK-NEXT:              %2718 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2719 = arith.extui %2718 : i32 to i64
//CHECK-NEXT:              %2720 = arith.index_cast %2719 : i64 to index
//CHECK-NEXT:              %2721 = arith.constant 1 : index
//CHECK-NEXT:              %2722 = arith.subi %2720, %2721 : index
//CHECK-NEXT:              %2723 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2724 = memref.load %2723[%2722, %2717, %2712] : memref<?x?x?xf64>
//CHECK-NEXT:              %2725 = math.absf %2724 fastmath<contract> : f64
//CHECK-NEXT:              %2726 = arith.mulf %2707, %2725 fastmath<contract> : f64
//CHECK-NEXT:              %2727 = arith.cmpf olt, %2706, %2726 : f64
//CHECK-NEXT:              %2728 = arith.select %2727, %2706, %2726 : f64
//CHECK-NEXT:              %2729 = arith.mulf %2664, %2728 fastmath<contract> : f64
//CHECK-NEXT:              %2730 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2731 = arith.extui %2730 : i32 to i64
//CHECK-NEXT:              %2732 = arith.index_cast %2731 : i64 to index
//CHECK-NEXT:              %2733 = arith.constant 1 : index
//CHECK-NEXT:              %2734 = arith.subi %2732, %2733 : index
//CHECK-NEXT:              %2735 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2736 = arith.extui %2735 : i32 to i64
//CHECK-NEXT:              %2737 = arith.index_cast %2736 : i64 to index
//CHECK-NEXT:              %2738 = arith.constant 1 : index
//CHECK-NEXT:              %2739 = arith.subi %2737, %2738 : index
//CHECK-NEXT:              %2740 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2741 = arith.extui %2740 : i32 to i64
//CHECK-NEXT:              %2742 = arith.index_cast %2741 : i64 to index
//CHECK-NEXT:              %2743 = arith.constant 1 : index
//CHECK-NEXT:              %2744 = arith.subi %2742, %2743 : index
//CHECK-NEXT:              %2745 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %2729, %2745[%2744, %2739, %2734] : memref<?x?x?xf64>
//CHECK-NEXT:              %2746 = arith.addi %2644, %2639 : index
//CHECK-NEXT:              %2747 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2748 = arith.index_cast %2639 : index to i32
//CHECK-NEXT:              %2749 = arith.addi %2747, %2748 : i32
//CHECK-NEXT:              scf.yield %2749 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %2643, %1[] : memref<i32>
//CHECK-NEXT:            %2750 = arith.addi %2633, %2628 : index
//CHECK-NEXT:            %2751 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2752 = arith.index_cast %2628 : index to i32
//CHECK-NEXT:            %2753 = arith.addi %2751, %2752 : i32
//CHECK-NEXT:            scf.yield %2753 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %2632, %2[] : memref<i32>
//CHECK-NEXT:          %2754 = arith.addi %2622, %2617 : index
//CHECK-NEXT:          %2755 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %2756 = arith.index_cast %2617 : index to i32
//CHECK-NEXT:          %2757 = arith.addi %2755, %2756 : i32
//CHECK-NEXT:          scf.yield %2757 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %2621, %3[] : memref<i32>
//CHECK-NEXT:        %2758 = arith.constant 1 : i32
//CHECK-NEXT:        %2759 = arith.index_cast %2758 : i32 to index
//CHECK-NEXT:        %2760 = arith.constant 1 : i32
//CHECK-NEXT:        %2761 = arith.index_cast %2760 : i32 to index
//CHECK-NEXT:        %2762 = arith.constant 1 : index
//CHECK-NEXT:        %2763 = arith.index_cast %2759 : index to i32
//CHECK-NEXT:        %2764 = arith.constant 1 : index
//CHECK-NEXT:        %2765 = arith.addi %2761, %2764 : index
//CHECK-NEXT:        %2766 = scf.for %2767 = %2759 to %2765 step %2762 iter_args(%2768 = %2763) -> (i32) {
//CHECK-NEXT:          memref.store %2768, %3[] : memref<i32>
//CHECK-NEXT:          %2769 = arith.constant 1 : i32
//CHECK-NEXT:          %2770 = arith.index_cast %2769 : i32 to index
//CHECK-NEXT:          %2771 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %2772 = arith.index_cast %2771 : i32 to index
//CHECK-NEXT:          %2773 = arith.constant 1 : index
//CHECK-NEXT:          %2774 = arith.index_cast %2770 : index to i32
//CHECK-NEXT:          %2775 = arith.constant 1 : index
//CHECK-NEXT:          %2776 = arith.addi %2772, %2775 : index
//CHECK-NEXT:          %2777 = scf.for %2778 = %2770 to %2776 step %2773 iter_args(%2779 = %2774) -> (i32) {
//CHECK-NEXT:            memref.store %2779, %2[] : memref<i32>
//CHECK-NEXT:            %2780 = arith.constant 1 : i32
//CHECK-NEXT:            %2781 = arith.index_cast %2780 : i32 to index
//CHECK-NEXT:            %2782 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %2783 = arith.index_cast %2782 : i32 to index
//CHECK-NEXT:            %2784 = arith.constant 1 : index
//CHECK-NEXT:            %2785 = arith.index_cast %2781 : index to i32
//CHECK-NEXT:            %2786 = arith.constant 1 : index
//CHECK-NEXT:            %2787 = arith.addi %2783, %2786 : index
//CHECK-NEXT:            %2788 = scf.for %2789 = %2781 to %2787 step %2784 iter_args(%2790 = %2785) -> (i32) {
//CHECK-NEXT:              memref.store %2790, %1[] : memref<i32>
//CHECK-NEXT:              %2791 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2792 = arith.extui %2791 : i32 to i64
//CHECK-NEXT:              %2793 = arith.index_cast %2792 : i64 to index
//CHECK-NEXT:              %2794 = arith.constant 1 : index
//CHECK-NEXT:              %2795 = arith.subi %2793, %2794 : index
//CHECK-NEXT:              %2796 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2797 = arith.extui %2796 : i32 to i64
//CHECK-NEXT:              %2798 = arith.index_cast %2797 : i64 to index
//CHECK-NEXT:              %2799 = arith.constant 1 : index
//CHECK-NEXT:              %2800 = arith.subi %2798, %2799 : index
//CHECK-NEXT:              %2801 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2802 = arith.extui %2801 : i32 to i64
//CHECK-NEXT:              %2803 = arith.index_cast %2802 : i64 to index
//CHECK-NEXT:              %2804 = arith.constant 1 : index
//CHECK-NEXT:              %2805 = arith.subi %2803, %2804 : index
//CHECK-NEXT:              %2806 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2807 = memref.load %2806[%2805, %2800, %2795] : memref<?x?x?xf64>
//CHECK-NEXT:              %2808 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2809 = arith.extui %2808 : i32 to i64
//CHECK-NEXT:              %2810 = arith.index_cast %2809 : i64 to index
//CHECK-NEXT:              %2811 = arith.constant 1 : index
//CHECK-NEXT:              %2812 = arith.subi %2810, %2811 : index
//CHECK-NEXT:              %2813 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2814 = arith.extui %2813 : i32 to i64
//CHECK-NEXT:              %2815 = arith.index_cast %2814 : i64 to index
//CHECK-NEXT:              %2816 = arith.constant 1 : index
//CHECK-NEXT:              %2817 = arith.subi %2815, %2816 : index
//CHECK-NEXT:              %2818 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2819 = arith.extui %2818 : i32 to i64
//CHECK-NEXT:              %2820 = arith.index_cast %2819 : i64 to index
//CHECK-NEXT:              %2821 = arith.constant 1 : index
//CHECK-NEXT:              %2822 = arith.subi %2820, %2821 : index
//CHECK-NEXT:              %2823 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2824 = memref.load %2823[%2822, %2817, %2812] : memref<?x?x?xf64>
//CHECK-NEXT:              %2825 = arith.mulf %2807, %2824 fastmath<contract> : f64
//CHECK-NEXT:              %2826 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2827 = arith.extui %2826 : i32 to i64
//CHECK-NEXT:              %2828 = arith.index_cast %2827 : i64 to index
//CHECK-NEXT:              %2829 = arith.constant 1 : index
//CHECK-NEXT:              %2830 = arith.subi %2828, %2829 : index
//CHECK-NEXT:              %2831 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2832 = arith.extui %2831 : i32 to i64
//CHECK-NEXT:              %2833 = arith.index_cast %2832 : i64 to index
//CHECK-NEXT:              %2834 = arith.constant 1 : index
//CHECK-NEXT:              %2835 = arith.subi %2833, %2834 : index
//CHECK-NEXT:              %2836 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2837 = arith.extui %2836 : i32 to i64
//CHECK-NEXT:              %2838 = arith.index_cast %2837 : i64 to index
//CHECK-NEXT:              %2839 = arith.constant 1 : index
//CHECK-NEXT:              %2840 = arith.subi %2838, %2839 : index
//CHECK-NEXT:              %2841 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %2825, %2841[%2840, %2835, %2830] : memref<?x?x?xf64>
//CHECK-NEXT:              %2842 = arith.addi %2789, %2784 : index
//CHECK-NEXT:              %2843 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2844 = arith.index_cast %2784 : index to i32
//CHECK-NEXT:              %2845 = arith.addi %2843, %2844 : i32
//CHECK-NEXT:              scf.yield %2845 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %2788, %1[] : memref<i32>
//CHECK-NEXT:            %2846 = arith.addi %2778, %2773 : index
//CHECK-NEXT:            %2847 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %2848 = arith.index_cast %2773 : index to i32
//CHECK-NEXT:            %2849 = arith.addi %2847, %2848 : i32
//CHECK-NEXT:            scf.yield %2849 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %2777, %2[] : memref<i32>
//CHECK-NEXT:          %2850 = arith.addi %2767, %2762 : index
//CHECK-NEXT:          %2851 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %2852 = arith.index_cast %2762 : index to i32
//CHECK-NEXT:          %2853 = arith.addi %2851, %2852 : i32
//CHECK-NEXT:          scf.yield %2853 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %2766, %3[] : memref<i32>
//CHECK-NEXT:        %2854 = arith.constant 1 : i32
//CHECK-NEXT:        %2855 = arith.index_cast %2854 : i32 to index
//CHECK-NEXT:        %2856 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %2857 = arith.constant 1 : i32
//CHECK-NEXT:        %2858 = arith.subi %2856, %2857 : i32
//CHECK-NEXT:        %2859 = arith.index_cast %2858 : i32 to index
//CHECK-NEXT:        %2860 = arith.constant 1 : index
//CHECK-NEXT:        %2861 = arith.index_cast %2855 : index to i32
//CHECK-NEXT:        %2862 = arith.constant 1 : index
//CHECK-NEXT:        %2863 = arith.addi %2859, %2862 : index
//CHECK-NEXT:        %2864 = scf.for %2865 = %2855 to %2863 step %2860 iter_args(%2866 = %2861) -> (i32) {
//CHECK-NEXT:          memref.store %2866, %3[] : memref<i32>
//CHECK-NEXT:          %2867 = arith.constant 2 : i32
//CHECK-NEXT:          %2868 = arith.index_cast %2867 : i32 to index
//CHECK-NEXT:          %2869 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %2870 = arith.constant 1 : i32
//CHECK-NEXT:          %2871 = arith.subi %2869, %2870 : i32
//CHECK-NEXT:          %2872 = arith.index_cast %2871 : i32 to index
//CHECK-NEXT:          %2873 = arith.constant 1 : index
//CHECK-NEXT:          %2874 = arith.index_cast %2868 : index to i32
//CHECK-NEXT:          %2875 = arith.constant 1 : index
//CHECK-NEXT:          %2876 = arith.addi %2872, %2875 : index
//CHECK-NEXT:          %2877 = scf.for %2878 = %2868 to %2876 step %2873 iter_args(%2879 = %2874) -> (i32) {
//CHECK-NEXT:            memref.store %2879, %2[] : memref<i32>
//CHECK-NEXT:            %2880 = arith.constant 2 : i32
//CHECK-NEXT:            %2881 = arith.index_cast %2880 : i32 to index
//CHECK-NEXT:            %2882 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %2883 = arith.constant 1 : i32
//CHECK-NEXT:            %2884 = arith.subi %2882, %2883 : i32
//CHECK-NEXT:            %2885 = arith.index_cast %2884 : i32 to index
//CHECK-NEXT:            %2886 = arith.constant 1 : index
//CHECK-NEXT:            %2887 = arith.index_cast %2881 : index to i32
//CHECK-NEXT:            %2888 = arith.constant 1 : index
//CHECK-NEXT:            %2889 = arith.addi %2885, %2888 : index
//CHECK-NEXT:            %2890 = scf.for %2891 = %2881 to %2889 step %2886 iter_args(%2892 = %2887) -> (i32) {
//CHECK-NEXT:              memref.store %2892, %1[] : memref<i32>
//CHECK-NEXT:              %2893 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2894 = arith.extui %2893 : i32 to i64
//CHECK-NEXT:              %2895 = arith.index_cast %2894 : i64 to index
//CHECK-NEXT:              %2896 = arith.constant 1 : index
//CHECK-NEXT:              %2897 = arith.subi %2895, %2896 : index
//CHECK-NEXT:              %2898 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2899 = arith.extui %2898 : i32 to i64
//CHECK-NEXT:              %2900 = arith.index_cast %2899 : i64 to index
//CHECK-NEXT:              %2901 = arith.constant 1 : index
//CHECK-NEXT:              %2902 = arith.subi %2900, %2901 : index
//CHECK-NEXT:              %2903 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2904 = arith.constant 1 : i32
//CHECK-NEXT:              %2905 = arith.addi %2903, %2904 : i32
//CHECK-NEXT:              %2906 = arith.extui %2905 : i32 to i64
//CHECK-NEXT:              %2907 = arith.index_cast %2906 : i64 to index
//CHECK-NEXT:              %2908 = arith.constant 1 : index
//CHECK-NEXT:              %2909 = arith.subi %2907, %2908 : index
//CHECK-NEXT:              %2910 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2911 = memref.load %2910[%2909, %2902, %2897] : memref<?x?x?xf64>
//CHECK-NEXT:              %2912 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %2913 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %2914 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2915 = arith.extui %2914 : i32 to i64
//CHECK-NEXT:              %2916 = arith.index_cast %2915 : i64 to index
//CHECK-NEXT:              %2917 = arith.constant 1 : index
//CHECK-NEXT:              %2918 = arith.subi %2916, %2917 : index
//CHECK-NEXT:              %2919 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2920 = arith.extui %2919 : i32 to i64
//CHECK-NEXT:              %2921 = arith.index_cast %2920 : i64 to index
//CHECK-NEXT:              %2922 = arith.constant 1 : index
//CHECK-NEXT:              %2923 = arith.subi %2921, %2922 : index
//CHECK-NEXT:              %2924 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2925 = arith.constant 1 : i32
//CHECK-NEXT:              %2926 = arith.addi %2924, %2925 : i32
//CHECK-NEXT:              %2927 = arith.extui %2926 : i32 to i64
//CHECK-NEXT:              %2928 = arith.index_cast %2927 : i64 to index
//CHECK-NEXT:              %2929 = arith.constant 1 : index
//CHECK-NEXT:              %2930 = arith.subi %2928, %2929 : index
//CHECK-NEXT:              %2931 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2932 = memref.load %2931[%2930, %2923, %2918] : memref<?x?x?xf64>
//CHECK-NEXT:              %2933 = math.copysign %2913, %2932 fastmath<contract> : f64
//CHECK-NEXT:              %2934 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2935 = arith.extui %2934 : i32 to i64
//CHECK-NEXT:              %2936 = arith.index_cast %2935 : i64 to index
//CHECK-NEXT:              %2937 = arith.constant 1 : index
//CHECK-NEXT:              %2938 = arith.subi %2936, %2937 : index
//CHECK-NEXT:              %2939 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2940 = arith.extui %2939 : i32 to i64
//CHECK-NEXT:              %2941 = arith.index_cast %2940 : i64 to index
//CHECK-NEXT:              %2942 = arith.constant 1 : index
//CHECK-NEXT:              %2943 = arith.subi %2941, %2942 : index
//CHECK-NEXT:              %2944 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2945 = arith.constant 1 : i32
//CHECK-NEXT:              %2946 = arith.addi %2944, %2945 : i32
//CHECK-NEXT:              %2947 = arith.extui %2946 : i32 to i64
//CHECK-NEXT:              %2948 = arith.index_cast %2947 : i64 to index
//CHECK-NEXT:              %2949 = arith.constant 1 : index
//CHECK-NEXT:              %2950 = arith.subi %2948, %2949 : index
//CHECK-NEXT:              %2951 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2952 = memref.load %2951[%2950, %2943, %2938] : memref<?x?x?xf64>
//CHECK-NEXT:              %2953 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2954 = arith.extui %2953 : i32 to i64
//CHECK-NEXT:              %2955 = arith.index_cast %2954 : i64 to index
//CHECK-NEXT:              %2956 = arith.constant 1 : index
//CHECK-NEXT:              %2957 = arith.subi %2955, %2956 : index
//CHECK-NEXT:              %2958 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2959 = arith.extui %2958 : i32 to i64
//CHECK-NEXT:              %2960 = arith.index_cast %2959 : i64 to index
//CHECK-NEXT:              %2961 = arith.constant 1 : index
//CHECK-NEXT:              %2962 = arith.subi %2960, %2961 : index
//CHECK-NEXT:              %2963 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2964 = arith.extui %2963 : i32 to i64
//CHECK-NEXT:              %2965 = arith.index_cast %2964 : i64 to index
//CHECK-NEXT:              %2966 = arith.constant 1 : index
//CHECK-NEXT:              %2967 = arith.subi %2965, %2966 : index
//CHECK-NEXT:              %2968 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2969 = memref.load %2968[%2967, %2962, %2957] : memref<?x?x?xf64>
//CHECK-NEXT:              %2970 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %2971 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2972 = arith.extui %2971 : i32 to i64
//CHECK-NEXT:              %2973 = arith.index_cast %2972 : i64 to index
//CHECK-NEXT:              %2974 = arith.constant 1 : index
//CHECK-NEXT:              %2975 = arith.subi %2973, %2974 : index
//CHECK-NEXT:              %2976 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2977 = arith.extui %2976 : i32 to i64
//CHECK-NEXT:              %2978 = arith.index_cast %2977 : i64 to index
//CHECK-NEXT:              %2979 = arith.constant 1 : index
//CHECK-NEXT:              %2980 = arith.subi %2978, %2979 : index
//CHECK-NEXT:              %2981 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %2982 = arith.constant 1 : i32
//CHECK-NEXT:              %2983 = arith.addi %2981, %2982 : i32
//CHECK-NEXT:              %2984 = arith.extui %2983 : i32 to i64
//CHECK-NEXT:              %2985 = arith.index_cast %2984 : i64 to index
//CHECK-NEXT:              %2986 = arith.constant 1 : index
//CHECK-NEXT:              %2987 = arith.subi %2985, %2986 : index
//CHECK-NEXT:              %2988 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %2989 = memref.load %2988[%2987, %2980, %2975] : memref<?x?x?xf64>
//CHECK-NEXT:              %2990 = math.copysign %2970, %2989 fastmath<contract> : f64
//CHECK-NEXT:              %2991 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %2992 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %2993 = arith.extui %2992 : i32 to i64
//CHECK-NEXT:              %2994 = arith.index_cast %2993 : i64 to index
//CHECK-NEXT:              %2995 = arith.constant 1 : index
//CHECK-NEXT:              %2996 = arith.subi %2994, %2995 : index
//CHECK-NEXT:              %2997 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %2998 = arith.extui %2997 : i32 to i64
//CHECK-NEXT:              %2999 = arith.index_cast %2998 : i64 to index
//CHECK-NEXT:              %3000 = arith.constant 1 : index
//CHECK-NEXT:              %3001 = arith.subi %2999, %3000 : index
//CHECK-NEXT:              %3002 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3003 = arith.constant 1 : i32
//CHECK-NEXT:              %3004 = arith.addi %3002, %3003 : i32
//CHECK-NEXT:              %3005 = arith.extui %3004 : i32 to i64
//CHECK-NEXT:              %3006 = arith.index_cast %3005 : i64 to index
//CHECK-NEXT:              %3007 = arith.constant 1 : index
//CHECK-NEXT:              %3008 = arith.subi %3006, %3007 : index
//CHECK-NEXT:              %3009 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3010 = memref.load %3009[%3008, %3001, %2996] : memref<?x?x?xf64>
//CHECK-NEXT:              %3011 = arith.mulf %2991, %3010 fastmath<contract> : f64
//CHECK-NEXT:              %3012 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %3013 = arith.mulf %3011, %3012 fastmath<contract> : f64
//CHECK-NEXT:              %3014 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %3015 = arith.mulf %3013, %3014 fastmath<contract> : f64
//CHECK-NEXT:              %3016 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3017 = arith.extui %3016 : i32 to i64
//CHECK-NEXT:              %3018 = arith.index_cast %3017 : i64 to index
//CHECK-NEXT:              %3019 = arith.constant 1 : index
//CHECK-NEXT:              %3020 = arith.subi %3018, %3019 : index
//CHECK-NEXT:              %3021 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3022 = arith.extui %3021 : i32 to i64
//CHECK-NEXT:              %3023 = arith.index_cast %3022 : i64 to index
//CHECK-NEXT:              %3024 = arith.constant 1 : index
//CHECK-NEXT:              %3025 = arith.subi %3023, %3024 : index
//CHECK-NEXT:              %3026 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3027 = arith.constant 1 : i32
//CHECK-NEXT:              %3028 = arith.addi %3026, %3027 : i32
//CHECK-NEXT:              %3029 = arith.extui %3028 : i32 to i64
//CHECK-NEXT:              %3030 = arith.index_cast %3029 : i64 to index
//CHECK-NEXT:              %3031 = arith.constant 1 : index
//CHECK-NEXT:              %3032 = arith.subi %3030, %3031 : index
//CHECK-NEXT:              %3033 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3034 = memref.load %3033[%3032, %3025, %3020] : memref<?x?x?xf64>
//CHECK-NEXT:              %3035 = arith.mulf %3015, %3034 fastmath<contract> : f64
//CHECK-NEXT:              %3036 = arith.subf %2990, %3035 fastmath<contract> : f64
//CHECK-NEXT:              %3037 = arith.mulf %2969, %3036 fastmath<contract> : f64
//CHECK-NEXT:              %3038 = arith.addf %2952, %3037 fastmath<contract> : f64
//CHECK-NEXT:              %3039 = arith.mulf %2933, %3038 fastmath<contract> : f64
//CHECK-NEXT:              %3040 = arith.addf %2912, %3039 fastmath<contract> : f64
//CHECK-NEXT:              %3041 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %3042 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %3043 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3044 = arith.extui %3043 : i32 to i64
//CHECK-NEXT:              %3045 = arith.index_cast %3044 : i64 to index
//CHECK-NEXT:              %3046 = arith.constant 1 : index
//CHECK-NEXT:              %3047 = arith.subi %3045, %3046 : index
//CHECK-NEXT:              %3048 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3049 = arith.extui %3048 : i32 to i64
//CHECK-NEXT:              %3050 = arith.index_cast %3049 : i64 to index
//CHECK-NEXT:              %3051 = arith.constant 1 : index
//CHECK-NEXT:              %3052 = arith.subi %3050, %3051 : index
//CHECK-NEXT:              %3053 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3054 = arith.constant 1 : i32
//CHECK-NEXT:              %3055 = arith.addi %3053, %3054 : i32
//CHECK-NEXT:              %3056 = arith.extui %3055 : i32 to i64
//CHECK-NEXT:              %3057 = arith.index_cast %3056 : i64 to index
//CHECK-NEXT:              %3058 = arith.constant 1 : index
//CHECK-NEXT:              %3059 = arith.subi %3057, %3058 : index
//CHECK-NEXT:              %3060 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3061 = memref.load %3060[%3059, %3052, %3047] : memref<?x?x?xf64>
//CHECK-NEXT:              %3062 = math.copysign %3042, %3061 fastmath<contract> : f64
//CHECK-NEXT:              %3063 = arith.addf %3041, %3062 fastmath<contract> : f64
//CHECK-NEXT:              %3064 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3065 = arith.extui %3064 : i32 to i64
//CHECK-NEXT:              %3066 = arith.index_cast %3065 : i64 to index
//CHECK-NEXT:              %3067 = arith.constant 1 : index
//CHECK-NEXT:              %3068 = arith.subi %3066, %3067 : index
//CHECK-NEXT:              %3069 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3070 = arith.extui %3069 : i32 to i64
//CHECK-NEXT:              %3071 = arith.index_cast %3070 : i64 to index
//CHECK-NEXT:              %3072 = arith.constant 1 : index
//CHECK-NEXT:              %3073 = arith.subi %3071, %3072 : index
//CHECK-NEXT:              %3074 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3075 = arith.extui %3074 : i32 to i64
//CHECK-NEXT:              %3076 = arith.index_cast %3075 : i64 to index
//CHECK-NEXT:              %3077 = arith.constant 1 : index
//CHECK-NEXT:              %3078 = arith.subi %3076, %3077 : index
//CHECK-NEXT:              %3079 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3080 = memref.load %3079[%3078, %3073, %3068] : memref<?x?x?xf64>
//CHECK-NEXT:              %3081 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3082 = arith.extui %3081 : i32 to i64
//CHECK-NEXT:              %3083 = arith.index_cast %3082 : i64 to index
//CHECK-NEXT:              %3084 = arith.constant 1 : index
//CHECK-NEXT:              %3085 = arith.subi %3083, %3084 : index
//CHECK-NEXT:              %3086 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3087 = arith.extui %3086 : i32 to i64
//CHECK-NEXT:              %3088 = arith.index_cast %3087 : i64 to index
//CHECK-NEXT:              %3089 = arith.constant 1 : index
//CHECK-NEXT:              %3090 = arith.subi %3088, %3089 : index
//CHECK-NEXT:              %3091 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3092 = arith.extui %3091 : i32 to i64
//CHECK-NEXT:              %3093 = arith.index_cast %3092 : i64 to index
//CHECK-NEXT:              %3094 = arith.constant 1 : index
//CHECK-NEXT:              %3095 = arith.subi %3093, %3094 : index
//CHECK-NEXT:              %3096 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3097 = memref.load %3096[%3095, %3090, %3085] : memref<?x?x?xf64>
//CHECK-NEXT:              %3098 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %3099 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3100 = arith.extui %3099 : i32 to i64
//CHECK-NEXT:              %3101 = arith.index_cast %3100 : i64 to index
//CHECK-NEXT:              %3102 = arith.constant 1 : index
//CHECK-NEXT:              %3103 = arith.subi %3101, %3102 : index
//CHECK-NEXT:              %3104 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3105 = arith.extui %3104 : i32 to i64
//CHECK-NEXT:              %3106 = arith.index_cast %3105 : i64 to index
//CHECK-NEXT:              %3107 = arith.constant 1 : index
//CHECK-NEXT:              %3108 = arith.subi %3106, %3107 : index
//CHECK-NEXT:              %3109 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3110 = arith.constant 1 : i32
//CHECK-NEXT:              %3111 = arith.addi %3109, %3110 : i32
//CHECK-NEXT:              %3112 = arith.extui %3111 : i32 to i64
//CHECK-NEXT:              %3113 = arith.index_cast %3112 : i64 to index
//CHECK-NEXT:              %3114 = arith.constant 1 : index
//CHECK-NEXT:              %3115 = arith.subi %3113, %3114 : index
//CHECK-NEXT:              %3116 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3117 = memref.load %3116[%3115, %3108, %3103] : memref<?x?x?xf64>
//CHECK-NEXT:              %3118 = math.copysign %3098, %3117 fastmath<contract> : f64
//CHECK-NEXT:              %3119 = arith.constant 5.000000e-01 : f64
//CHECK-NEXT:              %3120 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3121 = arith.extui %3120 : i32 to i64
//CHECK-NEXT:              %3122 = arith.index_cast %3121 : i64 to index
//CHECK-NEXT:              %3123 = arith.constant 1 : index
//CHECK-NEXT:              %3124 = arith.subi %3122, %3123 : index
//CHECK-NEXT:              %3125 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3126 = arith.extui %3125 : i32 to i64
//CHECK-NEXT:              %3127 = arith.index_cast %3126 : i64 to index
//CHECK-NEXT:              %3128 = arith.constant 1 : index
//CHECK-NEXT:              %3129 = arith.subi %3127, %3128 : index
//CHECK-NEXT:              %3130 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3131 = arith.constant 1 : i32
//CHECK-NEXT:              %3132 = arith.addi %3130, %3131 : i32
//CHECK-NEXT:              %3133 = arith.extui %3132 : i32 to i64
//CHECK-NEXT:              %3134 = arith.index_cast %3133 : i64 to index
//CHECK-NEXT:              %3135 = arith.constant 1 : index
//CHECK-NEXT:              %3136 = arith.subi %3134, %3135 : index
//CHECK-NEXT:              %3137 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3138 = memref.load %3137[%3136, %3129, %3124] : memref<?x?x?xf64>
//CHECK-NEXT:              %3139 = arith.mulf %3119, %3138 fastmath<contract> : f64
//CHECK-NEXT:              %3140 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %3141 = arith.mulf %3139, %3140 fastmath<contract> : f64
//CHECK-NEXT:              %3142 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %3143 = arith.mulf %3141, %3142 fastmath<contract> : f64
//CHECK-NEXT:              %3144 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3145 = arith.extui %3144 : i32 to i64
//CHECK-NEXT:              %3146 = arith.index_cast %3145 : i64 to index
//CHECK-NEXT:              %3147 = arith.constant 1 : index
//CHECK-NEXT:              %3148 = arith.subi %3146, %3147 : index
//CHECK-NEXT:              %3149 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3150 = arith.extui %3149 : i32 to i64
//CHECK-NEXT:              %3151 = arith.index_cast %3150 : i64 to index
//CHECK-NEXT:              %3152 = arith.constant 1 : index
//CHECK-NEXT:              %3153 = arith.subi %3151, %3152 : index
//CHECK-NEXT:              %3154 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3155 = arith.extui %3154 : i32 to i64
//CHECK-NEXT:              %3156 = arith.index_cast %3155 : i64 to index
//CHECK-NEXT:              %3157 = arith.constant 1 : index
//CHECK-NEXT:              %3158 = arith.subi %3156, %3157 : index
//CHECK-NEXT:              %3159 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3160 = memref.load %3159[%3158, %3153, %3148] : memref<?x?x?xf64>
//CHECK-NEXT:              %3161 = arith.mulf %3143, %3160 fastmath<contract> : f64
//CHECK-NEXT:              %3162 = arith.subf %3118, %3161 fastmath<contract> : f64
//CHECK-NEXT:              %3163 = arith.mulf %3097, %3162 fastmath<contract> : f64
//CHECK-NEXT:              %3164 = arith.addf %3080, %3163 fastmath<contract> : f64
//CHECK-NEXT:              %3165 = arith.mulf %3063, %3164 fastmath<contract> : f64
//CHECK-NEXT:              %3166 = arith.addf %3040, %3165 fastmath<contract> : f64
//CHECK-NEXT:              %3167 = arith.mulf %2911, %3166 fastmath<contract> : f64
//CHECK-NEXT:              %3168 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3169 = arith.extui %3168 : i32 to i64
//CHECK-NEXT:              %3170 = arith.index_cast %3169 : i64 to index
//CHECK-NEXT:              %3171 = arith.constant 1 : index
//CHECK-NEXT:              %3172 = arith.subi %3170, %3171 : index
//CHECK-NEXT:              %3173 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3174 = arith.extui %3173 : i32 to i64
//CHECK-NEXT:              %3175 = arith.index_cast %3174 : i64 to index
//CHECK-NEXT:              %3176 = arith.constant 1 : index
//CHECK-NEXT:              %3177 = arith.subi %3175, %3176 : index
//CHECK-NEXT:              %3178 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3179 = arith.constant 1 : i32
//CHECK-NEXT:              %3180 = arith.addi %3178, %3179 : i32
//CHECK-NEXT:              %3181 = arith.extui %3180 : i32 to i64
//CHECK-NEXT:              %3182 = arith.index_cast %3181 : i64 to index
//CHECK-NEXT:              %3183 = arith.constant 1 : index
//CHECK-NEXT:              %3184 = arith.subi %3182, %3183 : index
//CHECK-NEXT:              %3185 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %3167, %3185[%3184, %3177, %3172] : memref<?x?x?xf64>
//CHECK-NEXT:              %3186 = arith.addi %2891, %2886 : index
//CHECK-NEXT:              %3187 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3188 = arith.index_cast %2886 : index to i32
//CHECK-NEXT:              %3189 = arith.addi %3187, %3188 : i32
//CHECK-NEXT:              scf.yield %3189 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %2890, %1[] : memref<i32>
//CHECK-NEXT:            %3190 = arith.addi %2878, %2873 : index
//CHECK-NEXT:            %3191 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %3192 = arith.index_cast %2873 : index to i32
//CHECK-NEXT:            %3193 = arith.addi %3191, %3192 : i32
//CHECK-NEXT:            scf.yield %3193 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %2877, %2[] : memref<i32>
//CHECK-NEXT:          %3194 = arith.addi %2865, %2860 : index
//CHECK-NEXT:          %3195 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %3196 = arith.index_cast %2860 : index to i32
//CHECK-NEXT:          %3197 = arith.addi %3195, %3196 : i32
//CHECK-NEXT:          scf.yield %3197 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %2864, %3[] : memref<i32>
//CHECK-NEXT:        %3198 = arith.constant 1 : i32
//CHECK-NEXT:        %3199 = arith.index_cast %3198 : i32 to index
//CHECK-NEXT:        %3200 = memref.load %6[] : memref<i32>
//CHECK-NEXT:        %3201 = arith.constant 1 : i32
//CHECK-NEXT:        %3202 = arith.subi %3200, %3201 : i32
//CHECK-NEXT:        %3203 = arith.index_cast %3202 : i32 to index
//CHECK-NEXT:        %3204 = arith.constant 1 : index
//CHECK-NEXT:        %3205 = arith.index_cast %3199 : index to i32
//CHECK-NEXT:        %3206 = arith.constant 1 : index
//CHECK-NEXT:        %3207 = arith.addi %3203, %3206 : index
//CHECK-NEXT:        %3208 = scf.for %3209 = %3199 to %3207 step %3204 iter_args(%3210 = %3205) -> (i32) {
//CHECK-NEXT:          memref.store %3210, %3[] : memref<i32>
//CHECK-NEXT:          %3211 = arith.constant 2 : i32
//CHECK-NEXT:          %3212 = arith.index_cast %3211 : i32 to index
//CHECK-NEXT:          %3213 = memref.load %5[] : memref<i32>
//CHECK-NEXT:          %3214 = arith.constant 1 : i32
//CHECK-NEXT:          %3215 = arith.subi %3213, %3214 : i32
//CHECK-NEXT:          %3216 = arith.index_cast %3215 : i32 to index
//CHECK-NEXT:          %3217 = arith.constant 1 : index
//CHECK-NEXT:          %3218 = arith.index_cast %3212 : index to i32
//CHECK-NEXT:          %3219 = arith.constant 1 : index
//CHECK-NEXT:          %3220 = arith.addi %3216, %3219 : index
//CHECK-NEXT:          %3221 = scf.for %3222 = %3212 to %3220 step %3217 iter_args(%3223 = %3218) -> (i32) {
//CHECK-NEXT:            memref.store %3223, %2[] : memref<i32>
//CHECK-NEXT:            %3224 = arith.constant 2 : i32
//CHECK-NEXT:            %3225 = arith.index_cast %3224 : i32 to index
//CHECK-NEXT:            %3226 = memref.load %4[] : memref<i32>
//CHECK-NEXT:            %3227 = arith.constant 1 : i32
//CHECK-NEXT:            %3228 = arith.subi %3226, %3227 : i32
//CHECK-NEXT:            %3229 = arith.index_cast %3228 : i32 to index
//CHECK-NEXT:            %3230 = arith.constant 1 : index
//CHECK-NEXT:            %3231 = arith.index_cast %3225 : index to i32
//CHECK-NEXT:            %3232 = arith.constant 1 : index
//CHECK-NEXT:            %3233 = arith.addi %3229, %3232 : index
//CHECK-NEXT:            %3234 = scf.for %3235 = %3225 to %3233 step %3230 iter_args(%3236 = %3231) -> (i32) {
//CHECK-NEXT:              memref.store %3236, %1[] : memref<i32>
//CHECK-NEXT:              %3237 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:              %3238 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3239 = arith.extui %3238 : i32 to i64
//CHECK-NEXT:              %3240 = arith.index_cast %3239 : i64 to index
//CHECK-NEXT:              %3241 = arith.constant 1 : index
//CHECK-NEXT:              %3242 = arith.subi %3240, %3241 : index
//CHECK-NEXT:              %3243 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3244 = arith.extui %3243 : i32 to i64
//CHECK-NEXT:              %3245 = arith.index_cast %3244 : i64 to index
//CHECK-NEXT:              %3246 = arith.constant 1 : index
//CHECK-NEXT:              %3247 = arith.subi %3245, %3246 : index
//CHECK-NEXT:              %3248 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3249 = arith.extui %3248 : i32 to i64
//CHECK-NEXT:              %3250 = arith.index_cast %3249 : i64 to index
//CHECK-NEXT:              %3251 = arith.constant 1 : index
//CHECK-NEXT:              %3252 = arith.subi %3250, %3251 : index
//CHECK-NEXT:              %3253 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3254 = memref.load %3253[%3252, %3247, %3242] : memref<?x?x?xf64>
//CHECK-NEXT:              %3255 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3256 = arith.extui %3255 : i32 to i64
//CHECK-NEXT:              %3257 = arith.index_cast %3256 : i64 to index
//CHECK-NEXT:              %3258 = arith.constant 1 : index
//CHECK-NEXT:              %3259 = arith.subi %3257, %3258 : index
//CHECK-NEXT:              %3260 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3261 = arith.extui %3260 : i32 to i64
//CHECK-NEXT:              %3262 = arith.index_cast %3261 : i64 to index
//CHECK-NEXT:              %3263 = arith.constant 1 : index
//CHECK-NEXT:              %3264 = arith.subi %3262, %3263 : index
//CHECK-NEXT:              %3265 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3266 = arith.constant 1 : i32
//CHECK-NEXT:              %3267 = arith.addi %3265, %3266 : i32
//CHECK-NEXT:              %3268 = arith.extui %3267 : i32 to i64
//CHECK-NEXT:              %3269 = arith.index_cast %3268 : i64 to index
//CHECK-NEXT:              %3270 = arith.constant 1 : index
//CHECK-NEXT:              %3271 = arith.subi %3269, %3270 : index
//CHECK-NEXT:              %3272 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              %3273 = memref.load %3272[%3271, %3264, %3259] : memref<?x?x?xf64>
//CHECK-NEXT:              %3274 = arith.subf %3254, %3273 fastmath<contract> : f64
//CHECK-NEXT:              %3275 = arith.mulf %3237, %3274 fastmath<contract> : f64
//CHECK-NEXT:              %3276 = arith.negf %3275 {fastmath = #arith.fastmath<contract>} : f64
//CHECK-NEXT:              %3277 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3278 = arith.extui %3277 : i32 to i64
//CHECK-NEXT:              %3279 = arith.index_cast %3278 : i64 to index
//CHECK-NEXT:              %3280 = arith.constant 1 : index
//CHECK-NEXT:              %3281 = arith.subi %3279, %3280 : index
//CHECK-NEXT:              %3282 = memref.load %2[] : memref<i32>
//CHECK-NEXT:              %3283 = arith.extui %3282 : i32 to i64
//CHECK-NEXT:              %3284 = arith.index_cast %3283 : i64 to index
//CHECK-NEXT:              %3285 = arith.constant 1 : index
//CHECK-NEXT:              %3286 = arith.subi %3284, %3285 : index
//CHECK-NEXT:              %3287 = memref.load %3[] : memref<i32>
//CHECK-NEXT:              %3288 = arith.extui %3287 : i32 to i64
//CHECK-NEXT:              %3289 = arith.index_cast %3288 : i64 to index
//CHECK-NEXT:              %3290 = arith.constant 1 : index
//CHECK-NEXT:              %3291 = arith.subi %3289, %3290 : index
//CHECK-NEXT:              %3292 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:              memref.store %3276, %3292[%3291, %3286, %3281] : memref<?x?x?xf64>
//CHECK-NEXT:              %3293 = arith.addi %3235, %3230 : index
//CHECK-NEXT:              %3294 = memref.load %1[] : memref<i32>
//CHECK-NEXT:              %3295 = arith.index_cast %3230 : index to i32
//CHECK-NEXT:              %3296 = arith.addi %3294, %3295 : i32
//CHECK-NEXT:              scf.yield %3296 : i32
//CHECK-NEXT:            }
//CHECK-NEXT:            memref.store %3234, %1[] : memref<i32>
//CHECK-NEXT:            %3297 = arith.addi %3222, %3217 : index
//CHECK-NEXT:            %3298 = memref.load %2[] : memref<i32>
//CHECK-NEXT:            %3299 = arith.index_cast %3217 : index to i32
//CHECK-NEXT:            %3300 = arith.addi %3298, %3299 : i32
//CHECK-NEXT:            scf.yield %3300 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %3221, %2[] : memref<i32>
//CHECK-NEXT:          %3301 = arith.addi %3209, %3204 : index
//CHECK-NEXT:          %3302 = memref.load %3[] : memref<i32>
//CHECK-NEXT:          %3303 = arith.index_cast %3204 : index to i32
//CHECK-NEXT:          %3304 = arith.addi %3302, %3303 : i32
//CHECK-NEXT:          scf.yield %3304 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %3208, %3[] : memref<i32>
//CHECK-NEXT:        %3305 = arith.addi %512, %507 : index
//CHECK-NEXT:        %3306 = memref.load %7[] : memref<i32>
//CHECK-NEXT:        %3307 = arith.index_cast %507 : index to i32
//CHECK-NEXT:        %3308 = arith.addi %3306, %3307 : i32
//CHECK-NEXT:        scf.yield %3308 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %511, %7[] : memref<i32>
//CHECK-NEXT:      %3309 = memref.load %16[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3309 : memref<?x?x?xf64>
//CHECK-NEXT:      %3310 = memref.load %9[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3310 : memref<?x?x?xf64>
//CHECK-NEXT:      %3311 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3311 : memref<?x?x?xf64>
//CHECK-NEXT:      %3312 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3312 : memref<?x?x?xf64>
//CHECK-NEXT:      %3313 = memref.load %8[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3313 : memref<?x?x?xf64>
//CHECK-NEXT:      %3314 = memref.load %21[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3314 : memref<?x?x?xf64>
//CHECK-NEXT:      %3315 = memref.load %22[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3315 : memref<?x?x?xf64>
//CHECK-NEXT:      %3316 = memref.load %24[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3316 : memref<?x?x?xf64>
//CHECK-NEXT:      %3317 = memref.load %25[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3317 : memref<?x?x?xf64>
//CHECK-NEXT:      %3318 = memref.load %17[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3318 : memref<?x?x?xf64>
//CHECK-NEXT:      %3319 = memref.load %19[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3319 : memref<?x?x?xf64>
//CHECK-NEXT:      %3320 = memref.load %15[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3320 : memref<?x?x?xf64>
//CHECK-NEXT:      %3321 = memref.load %20[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3321 : memref<?x?x?xf64>
//CHECK-NEXT:      %3322 = memref.load %23[] : memref<memref<?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3322 : memref<?x?xf64>
//CHECK-NEXT:      %3323 = memref.load %13[] : memref<memref<?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3323 : memref<?x?xf64>
//CHECK-NEXT:      %3324 = memref.load %18[] : memref<memref<?x?xf64>>
//CHECK-NEXT:      memref.dealloc %3324 : memref<?x?xf64>
//CHECK-NEXT:      %3325 = memref.load %14[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %3325 : memref<?xf64>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QMtra_adv_modPtra_adv() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioBeginExternalListOutput(i32, !llvm.ptr, i32) -> !llvm.ptr 
//CHECK-NEXT:    func.func private @_FortranAioOutputAscii(!llvm.ptr, !llvm.ptr, i64) -> i1 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<12 x i8>, sym_name = "_QQclX496E697469616C6973696E67", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "Initialising", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioEndIoStatement(!llvm.ptr) -> i32 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<19 x i8>, sym_name = "_QQclX5374617274696E6720697465726174696F6E20", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "Starting iteration ", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioOutputInteger32(!llvm.ptr, i32) -> i1 
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
