// RUN: xftn %S/../../../../examples/advection/pwadvection.F90 --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    func.func @_QMpwadvectionPwrapper(%0 : memref<i32> {fir.bindc_name = "nz"}, %1 : memref<i32> {fir.bindc_name = "ny"}, %2 : memref<i32> {fir.bindc_name = "nx"}) {
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %6 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %8 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %9 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %10 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %11 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %12 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %13 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %14 = arith.index_cast %13 : i32 to index
//CHECK-NEXT:      %15 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %16 = arith.index_cast %15 : i32 to index
//CHECK-NEXT:      %17 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %18 = arith.index_cast %17 : i32 to index
//CHECK-NEXT:      %19 = memref.alloc(%18, %16, %14) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %19, %3[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %20 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %21 = arith.index_cast %20 : i32 to index
//CHECK-NEXT:      %22 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %23 = arith.index_cast %22 : i32 to index
//CHECK-NEXT:      %24 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %25 = arith.index_cast %24 : i32 to index
//CHECK-NEXT:      %26 = memref.alloc(%25, %23, %21) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %26, %4[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %27 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %28 = arith.index_cast %27 : i32 to index
//CHECK-NEXT:      %29 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %30 = arith.index_cast %29 : i32 to index
//CHECK-NEXT:      %31 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %32 = arith.index_cast %31 : i32 to index
//CHECK-NEXT:      %33 = memref.alloc(%32, %30, %28) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %33, %5[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %34 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %35 = arith.index_cast %34 : i32 to index
//CHECK-NEXT:      %36 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %37 = arith.index_cast %36 : i32 to index
//CHECK-NEXT:      %38 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %39 = arith.index_cast %38 : i32 to index
//CHECK-NEXT:      %40 = memref.alloc(%39, %37, %35) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %40, %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %41 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %42 = arith.index_cast %41 : i32 to index
//CHECK-NEXT:      %43 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %44 = arith.index_cast %43 : i32 to index
//CHECK-NEXT:      %45 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %46 = arith.index_cast %45 : i32 to index
//CHECK-NEXT:      %47 = memref.alloc(%46, %44, %42) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %47, %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %48 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %49 = arith.index_cast %48 : i32 to index
//CHECK-NEXT:      %50 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %51 = arith.index_cast %50 : i32 to index
//CHECK-NEXT:      %52 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %53 = arith.index_cast %52 : i32 to index
//CHECK-NEXT:      %54 = memref.alloc(%53, %51, %49) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %54, %12[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %55 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %56 = arith.index_cast %55 : i32 to index
//CHECK-NEXT:      %57 = memref.alloc(%56) : memref<?xf64>
//CHECK-NEXT:      memref.store %57, %6[] : memref<memref<?xf64>>
//CHECK-NEXT:      %58 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %59 = arith.index_cast %58 : i32 to index
//CHECK-NEXT:      %60 = memref.alloc(%59) : memref<?xf64>
//CHECK-NEXT:      memref.store %60, %7[] : memref<memref<?xf64>>
//CHECK-NEXT:      %61 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %62 = arith.index_cast %61 : i32 to index
//CHECK-NEXT:      %63 = memref.alloc(%62) : memref<?xf64>
//CHECK-NEXT:      memref.store %63, %8[] : memref<memref<?xf64>>
//CHECK-NEXT:      %64 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %65 = arith.index_cast %64 : i32 to index
//CHECK-NEXT:      %66 = memref.alloc(%65) : memref<?xf64>
//CHECK-NEXT:      memref.store %66, %9[] : memref<memref<?xf64>>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %67 = memref.load %3[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %68 = memref.load %4[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %69 = memref.load %5[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %70 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %71 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %72 = memref.load %12[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %73 = memref.load %6[] : memref<memref<?xf64>>
//CHECK-NEXT:        %74 = memref.load %7[] : memref<memref<?xf64>>
//CHECK-NEXT:        %75 = memref.load %8[] : memref<memref<?xf64>>
//CHECK-NEXT:        %76 = memref.load %9[] : memref<memref<?xf64>>
//CHECK-NEXT:        func.call @_QMpwadvectionPcalc(%67, %68, %69, %70, %71, %72, %73, %74, %75, %76, %0, %1, %2) : (memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?xf64>, memref<?xf64>, memref<?xf64>, memref<?xf64>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %77 = memref.load %3[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %77 : memref<?x?x?xf64>
//CHECK-NEXT:      %78 = memref.load %4[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %78 : memref<?x?x?xf64>
//CHECK-NEXT:      %79 = memref.load %5[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %79 : memref<?x?x?xf64>
//CHECK-NEXT:      %80 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %80 : memref<?x?x?xf64>
//CHECK-NEXT:      %81 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %81 : memref<?x?x?xf64>
//CHECK-NEXT:      %82 = memref.load %12[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %82 : memref<?x?x?xf64>
//CHECK-NEXT:      %83 = memref.load %6[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %83 : memref<?xf64>
//CHECK-NEXT:      %84 = memref.load %7[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %84 : memref<?xf64>
//CHECK-NEXT:      %85 = memref.load %8[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %85 : memref<?xf64>
//CHECK-NEXT:      %86 = memref.load %9[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %86 : memref<?xf64>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpwadvectionPcalc(%0 : memref<?x?x?xf64> {fir.bindc_name = "su"}, %1 : memref<?x?x?xf64> {fir.bindc_name = "sv"}, %2 : memref<?x?x?xf64> {fir.bindc_name = "sw"}, %3 : memref<?x?x?xf64> {fir.bindc_name = "u"}, %4 : memref<?x?x?xf64> {fir.bindc_name = "v"}, %5 : memref<?x?x?xf64> {fir.bindc_name = "w"}, %6 : memref<?xf64> {fir.bindc_name = "tzc1"}, %7 : memref<?xf64> {fir.bindc_name = "tzc2"}, %8 : memref<?xf64> {fir.bindc_name = "tzd1"}, %9 : memref<?xf64> {fir.bindc_name = "tzd2"}, %10 : memref<i32> {fir.bindc_name = "nz"}, %11 : memref<i32> {fir.bindc_name = "ny"}, %12 : memref<i32> {fir.bindc_name = "nx"}) {
//CHECK-NEXT:      %13 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %14 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %15 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %16 = arith.constant 1 : index
//CHECK-NEXT:      %17 = arith.constant 0 : index
//CHECK-NEXT:      %18 = "memref.dim"(%0, %17) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %19 = arith.addi %18, %16 : index
//CHECK-NEXT:      %20 = arith.constant 1 : index
//CHECK-NEXT:      %21 = "memref.dim"(%0, %20) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %22 = arith.addi %21, %16 : index
//CHECK-NEXT:      %23 = arith.constant 2 : index
//CHECK-NEXT:      %24 = "memref.dim"(%0, %23) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %25 = arith.addi %24, %16 : index
//CHECK-NEXT:      %26 = arith.constant 1 : index
//CHECK-NEXT:      %27 = arith.constant 0 : index
//CHECK-NEXT:      %28 = "memref.dim"(%1, %27) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %29 = arith.addi %28, %26 : index
//CHECK-NEXT:      %30 = arith.constant 1 : index
//CHECK-NEXT:      %31 = "memref.dim"(%1, %30) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %32 = arith.addi %31, %26 : index
//CHECK-NEXT:      %33 = arith.constant 2 : index
//CHECK-NEXT:      %34 = "memref.dim"(%1, %33) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %35 = arith.addi %34, %26 : index
//CHECK-NEXT:      %36 = arith.constant 1 : index
//CHECK-NEXT:      %37 = arith.constant 0 : index
//CHECK-NEXT:      %38 = "memref.dim"(%2, %37) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %39 = arith.addi %38, %36 : index
//CHECK-NEXT:      %40 = arith.constant 1 : index
//CHECK-NEXT:      %41 = "memref.dim"(%2, %40) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %42 = arith.addi %41, %36 : index
//CHECK-NEXT:      %43 = arith.constant 2 : index
//CHECK-NEXT:      %44 = "memref.dim"(%2, %43) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %45 = arith.addi %44, %36 : index
//CHECK-NEXT:      %46 = arith.constant 1 : index
//CHECK-NEXT:      %47 = arith.constant 0 : index
//CHECK-NEXT:      %48 = "memref.dim"(%6, %47) : (memref<?xf64>, index) -> index
//CHECK-NEXT:      %49 = arith.addi %48, %46 : index
//CHECK-NEXT:      %50 = arith.constant 1 : index
//CHECK-NEXT:      %51 = arith.constant 0 : index
//CHECK-NEXT:      %52 = "memref.dim"(%7, %51) : (memref<?xf64>, index) -> index
//CHECK-NEXT:      %53 = arith.addi %52, %50 : index
//CHECK-NEXT:      %54 = arith.constant 1 : index
//CHECK-NEXT:      %55 = arith.constant 0 : index
//CHECK-NEXT:      %56 = "memref.dim"(%8, %55) : (memref<?xf64>, index) -> index
//CHECK-NEXT:      %57 = arith.addi %56, %54 : index
//CHECK-NEXT:      %58 = arith.constant 1 : index
//CHECK-NEXT:      %59 = arith.constant 0 : index
//CHECK-NEXT:      %60 = "memref.dim"(%9, %59) : (memref<?xf64>, index) -> index
//CHECK-NEXT:      %61 = arith.addi %60, %58 : index
//CHECK-NEXT:      %62 = arith.constant 1 : index
//CHECK-NEXT:      %63 = arith.constant 0 : index
//CHECK-NEXT:      %64 = "memref.dim"(%3, %63) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %65 = arith.addi %64, %62 : index
//CHECK-NEXT:      %66 = arith.constant 1 : index
//CHECK-NEXT:      %67 = "memref.dim"(%3, %66) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %68 = arith.addi %67, %62 : index
//CHECK-NEXT:      %69 = arith.constant 2 : index
//CHECK-NEXT:      %70 = "memref.dim"(%3, %69) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %71 = arith.addi %70, %62 : index
//CHECK-NEXT:      %72 = arith.constant 1 : index
//CHECK-NEXT:      %73 = arith.constant 0 : index
//CHECK-NEXT:      %74 = "memref.dim"(%4, %73) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %75 = arith.addi %74, %72 : index
//CHECK-NEXT:      %76 = arith.constant 1 : index
//CHECK-NEXT:      %77 = "memref.dim"(%4, %76) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %78 = arith.addi %77, %72 : index
//CHECK-NEXT:      %79 = arith.constant 2 : index
//CHECK-NEXT:      %80 = "memref.dim"(%4, %79) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %81 = arith.addi %80, %72 : index
//CHECK-NEXT:      %82 = arith.constant 1 : index
//CHECK-NEXT:      %83 = arith.constant 0 : index
//CHECK-NEXT:      %84 = "memref.dim"(%5, %83) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %85 = arith.addi %84, %82 : index
//CHECK-NEXT:      %86 = arith.constant 1 : index
//CHECK-NEXT:      %87 = "memref.dim"(%5, %86) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %88 = arith.addi %87, %82 : index
//CHECK-NEXT:      %89 = arith.constant 2 : index
//CHECK-NEXT:      %90 = "memref.dim"(%5, %89) : (memref<?x?x?xf64>, index) -> index
//CHECK-NEXT:      %91 = arith.addi %90, %82 : index
//CHECK-NEXT:      %92 = arith.constant 6 : i32
//CHECK-NEXT:      %93 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %94 = "llvm.getelementptr"(%93) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %95 = arith.constant 45 : i32
//CHECK-NEXT:      %96 = func.call @_FortranAioBeginExternalListOutput(%92, %94, %95) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:      %97 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %98 = "llvm.getelementptr"(%97) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %99 = arith.constant 10 : index
//CHECK-NEXT:      %100 = arith.index_cast %99 : index to i64
//CHECK-NEXT:      %101 = func.call @_FortranAioOutputAscii(%96, %98, %100) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:      %102 = func.call @_FortranAioEndIoStatement(%96) : (!llvm.ptr) -> i32
//CHECK-NEXT:      %103 = arith.constant 1 : i32
//CHECK-NEXT:      %104 = arith.index_cast %103 : i32 to index
//CHECK-NEXT:      %105 = memref.load %12[] : memref<i32>
//CHECK-NEXT:      %106 = arith.index_cast %105 : i32 to index
//CHECK-NEXT:      %107 = arith.constant 1 : index
//CHECK-NEXT:      %108 = arith.index_cast %104 : index to i32
//CHECK-NEXT:      %109 = arith.constant 1 : index
//CHECK-NEXT:      %110 = arith.addi %106, %109 : index
//CHECK-NEXT:      %111 = scf.for %112 = %104 to %110 step %107 iter_args(%113 = %108) -> (i32) {
//CHECK-NEXT:        memref.store %113, %13[] : memref<i32>
//CHECK-NEXT:        %114 = arith.constant 1 : i32
//CHECK-NEXT:        %115 = arith.index_cast %114 : i32 to index
//CHECK-NEXT:        %116 = memref.load %11[] : memref<i32>
//CHECK-NEXT:        %117 = arith.index_cast %116 : i32 to index
//CHECK-NEXT:        %118 = arith.constant 1 : index
//CHECK-NEXT:        %119 = arith.index_cast %115 : index to i32
//CHECK-NEXT:        %120 = arith.constant 1 : index
//CHECK-NEXT:        %121 = arith.addi %117, %120 : index
//CHECK-NEXT:        %122 = scf.for %123 = %115 to %121 step %118 iter_args(%124 = %119) -> (i32) {
//CHECK-NEXT:          memref.store %124, %14[] : memref<i32>
//CHECK-NEXT:          %125 = arith.constant 1 : i32
//CHECK-NEXT:          %126 = arith.index_cast %125 : i32 to index
//CHECK-NEXT:          %127 = memref.load %10[] : memref<i32>
//CHECK-NEXT:          %128 = arith.index_cast %127 : i32 to index
//CHECK-NEXT:          %129 = arith.constant 1 : index
//CHECK-NEXT:          %130 = arith.index_cast %126 : index to i32
//CHECK-NEXT:          %131 = arith.constant 1 : index
//CHECK-NEXT:          %132 = arith.addi %128, %131 : index
//CHECK-NEXT:          %133 = scf.for %134 = %126 to %132 step %129 iter_args(%135 = %130) -> (i32) {
//CHECK-NEXT:            memref.store %135, %15[] : memref<i32>
//CHECK-NEXT:            %136 = arith.constant 1.000000e+01 : f64
//CHECK-NEXT:            %137 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %138 = arith.extui %137 : i32 to i64
//CHECK-NEXT:            %139 = arith.index_cast %138 : i64 to index
//CHECK-NEXT:            %140 = arith.constant 1 : index
//CHECK-NEXT:            %141 = arith.subi %139, %140 : index
//CHECK-NEXT:            %142 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %143 = arith.extui %142 : i32 to i64
//CHECK-NEXT:            %144 = arith.index_cast %143 : i64 to index
//CHECK-NEXT:            %145 = arith.constant 1 : index
//CHECK-NEXT:            %146 = arith.subi %144, %145 : index
//CHECK-NEXT:            %147 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %148 = arith.extui %147 : i32 to i64
//CHECK-NEXT:            %149 = arith.index_cast %148 : i64 to index
//CHECK-NEXT:            %150 = arith.constant 1 : index
//CHECK-NEXT:            %151 = arith.subi %149, %150 : index
//CHECK-NEXT:            memref.store %136, %3[%151, %146, %141] : memref<?x?x?xf64>
//CHECK-NEXT:            %152 = arith.constant 2.000000e+01 : f64
//CHECK-NEXT:            %153 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %154 = arith.extui %153 : i32 to i64
//CHECK-NEXT:            %155 = arith.index_cast %154 : i64 to index
//CHECK-NEXT:            %156 = arith.constant 1 : index
//CHECK-NEXT:            %157 = arith.subi %155, %156 : index
//CHECK-NEXT:            %158 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %159 = arith.extui %158 : i32 to i64
//CHECK-NEXT:            %160 = arith.index_cast %159 : i64 to index
//CHECK-NEXT:            %161 = arith.constant 1 : index
//CHECK-NEXT:            %162 = arith.subi %160, %161 : index
//CHECK-NEXT:            %163 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %164 = arith.extui %163 : i32 to i64
//CHECK-NEXT:            %165 = arith.index_cast %164 : i64 to index
//CHECK-NEXT:            %166 = arith.constant 1 : index
//CHECK-NEXT:            %167 = arith.subi %165, %166 : index
//CHECK-NEXT:            memref.store %152, %4[%167, %162, %157] : memref<?x?x?xf64>
//CHECK-NEXT:            %168 = arith.constant 3.000000e+01 : f64
//CHECK-NEXT:            %169 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %170 = arith.extui %169 : i32 to i64
//CHECK-NEXT:            %171 = arith.index_cast %170 : i64 to index
//CHECK-NEXT:            %172 = arith.constant 1 : index
//CHECK-NEXT:            %173 = arith.subi %171, %172 : index
//CHECK-NEXT:            %174 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %175 = arith.extui %174 : i32 to i64
//CHECK-NEXT:            %176 = arith.index_cast %175 : i64 to index
//CHECK-NEXT:            %177 = arith.constant 1 : index
//CHECK-NEXT:            %178 = arith.subi %176, %177 : index
//CHECK-NEXT:            %179 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %180 = arith.extui %179 : i32 to i64
//CHECK-NEXT:            %181 = arith.index_cast %180 : i64 to index
//CHECK-NEXT:            %182 = arith.constant 1 : index
//CHECK-NEXT:            %183 = arith.subi %181, %182 : index
//CHECK-NEXT:            memref.store %168, %5[%183, %178, %173] : memref<?x?x?xf64>
//CHECK-NEXT:            %184 = arith.addi %134, %129 : index
//CHECK-NEXT:            %185 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %186 = arith.index_cast %129 : index to i32
//CHECK-NEXT:            %187 = arith.addi %185, %186 : i32
//CHECK-NEXT:            scf.yield %187 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %133, %15[] : memref<i32>
//CHECK-NEXT:          %188 = arith.addi %123, %118 : index
//CHECK-NEXT:          %189 = memref.load %14[] : memref<i32>
//CHECK-NEXT:          %190 = arith.index_cast %118 : index to i32
//CHECK-NEXT:          %191 = arith.addi %189, %190 : i32
//CHECK-NEXT:          scf.yield %191 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %122, %14[] : memref<i32>
//CHECK-NEXT:        %192 = arith.addi %112, %107 : index
//CHECK-NEXT:        %193 = memref.load %13[] : memref<i32>
//CHECK-NEXT:        %194 = arith.index_cast %107 : index to i32
//CHECK-NEXT:        %195 = arith.addi %193, %194 : i32
//CHECK-NEXT:        scf.yield %195 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %111, %13[] : memref<i32>
//CHECK-NEXT:      %196 = arith.constant 1 : i32
//CHECK-NEXT:      %197 = arith.index_cast %196 : i32 to index
//CHECK-NEXT:      %198 = memref.load %10[] : memref<i32>
//CHECK-NEXT:      %199 = arith.index_cast %198 : i32 to index
//CHECK-NEXT:      %200 = arith.constant 1 : index
//CHECK-NEXT:      %201 = arith.index_cast %197 : index to i32
//CHECK-NEXT:      %202 = arith.constant 1 : index
//CHECK-NEXT:      %203 = arith.addi %199, %202 : index
//CHECK-NEXT:      %204 = scf.for %205 = %197 to %203 step %200 iter_args(%206 = %201) -> (i32) {
//CHECK-NEXT:        memref.store %206, %15[] : memref<i32>
//CHECK-NEXT:        %207 = arith.constant 5.000000e+01 : f64
//CHECK-NEXT:        %208 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %209 = arith.extui %208 : i32 to i64
//CHECK-NEXT:        %210 = arith.index_cast %209 : i64 to index
//CHECK-NEXT:        %211 = arith.constant 1 : index
//CHECK-NEXT:        %212 = arith.subi %210, %211 : index
//CHECK-NEXT:        memref.store %207, %6[%212] : memref<?xf64>
//CHECK-NEXT:        %213 = arith.constant 1.500000e+01 : f64
//CHECK-NEXT:        %214 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %215 = arith.extui %214 : i32 to i64
//CHECK-NEXT:        %216 = arith.index_cast %215 : i64 to index
//CHECK-NEXT:        %217 = arith.constant 1 : index
//CHECK-NEXT:        %218 = arith.subi %216, %217 : index
//CHECK-NEXT:        memref.store %213, %7[%218] : memref<?xf64>
//CHECK-NEXT:        %219 = arith.constant 1.000000e+02 : f64
//CHECK-NEXT:        %220 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %221 = arith.extui %220 : i32 to i64
//CHECK-NEXT:        %222 = arith.index_cast %221 : i64 to index
//CHECK-NEXT:        %223 = arith.constant 1 : index
//CHECK-NEXT:        %224 = arith.subi %222, %223 : index
//CHECK-NEXT:        memref.store %219, %8[%224] : memref<?xf64>
//CHECK-NEXT:        %225 = arith.constant 5.000000e+00 : f64
//CHECK-NEXT:        %226 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %227 = arith.extui %226 : i32 to i64
//CHECK-NEXT:        %228 = arith.index_cast %227 : i64 to index
//CHECK-NEXT:        %229 = arith.constant 1 : index
//CHECK-NEXT:        %230 = arith.subi %228, %229 : index
//CHECK-NEXT:        memref.store %225, %9[%230] : memref<?xf64>
//CHECK-NEXT:        %231 = arith.addi %205, %200 : index
//CHECK-NEXT:        %232 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %233 = arith.index_cast %200 : index to i32
//CHECK-NEXT:        %234 = arith.addi %232, %233 : i32
//CHECK-NEXT:        scf.yield %234 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %204, %15[] : memref<i32>
//CHECK-NEXT:      %235 = arith.constant 6 : i32
//CHECK-NEXT:      %236 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %237 = "llvm.getelementptr"(%236) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %238 = arith.constant 64 : i32
//CHECK-NEXT:      %239 = func.call @_FortranAioBeginExternalListOutput(%235, %237, %238) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:      %240 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %241 = "llvm.getelementptr"(%240) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %242 = arith.constant 9 : index
//CHECK-NEXT:      %243 = arith.index_cast %242 : index to i64
//CHECK-NEXT:      %244 = func.call @_FortranAioOutputAscii(%239, %241, %243) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:      %245 = func.call @_FortranAioEndIoStatement(%239) : (!llvm.ptr) -> i32
//CHECK-NEXT:      %246 = arith.constant 2 : i32
//CHECK-NEXT:      %247 = arith.index_cast %246 : i32 to index
//CHECK-NEXT:      %248 = memref.load %12[] : memref<i32>
//CHECK-NEXT:      %249 = arith.constant 1 : i32
//CHECK-NEXT:      %250 = arith.subi %248, %249 : i32
//CHECK-NEXT:      %251 = arith.index_cast %250 : i32 to index
//CHECK-NEXT:      %252 = arith.constant 1 : index
//CHECK-NEXT:      %253 = arith.index_cast %247 : index to i32
//CHECK-NEXT:      %254 = arith.constant 1 : index
//CHECK-NEXT:      %255 = arith.addi %251, %254 : index
//CHECK-NEXT:      %256 = scf.for %257 = %247 to %255 step %252 iter_args(%258 = %253) -> (i32) {
//CHECK-NEXT:        memref.store %258, %13[] : memref<i32>
//CHECK-NEXT:        %259 = arith.constant 2 : i32
//CHECK-NEXT:        %260 = arith.index_cast %259 : i32 to index
//CHECK-NEXT:        %261 = memref.load %11[] : memref<i32>
//CHECK-NEXT:        %262 = arith.constant 1 : i32
//CHECK-NEXT:        %263 = arith.subi %261, %262 : i32
//CHECK-NEXT:        %264 = arith.index_cast %263 : i32 to index
//CHECK-NEXT:        %265 = arith.constant 1 : index
//CHECK-NEXT:        %266 = arith.index_cast %260 : index to i32
//CHECK-NEXT:        %267 = arith.constant 1 : index
//CHECK-NEXT:        %268 = arith.addi %264, %267 : index
//CHECK-NEXT:        %269 = scf.for %270 = %260 to %268 step %265 iter_args(%271 = %266) -> (i32) {
//CHECK-NEXT:          memref.store %271, %14[] : memref<i32>
//CHECK-NEXT:          %272 = arith.constant 2 : i32
//CHECK-NEXT:          %273 = arith.index_cast %272 : i32 to index
//CHECK-NEXT:          %274 = memref.load %10[] : memref<i32>
//CHECK-NEXT:          %275 = arith.constant 1 : i32
//CHECK-NEXT:          %276 = arith.subi %274, %275 : i32
//CHECK-NEXT:          %277 = arith.index_cast %276 : i32 to index
//CHECK-NEXT:          %278 = arith.constant 1 : index
//CHECK-NEXT:          %279 = arith.index_cast %273 : index to i32
//CHECK-NEXT:          %280 = arith.constant 1 : index
//CHECK-NEXT:          %281 = arith.addi %277, %280 : index
//CHECK-NEXT:          %282 = scf.for %283 = %273 to %281 step %278 iter_args(%284 = %279) -> (i32) {
//CHECK-NEXT:            memref.store %284, %15[] : memref<i32>
//CHECK-NEXT:            %285 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:            %286 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %287 = arith.extui %286 : i32 to i64
//CHECK-NEXT:            %288 = arith.index_cast %287 : i64 to index
//CHECK-NEXT:            %289 = arith.constant 1 : index
//CHECK-NEXT:            %290 = arith.subi %288, %289 : index
//CHECK-NEXT:            %291 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %292 = arith.extui %291 : i32 to i64
//CHECK-NEXT:            %293 = arith.index_cast %292 : i64 to index
//CHECK-NEXT:            %294 = arith.constant 1 : index
//CHECK-NEXT:            %295 = arith.subi %293, %294 : index
//CHECK-NEXT:            %296 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %297 = arith.constant 1 : i32
//CHECK-NEXT:            %298 = arith.subi %296, %297 : i32
//CHECK-NEXT:            %299 = arith.extui %298 : i32 to i64
//CHECK-NEXT:            %300 = arith.index_cast %299 : i64 to index
//CHECK-NEXT:            %301 = arith.constant 1 : index
//CHECK-NEXT:            %302 = arith.subi %300, %301 : index
//CHECK-NEXT:            %303 = memref.load %3[%302, %295, %290] : memref<?x?x?xf64>
//CHECK-NEXT:            %304 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %305 = arith.extui %304 : i32 to i64
//CHECK-NEXT:            %306 = arith.index_cast %305 : i64 to index
//CHECK-NEXT:            %307 = arith.constant 1 : index
//CHECK-NEXT:            %308 = arith.subi %306, %307 : index
//CHECK-NEXT:            %309 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %310 = arith.extui %309 : i32 to i64
//CHECK-NEXT:            %311 = arith.index_cast %310 : i64 to index
//CHECK-NEXT:            %312 = arith.constant 1 : index
//CHECK-NEXT:            %313 = arith.subi %311, %312 : index
//CHECK-NEXT:            %314 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %315 = arith.extui %314 : i32 to i64
//CHECK-NEXT:            %316 = arith.index_cast %315 : i64 to index
//CHECK-NEXT:            %317 = arith.constant 1 : index
//CHECK-NEXT:            %318 = arith.subi %316, %317 : index
//CHECK-NEXT:            %319 = memref.load %3[%318, %313, %308] : memref<?x?x?xf64>
//CHECK-NEXT:            %320 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %321 = arith.extui %320 : i32 to i64
//CHECK-NEXT:            %322 = arith.index_cast %321 : i64 to index
//CHECK-NEXT:            %323 = arith.constant 1 : index
//CHECK-NEXT:            %324 = arith.subi %322, %323 : index
//CHECK-NEXT:            %325 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %326 = arith.extui %325 : i32 to i64
//CHECK-NEXT:            %327 = arith.index_cast %326 : i64 to index
//CHECK-NEXT:            %328 = arith.constant 1 : index
//CHECK-NEXT:            %329 = arith.subi %327, %328 : index
//CHECK-NEXT:            %330 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %331 = arith.constant 1 : i32
//CHECK-NEXT:            %332 = arith.subi %330, %331 : i32
//CHECK-NEXT:            %333 = arith.extui %332 : i32 to i64
//CHECK-NEXT:            %334 = arith.index_cast %333 : i64 to index
//CHECK-NEXT:            %335 = arith.constant 1 : index
//CHECK-NEXT:            %336 = arith.subi %334, %335 : index
//CHECK-NEXT:            %337 = memref.load %3[%336, %329, %324] : memref<?x?x?xf64>
//CHECK-NEXT:            %338 = arith.addf %319, %337 fastmath<contract> : f64
//CHECK-NEXT:            %339 = arith.mulf %303, %338 fastmath<contract> : f64
//CHECK-NEXT:            %340 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %341 = arith.extui %340 : i32 to i64
//CHECK-NEXT:            %342 = arith.index_cast %341 : i64 to index
//CHECK-NEXT:            %343 = arith.constant 1 : index
//CHECK-NEXT:            %344 = arith.subi %342, %343 : index
//CHECK-NEXT:            %345 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %346 = arith.extui %345 : i32 to i64
//CHECK-NEXT:            %347 = arith.index_cast %346 : i64 to index
//CHECK-NEXT:            %348 = arith.constant 1 : index
//CHECK-NEXT:            %349 = arith.subi %347, %348 : index
//CHECK-NEXT:            %350 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %351 = arith.constant 1 : i32
//CHECK-NEXT:            %352 = arith.addi %350, %351 : i32
//CHECK-NEXT:            %353 = arith.extui %352 : i32 to i64
//CHECK-NEXT:            %354 = arith.index_cast %353 : i64 to index
//CHECK-NEXT:            %355 = arith.constant 1 : index
//CHECK-NEXT:            %356 = arith.subi %354, %355 : index
//CHECK-NEXT:            %357 = memref.load %3[%356, %349, %344] : memref<?x?x?xf64>
//CHECK-NEXT:            %358 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %359 = arith.extui %358 : i32 to i64
//CHECK-NEXT:            %360 = arith.index_cast %359 : i64 to index
//CHECK-NEXT:            %361 = arith.constant 1 : index
//CHECK-NEXT:            %362 = arith.subi %360, %361 : index
//CHECK-NEXT:            %363 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %364 = arith.extui %363 : i32 to i64
//CHECK-NEXT:            %365 = arith.index_cast %364 : i64 to index
//CHECK-NEXT:            %366 = arith.constant 1 : index
//CHECK-NEXT:            %367 = arith.subi %365, %366 : index
//CHECK-NEXT:            %368 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %369 = arith.extui %368 : i32 to i64
//CHECK-NEXT:            %370 = arith.index_cast %369 : i64 to index
//CHECK-NEXT:            %371 = arith.constant 1 : index
//CHECK-NEXT:            %372 = arith.subi %370, %371 : index
//CHECK-NEXT:            %373 = memref.load %3[%372, %367, %362] : memref<?x?x?xf64>
//CHECK-NEXT:            %374 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %375 = arith.extui %374 : i32 to i64
//CHECK-NEXT:            %376 = arith.index_cast %375 : i64 to index
//CHECK-NEXT:            %377 = arith.constant 1 : index
//CHECK-NEXT:            %378 = arith.subi %376, %377 : index
//CHECK-NEXT:            %379 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %380 = arith.extui %379 : i32 to i64
//CHECK-NEXT:            %381 = arith.index_cast %380 : i64 to index
//CHECK-NEXT:            %382 = arith.constant 1 : index
//CHECK-NEXT:            %383 = arith.subi %381, %382 : index
//CHECK-NEXT:            %384 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %385 = arith.constant 1 : i32
//CHECK-NEXT:            %386 = arith.addi %384, %385 : i32
//CHECK-NEXT:            %387 = arith.extui %386 : i32 to i64
//CHECK-NEXT:            %388 = arith.index_cast %387 : i64 to index
//CHECK-NEXT:            %389 = arith.constant 1 : index
//CHECK-NEXT:            %390 = arith.subi %388, %389 : index
//CHECK-NEXT:            %391 = memref.load %3[%390, %383, %378] : memref<?x?x?xf64>
//CHECK-NEXT:            %392 = arith.addf %373, %391 fastmath<contract> : f64
//CHECK-NEXT:            %393 = arith.mulf %357, %392 fastmath<contract> : f64
//CHECK-NEXT:            %394 = arith.subf %339, %393 fastmath<contract> : f64
//CHECK-NEXT:            %395 = arith.mulf %285, %394 fastmath<contract> : f64
//CHECK-NEXT:            %396 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:            %397 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %398 = arith.extui %397 : i32 to i64
//CHECK-NEXT:            %399 = arith.index_cast %398 : i64 to index
//CHECK-NEXT:            %400 = arith.constant 1 : index
//CHECK-NEXT:            %401 = arith.subi %399, %400 : index
//CHECK-NEXT:            %402 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %403 = arith.constant 1 : i32
//CHECK-NEXT:            %404 = arith.subi %402, %403 : i32
//CHECK-NEXT:            %405 = arith.extui %404 : i32 to i64
//CHECK-NEXT:            %406 = arith.index_cast %405 : i64 to index
//CHECK-NEXT:            %407 = arith.constant 1 : index
//CHECK-NEXT:            %408 = arith.subi %406, %407 : index
//CHECK-NEXT:            %409 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %410 = arith.extui %409 : i32 to i64
//CHECK-NEXT:            %411 = arith.index_cast %410 : i64 to index
//CHECK-NEXT:            %412 = arith.constant 1 : index
//CHECK-NEXT:            %413 = arith.subi %411, %412 : index
//CHECK-NEXT:            %414 = memref.load %3[%413, %408, %401] : memref<?x?x?xf64>
//CHECK-NEXT:            %415 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %416 = arith.extui %415 : i32 to i64
//CHECK-NEXT:            %417 = arith.index_cast %416 : i64 to index
//CHECK-NEXT:            %418 = arith.constant 1 : index
//CHECK-NEXT:            %419 = arith.subi %417, %418 : index
//CHECK-NEXT:            %420 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %421 = arith.constant 1 : i32
//CHECK-NEXT:            %422 = arith.subi %420, %421 : i32
//CHECK-NEXT:            %423 = arith.extui %422 : i32 to i64
//CHECK-NEXT:            %424 = arith.index_cast %423 : i64 to index
//CHECK-NEXT:            %425 = arith.constant 1 : index
//CHECK-NEXT:            %426 = arith.subi %424, %425 : index
//CHECK-NEXT:            %427 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %428 = arith.extui %427 : i32 to i64
//CHECK-NEXT:            %429 = arith.index_cast %428 : i64 to index
//CHECK-NEXT:            %430 = arith.constant 1 : index
//CHECK-NEXT:            %431 = arith.subi %429, %430 : index
//CHECK-NEXT:            %432 = memref.load %4[%431, %426, %419] : memref<?x?x?xf64>
//CHECK-NEXT:            %433 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %434 = arith.extui %433 : i32 to i64
//CHECK-NEXT:            %435 = arith.index_cast %434 : i64 to index
//CHECK-NEXT:            %436 = arith.constant 1 : index
//CHECK-NEXT:            %437 = arith.subi %435, %436 : index
//CHECK-NEXT:            %438 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %439 = arith.constant 1 : i32
//CHECK-NEXT:            %440 = arith.subi %438, %439 : i32
//CHECK-NEXT:            %441 = arith.extui %440 : i32 to i64
//CHECK-NEXT:            %442 = arith.index_cast %441 : i64 to index
//CHECK-NEXT:            %443 = arith.constant 1 : index
//CHECK-NEXT:            %444 = arith.subi %442, %443 : index
//CHECK-NEXT:            %445 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %446 = arith.constant 1 : i32
//CHECK-NEXT:            %447 = arith.addi %445, %446 : i32
//CHECK-NEXT:            %448 = arith.extui %447 : i32 to i64
//CHECK-NEXT:            %449 = arith.index_cast %448 : i64 to index
//CHECK-NEXT:            %450 = arith.constant 1 : index
//CHECK-NEXT:            %451 = arith.subi %449, %450 : index
//CHECK-NEXT:            %452 = memref.load %4[%451, %444, %437] : memref<?x?x?xf64>
//CHECK-NEXT:            %453 = arith.addf %432, %452 fastmath<contract> : f64
//CHECK-NEXT:            %454 = arith.mulf %414, %453 fastmath<contract> : f64
//CHECK-NEXT:            %455 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %456 = arith.extui %455 : i32 to i64
//CHECK-NEXT:            %457 = arith.index_cast %456 : i64 to index
//CHECK-NEXT:            %458 = arith.constant 1 : index
//CHECK-NEXT:            %459 = arith.subi %457, %458 : index
//CHECK-NEXT:            %460 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %461 = arith.constant 1 : i32
//CHECK-NEXT:            %462 = arith.addi %460, %461 : i32
//CHECK-NEXT:            %463 = arith.extui %462 : i32 to i64
//CHECK-NEXT:            %464 = arith.index_cast %463 : i64 to index
//CHECK-NEXT:            %465 = arith.constant 1 : index
//CHECK-NEXT:            %466 = arith.subi %464, %465 : index
//CHECK-NEXT:            %467 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %468 = arith.extui %467 : i32 to i64
//CHECK-NEXT:            %469 = arith.index_cast %468 : i64 to index
//CHECK-NEXT:            %470 = arith.constant 1 : index
//CHECK-NEXT:            %471 = arith.subi %469, %470 : index
//CHECK-NEXT:            %472 = memref.load %3[%471, %466, %459] : memref<?x?x?xf64>
//CHECK-NEXT:            %473 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %474 = arith.extui %473 : i32 to i64
//CHECK-NEXT:            %475 = arith.index_cast %474 : i64 to index
//CHECK-NEXT:            %476 = arith.constant 1 : index
//CHECK-NEXT:            %477 = arith.subi %475, %476 : index
//CHECK-NEXT:            %478 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %479 = arith.extui %478 : i32 to i64
//CHECK-NEXT:            %480 = arith.index_cast %479 : i64 to index
//CHECK-NEXT:            %481 = arith.constant 1 : index
//CHECK-NEXT:            %482 = arith.subi %480, %481 : index
//CHECK-NEXT:            %483 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %484 = arith.extui %483 : i32 to i64
//CHECK-NEXT:            %485 = arith.index_cast %484 : i64 to index
//CHECK-NEXT:            %486 = arith.constant 1 : index
//CHECK-NEXT:            %487 = arith.subi %485, %486 : index
//CHECK-NEXT:            %488 = memref.load %4[%487, %482, %477] : memref<?x?x?xf64>
//CHECK-NEXT:            %489 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %490 = arith.extui %489 : i32 to i64
//CHECK-NEXT:            %491 = arith.index_cast %490 : i64 to index
//CHECK-NEXT:            %492 = arith.constant 1 : index
//CHECK-NEXT:            %493 = arith.subi %491, %492 : index
//CHECK-NEXT:            %494 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %495 = arith.extui %494 : i32 to i64
//CHECK-NEXT:            %496 = arith.index_cast %495 : i64 to index
//CHECK-NEXT:            %497 = arith.constant 1 : index
//CHECK-NEXT:            %498 = arith.subi %496, %497 : index
//CHECK-NEXT:            %499 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %500 = arith.constant 1 : i32
//CHECK-NEXT:            %501 = arith.addi %499, %500 : i32
//CHECK-NEXT:            %502 = arith.extui %501 : i32 to i64
//CHECK-NEXT:            %503 = arith.index_cast %502 : i64 to index
//CHECK-NEXT:            %504 = arith.constant 1 : index
//CHECK-NEXT:            %505 = arith.subi %503, %504 : index
//CHECK-NEXT:            %506 = memref.load %4[%505, %498, %493] : memref<?x?x?xf64>
//CHECK-NEXT:            %507 = arith.addf %488, %506 fastmath<contract> : f64
//CHECK-NEXT:            %508 = arith.mulf %472, %507 fastmath<contract> : f64
//CHECK-NEXT:            %509 = arith.subf %454, %508 fastmath<contract> : f64
//CHECK-NEXT:            %510 = arith.mulf %396, %509 fastmath<contract> : f64
//CHECK-NEXT:            %511 = arith.addf %395, %510 fastmath<contract> : f64
//CHECK-NEXT:            %512 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %513 = arith.extui %512 : i32 to i64
//CHECK-NEXT:            %514 = arith.index_cast %513 : i64 to index
//CHECK-NEXT:            %515 = arith.constant 1 : index
//CHECK-NEXT:            %516 = arith.subi %514, %515 : index
//CHECK-NEXT:            %517 = memref.load %6[%516] : memref<?xf64>
//CHECK-NEXT:            %518 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %519 = arith.constant 1 : i32
//CHECK-NEXT:            %520 = arith.subi %518, %519 : i32
//CHECK-NEXT:            %521 = arith.extui %520 : i32 to i64
//CHECK-NEXT:            %522 = arith.index_cast %521 : i64 to index
//CHECK-NEXT:            %523 = arith.constant 1 : index
//CHECK-NEXT:            %524 = arith.subi %522, %523 : index
//CHECK-NEXT:            %525 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %526 = arith.extui %525 : i32 to i64
//CHECK-NEXT:            %527 = arith.index_cast %526 : i64 to index
//CHECK-NEXT:            %528 = arith.constant 1 : index
//CHECK-NEXT:            %529 = arith.subi %527, %528 : index
//CHECK-NEXT:            %530 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %531 = arith.extui %530 : i32 to i64
//CHECK-NEXT:            %532 = arith.index_cast %531 : i64 to index
//CHECK-NEXT:            %533 = arith.constant 1 : index
//CHECK-NEXT:            %534 = arith.subi %532, %533 : index
//CHECK-NEXT:            %535 = memref.load %3[%534, %529, %524] : memref<?x?x?xf64>
//CHECK-NEXT:            %536 = arith.mulf %517, %535 fastmath<contract> : f64
//CHECK-NEXT:            %537 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %538 = arith.constant 1 : i32
//CHECK-NEXT:            %539 = arith.subi %537, %538 : i32
//CHECK-NEXT:            %540 = arith.extui %539 : i32 to i64
//CHECK-NEXT:            %541 = arith.index_cast %540 : i64 to index
//CHECK-NEXT:            %542 = arith.constant 1 : index
//CHECK-NEXT:            %543 = arith.subi %541, %542 : index
//CHECK-NEXT:            %544 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %545 = arith.extui %544 : i32 to i64
//CHECK-NEXT:            %546 = arith.index_cast %545 : i64 to index
//CHECK-NEXT:            %547 = arith.constant 1 : index
//CHECK-NEXT:            %548 = arith.subi %546, %547 : index
//CHECK-NEXT:            %549 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %550 = arith.extui %549 : i32 to i64
//CHECK-NEXT:            %551 = arith.index_cast %550 : i64 to index
//CHECK-NEXT:            %552 = arith.constant 1 : index
//CHECK-NEXT:            %553 = arith.subi %551, %552 : index
//CHECK-NEXT:            %554 = memref.load %5[%553, %548, %543] : memref<?x?x?xf64>
//CHECK-NEXT:            %555 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %556 = arith.constant 1 : i32
//CHECK-NEXT:            %557 = arith.subi %555, %556 : i32
//CHECK-NEXT:            %558 = arith.extui %557 : i32 to i64
//CHECK-NEXT:            %559 = arith.index_cast %558 : i64 to index
//CHECK-NEXT:            %560 = arith.constant 1 : index
//CHECK-NEXT:            %561 = arith.subi %559, %560 : index
//CHECK-NEXT:            %562 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %563 = arith.extui %562 : i32 to i64
//CHECK-NEXT:            %564 = arith.index_cast %563 : i64 to index
//CHECK-NEXT:            %565 = arith.constant 1 : index
//CHECK-NEXT:            %566 = arith.subi %564, %565 : index
//CHECK-NEXT:            %567 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %568 = arith.constant 1 : i32
//CHECK-NEXT:            %569 = arith.addi %567, %568 : i32
//CHECK-NEXT:            %570 = arith.extui %569 : i32 to i64
//CHECK-NEXT:            %571 = arith.index_cast %570 : i64 to index
//CHECK-NEXT:            %572 = arith.constant 1 : index
//CHECK-NEXT:            %573 = arith.subi %571, %572 : index
//CHECK-NEXT:            %574 = memref.load %5[%573, %566, %561] : memref<?x?x?xf64>
//CHECK-NEXT:            %575 = arith.addf %554, %574 fastmath<contract> : f64
//CHECK-NEXT:            %576 = arith.mulf %536, %575 fastmath<contract> : f64
//CHECK-NEXT:            %577 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %578 = arith.extui %577 : i32 to i64
//CHECK-NEXT:            %579 = arith.index_cast %578 : i64 to index
//CHECK-NEXT:            %580 = arith.constant 1 : index
//CHECK-NEXT:            %581 = arith.subi %579, %580 : index
//CHECK-NEXT:            %582 = memref.load %7[%581] : memref<?xf64>
//CHECK-NEXT:            %583 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %584 = arith.constant 1 : i32
//CHECK-NEXT:            %585 = arith.addi %583, %584 : i32
//CHECK-NEXT:            %586 = arith.extui %585 : i32 to i64
//CHECK-NEXT:            %587 = arith.index_cast %586 : i64 to index
//CHECK-NEXT:            %588 = arith.constant 1 : index
//CHECK-NEXT:            %589 = arith.subi %587, %588 : index
//CHECK-NEXT:            %590 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %591 = arith.extui %590 : i32 to i64
//CHECK-NEXT:            %592 = arith.index_cast %591 : i64 to index
//CHECK-NEXT:            %593 = arith.constant 1 : index
//CHECK-NEXT:            %594 = arith.subi %592, %593 : index
//CHECK-NEXT:            %595 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %596 = arith.extui %595 : i32 to i64
//CHECK-NEXT:            %597 = arith.index_cast %596 : i64 to index
//CHECK-NEXT:            %598 = arith.constant 1 : index
//CHECK-NEXT:            %599 = arith.subi %597, %598 : index
//CHECK-NEXT:            %600 = memref.load %3[%599, %594, %589] : memref<?x?x?xf64>
//CHECK-NEXT:            %601 = arith.mulf %582, %600 fastmath<contract> : f64
//CHECK-NEXT:            %602 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %603 = arith.extui %602 : i32 to i64
//CHECK-NEXT:            %604 = arith.index_cast %603 : i64 to index
//CHECK-NEXT:            %605 = arith.constant 1 : index
//CHECK-NEXT:            %606 = arith.subi %604, %605 : index
//CHECK-NEXT:            %607 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %608 = arith.extui %607 : i32 to i64
//CHECK-NEXT:            %609 = arith.index_cast %608 : i64 to index
//CHECK-NEXT:            %610 = arith.constant 1 : index
//CHECK-NEXT:            %611 = arith.subi %609, %610 : index
//CHECK-NEXT:            %612 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %613 = arith.extui %612 : i32 to i64
//CHECK-NEXT:            %614 = arith.index_cast %613 : i64 to index
//CHECK-NEXT:            %615 = arith.constant 1 : index
//CHECK-NEXT:            %616 = arith.subi %614, %615 : index
//CHECK-NEXT:            %617 = memref.load %5[%616, %611, %606] : memref<?x?x?xf64>
//CHECK-NEXT:            %618 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %619 = arith.extui %618 : i32 to i64
//CHECK-NEXT:            %620 = arith.index_cast %619 : i64 to index
//CHECK-NEXT:            %621 = arith.constant 1 : index
//CHECK-NEXT:            %622 = arith.subi %620, %621 : index
//CHECK-NEXT:            %623 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %624 = arith.extui %623 : i32 to i64
//CHECK-NEXT:            %625 = arith.index_cast %624 : i64 to index
//CHECK-NEXT:            %626 = arith.constant 1 : index
//CHECK-NEXT:            %627 = arith.subi %625, %626 : index
//CHECK-NEXT:            %628 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %629 = arith.constant 1 : i32
//CHECK-NEXT:            %630 = arith.addi %628, %629 : i32
//CHECK-NEXT:            %631 = arith.extui %630 : i32 to i64
//CHECK-NEXT:            %632 = arith.index_cast %631 : i64 to index
//CHECK-NEXT:            %633 = arith.constant 1 : index
//CHECK-NEXT:            %634 = arith.subi %632, %633 : index
//CHECK-NEXT:            %635 = memref.load %5[%634, %627, %622] : memref<?x?x?xf64>
//CHECK-NEXT:            %636 = arith.addf %617, %635 fastmath<contract> : f64
//CHECK-NEXT:            %637 = arith.mulf %601, %636 fastmath<contract> : f64
//CHECK-NEXT:            %638 = arith.subf %576, %637 fastmath<contract> : f64
//CHECK-NEXT:            %639 = arith.addf %511, %638 fastmath<contract> : f64
//CHECK-NEXT:            %640 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %641 = arith.extui %640 : i32 to i64
//CHECK-NEXT:            %642 = arith.index_cast %641 : i64 to index
//CHECK-NEXT:            %643 = arith.constant 1 : index
//CHECK-NEXT:            %644 = arith.subi %642, %643 : index
//CHECK-NEXT:            %645 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %646 = arith.extui %645 : i32 to i64
//CHECK-NEXT:            %647 = arith.index_cast %646 : i64 to index
//CHECK-NEXT:            %648 = arith.constant 1 : index
//CHECK-NEXT:            %649 = arith.subi %647, %648 : index
//CHECK-NEXT:            %650 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %651 = arith.extui %650 : i32 to i64
//CHECK-NEXT:            %652 = arith.index_cast %651 : i64 to index
//CHECK-NEXT:            %653 = arith.constant 1 : index
//CHECK-NEXT:            %654 = arith.subi %652, %653 : index
//CHECK-NEXT:            memref.store %639, %0[%654, %649, %644] : memref<?x?x?xf64>
//CHECK-NEXT:            %655 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:            %656 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %657 = arith.extui %656 : i32 to i64
//CHECK-NEXT:            %658 = arith.index_cast %657 : i64 to index
//CHECK-NEXT:            %659 = arith.constant 1 : index
//CHECK-NEXT:            %660 = arith.subi %658, %659 : index
//CHECK-NEXT:            %661 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %662 = arith.constant 1 : i32
//CHECK-NEXT:            %663 = arith.subi %661, %662 : i32
//CHECK-NEXT:            %664 = arith.extui %663 : i32 to i64
//CHECK-NEXT:            %665 = arith.index_cast %664 : i64 to index
//CHECK-NEXT:            %666 = arith.constant 1 : index
//CHECK-NEXT:            %667 = arith.subi %665, %666 : index
//CHECK-NEXT:            %668 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %669 = arith.extui %668 : i32 to i64
//CHECK-NEXT:            %670 = arith.index_cast %669 : i64 to index
//CHECK-NEXT:            %671 = arith.constant 1 : index
//CHECK-NEXT:            %672 = arith.subi %670, %671 : index
//CHECK-NEXT:            %673 = memref.load %4[%672, %667, %660] : memref<?x?x?xf64>
//CHECK-NEXT:            %674 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %675 = arith.extui %674 : i32 to i64
//CHECK-NEXT:            %676 = arith.index_cast %675 : i64 to index
//CHECK-NEXT:            %677 = arith.constant 1 : index
//CHECK-NEXT:            %678 = arith.subi %676, %677 : index
//CHECK-NEXT:            %679 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %680 = arith.extui %679 : i32 to i64
//CHECK-NEXT:            %681 = arith.index_cast %680 : i64 to index
//CHECK-NEXT:            %682 = arith.constant 1 : index
//CHECK-NEXT:            %683 = arith.subi %681, %682 : index
//CHECK-NEXT:            %684 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %685 = arith.extui %684 : i32 to i64
//CHECK-NEXT:            %686 = arith.index_cast %685 : i64 to index
//CHECK-NEXT:            %687 = arith.constant 1 : index
//CHECK-NEXT:            %688 = arith.subi %686, %687 : index
//CHECK-NEXT:            %689 = memref.load %4[%688, %683, %678] : memref<?x?x?xf64>
//CHECK-NEXT:            %690 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %691 = arith.extui %690 : i32 to i64
//CHECK-NEXT:            %692 = arith.index_cast %691 : i64 to index
//CHECK-NEXT:            %693 = arith.constant 1 : index
//CHECK-NEXT:            %694 = arith.subi %692, %693 : index
//CHECK-NEXT:            %695 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %696 = arith.constant 1 : i32
//CHECK-NEXT:            %697 = arith.subi %695, %696 : i32
//CHECK-NEXT:            %698 = arith.extui %697 : i32 to i64
//CHECK-NEXT:            %699 = arith.index_cast %698 : i64 to index
//CHECK-NEXT:            %700 = arith.constant 1 : index
//CHECK-NEXT:            %701 = arith.subi %699, %700 : index
//CHECK-NEXT:            %702 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %703 = arith.extui %702 : i32 to i64
//CHECK-NEXT:            %704 = arith.index_cast %703 : i64 to index
//CHECK-NEXT:            %705 = arith.constant 1 : index
//CHECK-NEXT:            %706 = arith.subi %704, %705 : index
//CHECK-NEXT:            %707 = memref.load %4[%706, %701, %694] : memref<?x?x?xf64>
//CHECK-NEXT:            %708 = arith.addf %689, %707 fastmath<contract> : f64
//CHECK-NEXT:            %709 = arith.mulf %673, %708 fastmath<contract> : f64
//CHECK-NEXT:            %710 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %711 = arith.extui %710 : i32 to i64
//CHECK-NEXT:            %712 = arith.index_cast %711 : i64 to index
//CHECK-NEXT:            %713 = arith.constant 1 : index
//CHECK-NEXT:            %714 = arith.subi %712, %713 : index
//CHECK-NEXT:            %715 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %716 = arith.constant 1 : i32
//CHECK-NEXT:            %717 = arith.addi %715, %716 : i32
//CHECK-NEXT:            %718 = arith.extui %717 : i32 to i64
//CHECK-NEXT:            %719 = arith.index_cast %718 : i64 to index
//CHECK-NEXT:            %720 = arith.constant 1 : index
//CHECK-NEXT:            %721 = arith.subi %719, %720 : index
//CHECK-NEXT:            %722 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %723 = arith.extui %722 : i32 to i64
//CHECK-NEXT:            %724 = arith.index_cast %723 : i64 to index
//CHECK-NEXT:            %725 = arith.constant 1 : index
//CHECK-NEXT:            %726 = arith.subi %724, %725 : index
//CHECK-NEXT:            %727 = memref.load %4[%726, %721, %714] : memref<?x?x?xf64>
//CHECK-NEXT:            %728 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %729 = arith.extui %728 : i32 to i64
//CHECK-NEXT:            %730 = arith.index_cast %729 : i64 to index
//CHECK-NEXT:            %731 = arith.constant 1 : index
//CHECK-NEXT:            %732 = arith.subi %730, %731 : index
//CHECK-NEXT:            %733 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %734 = arith.extui %733 : i32 to i64
//CHECK-NEXT:            %735 = arith.index_cast %734 : i64 to index
//CHECK-NEXT:            %736 = arith.constant 1 : index
//CHECK-NEXT:            %737 = arith.subi %735, %736 : index
//CHECK-NEXT:            %738 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %739 = arith.extui %738 : i32 to i64
//CHECK-NEXT:            %740 = arith.index_cast %739 : i64 to index
//CHECK-NEXT:            %741 = arith.constant 1 : index
//CHECK-NEXT:            %742 = arith.subi %740, %741 : index
//CHECK-NEXT:            %743 = memref.load %4[%742, %737, %732] : memref<?x?x?xf64>
//CHECK-NEXT:            %744 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %745 = arith.extui %744 : i32 to i64
//CHECK-NEXT:            %746 = arith.index_cast %745 : i64 to index
//CHECK-NEXT:            %747 = arith.constant 1 : index
//CHECK-NEXT:            %748 = arith.subi %746, %747 : index
//CHECK-NEXT:            %749 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %750 = arith.constant 1 : i32
//CHECK-NEXT:            %751 = arith.addi %749, %750 : i32
//CHECK-NEXT:            %752 = arith.extui %751 : i32 to i64
//CHECK-NEXT:            %753 = arith.index_cast %752 : i64 to index
//CHECK-NEXT:            %754 = arith.constant 1 : index
//CHECK-NEXT:            %755 = arith.subi %753, %754 : index
//CHECK-NEXT:            %756 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %757 = arith.extui %756 : i32 to i64
//CHECK-NEXT:            %758 = arith.index_cast %757 : i64 to index
//CHECK-NEXT:            %759 = arith.constant 1 : index
//CHECK-NEXT:            %760 = arith.subi %758, %759 : index
//CHECK-NEXT:            %761 = memref.load %4[%760, %755, %748] : memref<?x?x?xf64>
//CHECK-NEXT:            %762 = arith.addf %743, %761 fastmath<contract> : f64
//CHECK-NEXT:            %763 = arith.mulf %727, %762 fastmath<contract> : f64
//CHECK-NEXT:            %764 = arith.subf %709, %763 fastmath<contract> : f64
//CHECK-NEXT:            %765 = arith.mulf %655, %764 fastmath<contract> : f64
//CHECK-NEXT:            %766 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:            %767 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %768 = arith.extui %767 : i32 to i64
//CHECK-NEXT:            %769 = arith.index_cast %768 : i64 to index
//CHECK-NEXT:            %770 = arith.constant 1 : index
//CHECK-NEXT:            %771 = arith.subi %769, %770 : index
//CHECK-NEXT:            %772 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %773 = arith.extui %772 : i32 to i64
//CHECK-NEXT:            %774 = arith.index_cast %773 : i64 to index
//CHECK-NEXT:            %775 = arith.constant 1 : index
//CHECK-NEXT:            %776 = arith.subi %774, %775 : index
//CHECK-NEXT:            %777 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %778 = arith.constant 1 : i32
//CHECK-NEXT:            %779 = arith.subi %777, %778 : i32
//CHECK-NEXT:            %780 = arith.extui %779 : i32 to i64
//CHECK-NEXT:            %781 = arith.index_cast %780 : i64 to index
//CHECK-NEXT:            %782 = arith.constant 1 : index
//CHECK-NEXT:            %783 = arith.subi %781, %782 : index
//CHECK-NEXT:            %784 = memref.load %4[%783, %776, %771] : memref<?x?x?xf64>
//CHECK-NEXT:            %785 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %786 = arith.extui %785 : i32 to i64
//CHECK-NEXT:            %787 = arith.index_cast %786 : i64 to index
//CHECK-NEXT:            %788 = arith.constant 1 : index
//CHECK-NEXT:            %789 = arith.subi %787, %788 : index
//CHECK-NEXT:            %790 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %791 = arith.extui %790 : i32 to i64
//CHECK-NEXT:            %792 = arith.index_cast %791 : i64 to index
//CHECK-NEXT:            %793 = arith.constant 1 : index
//CHECK-NEXT:            %794 = arith.subi %792, %793 : index
//CHECK-NEXT:            %795 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %796 = arith.constant 1 : i32
//CHECK-NEXT:            %797 = arith.subi %795, %796 : i32
//CHECK-NEXT:            %798 = arith.extui %797 : i32 to i64
//CHECK-NEXT:            %799 = arith.index_cast %798 : i64 to index
//CHECK-NEXT:            %800 = arith.constant 1 : index
//CHECK-NEXT:            %801 = arith.subi %799, %800 : index
//CHECK-NEXT:            %802 = memref.load %3[%801, %794, %789] : memref<?x?x?xf64>
//CHECK-NEXT:            %803 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %804 = arith.extui %803 : i32 to i64
//CHECK-NEXT:            %805 = arith.index_cast %804 : i64 to index
//CHECK-NEXT:            %806 = arith.constant 1 : index
//CHECK-NEXT:            %807 = arith.subi %805, %806 : index
//CHECK-NEXT:            %808 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %809 = arith.constant 1 : i32
//CHECK-NEXT:            %810 = arith.addi %808, %809 : i32
//CHECK-NEXT:            %811 = arith.extui %810 : i32 to i64
//CHECK-NEXT:            %812 = arith.index_cast %811 : i64 to index
//CHECK-NEXT:            %813 = arith.constant 1 : index
//CHECK-NEXT:            %814 = arith.subi %812, %813 : index
//CHECK-NEXT:            %815 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %816 = arith.constant 1 : i32
//CHECK-NEXT:            %817 = arith.subi %815, %816 : i32
//CHECK-NEXT:            %818 = arith.extui %817 : i32 to i64
//CHECK-NEXT:            %819 = arith.index_cast %818 : i64 to index
//CHECK-NEXT:            %820 = arith.constant 1 : index
//CHECK-NEXT:            %821 = arith.subi %819, %820 : index
//CHECK-NEXT:            %822 = memref.load %3[%821, %814, %807] : memref<?x?x?xf64>
//CHECK-NEXT:            %823 = arith.addf %802, %822 fastmath<contract> : f64
//CHECK-NEXT:            %824 = arith.mulf %784, %823 fastmath<contract> : f64
//CHECK-NEXT:            %825 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %826 = arith.extui %825 : i32 to i64
//CHECK-NEXT:            %827 = arith.index_cast %826 : i64 to index
//CHECK-NEXT:            %828 = arith.constant 1 : index
//CHECK-NEXT:            %829 = arith.subi %827, %828 : index
//CHECK-NEXT:            %830 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %831 = arith.extui %830 : i32 to i64
//CHECK-NEXT:            %832 = arith.index_cast %831 : i64 to index
//CHECK-NEXT:            %833 = arith.constant 1 : index
//CHECK-NEXT:            %834 = arith.subi %832, %833 : index
//CHECK-NEXT:            %835 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %836 = arith.constant 1 : i32
//CHECK-NEXT:            %837 = arith.addi %835, %836 : i32
//CHECK-NEXT:            %838 = arith.extui %837 : i32 to i64
//CHECK-NEXT:            %839 = arith.index_cast %838 : i64 to index
//CHECK-NEXT:            %840 = arith.constant 1 : index
//CHECK-NEXT:            %841 = arith.subi %839, %840 : index
//CHECK-NEXT:            %842 = memref.load %4[%841, %834, %829] : memref<?x?x?xf64>
//CHECK-NEXT:            %843 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %844 = arith.extui %843 : i32 to i64
//CHECK-NEXT:            %845 = arith.index_cast %844 : i64 to index
//CHECK-NEXT:            %846 = arith.constant 1 : index
//CHECK-NEXT:            %847 = arith.subi %845, %846 : index
//CHECK-NEXT:            %848 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %849 = arith.extui %848 : i32 to i64
//CHECK-NEXT:            %850 = arith.index_cast %849 : i64 to index
//CHECK-NEXT:            %851 = arith.constant 1 : index
//CHECK-NEXT:            %852 = arith.subi %850, %851 : index
//CHECK-NEXT:            %853 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %854 = arith.extui %853 : i32 to i64
//CHECK-NEXT:            %855 = arith.index_cast %854 : i64 to index
//CHECK-NEXT:            %856 = arith.constant 1 : index
//CHECK-NEXT:            %857 = arith.subi %855, %856 : index
//CHECK-NEXT:            %858 = memref.load %3[%857, %852, %847] : memref<?x?x?xf64>
//CHECK-NEXT:            %859 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %860 = arith.extui %859 : i32 to i64
//CHECK-NEXT:            %861 = arith.index_cast %860 : i64 to index
//CHECK-NEXT:            %862 = arith.constant 1 : index
//CHECK-NEXT:            %863 = arith.subi %861, %862 : index
//CHECK-NEXT:            %864 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %865 = arith.constant 1 : i32
//CHECK-NEXT:            %866 = arith.addi %864, %865 : i32
//CHECK-NEXT:            %867 = arith.extui %866 : i32 to i64
//CHECK-NEXT:            %868 = arith.index_cast %867 : i64 to index
//CHECK-NEXT:            %869 = arith.constant 1 : index
//CHECK-NEXT:            %870 = arith.subi %868, %869 : index
//CHECK-NEXT:            %871 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %872 = arith.extui %871 : i32 to i64
//CHECK-NEXT:            %873 = arith.index_cast %872 : i64 to index
//CHECK-NEXT:            %874 = arith.constant 1 : index
//CHECK-NEXT:            %875 = arith.subi %873, %874 : index
//CHECK-NEXT:            %876 = memref.load %3[%875, %870, %863] : memref<?x?x?xf64>
//CHECK-NEXT:            %877 = arith.addf %858, %876 fastmath<contract> : f64
//CHECK-NEXT:            %878 = arith.mulf %842, %877 fastmath<contract> : f64
//CHECK-NEXT:            %879 = arith.subf %824, %878 fastmath<contract> : f64
//CHECK-NEXT:            %880 = arith.mulf %766, %879 fastmath<contract> : f64
//CHECK-NEXT:            %881 = arith.addf %765, %880 fastmath<contract> : f64
//CHECK-NEXT:            %882 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %883 = arith.extui %882 : i32 to i64
//CHECK-NEXT:            %884 = arith.index_cast %883 : i64 to index
//CHECK-NEXT:            %885 = arith.constant 1 : index
//CHECK-NEXT:            %886 = arith.subi %884, %885 : index
//CHECK-NEXT:            %887 = memref.load %6[%886] : memref<?xf64>
//CHECK-NEXT:            %888 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %889 = arith.constant 1 : i32
//CHECK-NEXT:            %890 = arith.subi %888, %889 : i32
//CHECK-NEXT:            %891 = arith.extui %890 : i32 to i64
//CHECK-NEXT:            %892 = arith.index_cast %891 : i64 to index
//CHECK-NEXT:            %893 = arith.constant 1 : index
//CHECK-NEXT:            %894 = arith.subi %892, %893 : index
//CHECK-NEXT:            %895 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %896 = arith.extui %895 : i32 to i64
//CHECK-NEXT:            %897 = arith.index_cast %896 : i64 to index
//CHECK-NEXT:            %898 = arith.constant 1 : index
//CHECK-NEXT:            %899 = arith.subi %897, %898 : index
//CHECK-NEXT:            %900 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %901 = arith.extui %900 : i32 to i64
//CHECK-NEXT:            %902 = arith.index_cast %901 : i64 to index
//CHECK-NEXT:            %903 = arith.constant 1 : index
//CHECK-NEXT:            %904 = arith.subi %902, %903 : index
//CHECK-NEXT:            %905 = memref.load %4[%904, %899, %894] : memref<?x?x?xf64>
//CHECK-NEXT:            %906 = arith.mulf %887, %905 fastmath<contract> : f64
//CHECK-NEXT:            %907 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %908 = arith.constant 1 : i32
//CHECK-NEXT:            %909 = arith.subi %907, %908 : i32
//CHECK-NEXT:            %910 = arith.extui %909 : i32 to i64
//CHECK-NEXT:            %911 = arith.index_cast %910 : i64 to index
//CHECK-NEXT:            %912 = arith.constant 1 : index
//CHECK-NEXT:            %913 = arith.subi %911, %912 : index
//CHECK-NEXT:            %914 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %915 = arith.extui %914 : i32 to i64
//CHECK-NEXT:            %916 = arith.index_cast %915 : i64 to index
//CHECK-NEXT:            %917 = arith.constant 1 : index
//CHECK-NEXT:            %918 = arith.subi %916, %917 : index
//CHECK-NEXT:            %919 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %920 = arith.extui %919 : i32 to i64
//CHECK-NEXT:            %921 = arith.index_cast %920 : i64 to index
//CHECK-NEXT:            %922 = arith.constant 1 : index
//CHECK-NEXT:            %923 = arith.subi %921, %922 : index
//CHECK-NEXT:            %924 = memref.load %5[%923, %918, %913] : memref<?x?x?xf64>
//CHECK-NEXT:            %925 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %926 = arith.constant 1 : i32
//CHECK-NEXT:            %927 = arith.subi %925, %926 : i32
//CHECK-NEXT:            %928 = arith.extui %927 : i32 to i64
//CHECK-NEXT:            %929 = arith.index_cast %928 : i64 to index
//CHECK-NEXT:            %930 = arith.constant 1 : index
//CHECK-NEXT:            %931 = arith.subi %929, %930 : index
//CHECK-NEXT:            %932 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %933 = arith.constant 1 : i32
//CHECK-NEXT:            %934 = arith.addi %932, %933 : i32
//CHECK-NEXT:            %935 = arith.extui %934 : i32 to i64
//CHECK-NEXT:            %936 = arith.index_cast %935 : i64 to index
//CHECK-NEXT:            %937 = arith.constant 1 : index
//CHECK-NEXT:            %938 = arith.subi %936, %937 : index
//CHECK-NEXT:            %939 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %940 = arith.extui %939 : i32 to i64
//CHECK-NEXT:            %941 = arith.index_cast %940 : i64 to index
//CHECK-NEXT:            %942 = arith.constant 1 : index
//CHECK-NEXT:            %943 = arith.subi %941, %942 : index
//CHECK-NEXT:            %944 = memref.load %5[%943, %938, %931] : memref<?x?x?xf64>
//CHECK-NEXT:            %945 = arith.addf %924, %944 fastmath<contract> : f64
//CHECK-NEXT:            %946 = arith.mulf %906, %945 fastmath<contract> : f64
//CHECK-NEXT:            %947 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %948 = arith.extui %947 : i32 to i64
//CHECK-NEXT:            %949 = arith.index_cast %948 : i64 to index
//CHECK-NEXT:            %950 = arith.constant 1 : index
//CHECK-NEXT:            %951 = arith.subi %949, %950 : index
//CHECK-NEXT:            %952 = memref.load %7[%951] : memref<?xf64>
//CHECK-NEXT:            %953 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %954 = arith.constant 1 : i32
//CHECK-NEXT:            %955 = arith.addi %953, %954 : i32
//CHECK-NEXT:            %956 = arith.extui %955 : i32 to i64
//CHECK-NEXT:            %957 = arith.index_cast %956 : i64 to index
//CHECK-NEXT:            %958 = arith.constant 1 : index
//CHECK-NEXT:            %959 = arith.subi %957, %958 : index
//CHECK-NEXT:            %960 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %961 = arith.extui %960 : i32 to i64
//CHECK-NEXT:            %962 = arith.index_cast %961 : i64 to index
//CHECK-NEXT:            %963 = arith.constant 1 : index
//CHECK-NEXT:            %964 = arith.subi %962, %963 : index
//CHECK-NEXT:            %965 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %966 = arith.extui %965 : i32 to i64
//CHECK-NEXT:            %967 = arith.index_cast %966 : i64 to index
//CHECK-NEXT:            %968 = arith.constant 1 : index
//CHECK-NEXT:            %969 = arith.subi %967, %968 : index
//CHECK-NEXT:            %970 = memref.load %4[%969, %964, %959] : memref<?x?x?xf64>
//CHECK-NEXT:            %971 = arith.mulf %952, %970 fastmath<contract> : f64
//CHECK-NEXT:            %972 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %973 = arith.extui %972 : i32 to i64
//CHECK-NEXT:            %974 = arith.index_cast %973 : i64 to index
//CHECK-NEXT:            %975 = arith.constant 1 : index
//CHECK-NEXT:            %976 = arith.subi %974, %975 : index
//CHECK-NEXT:            %977 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %978 = arith.extui %977 : i32 to i64
//CHECK-NEXT:            %979 = arith.index_cast %978 : i64 to index
//CHECK-NEXT:            %980 = arith.constant 1 : index
//CHECK-NEXT:            %981 = arith.subi %979, %980 : index
//CHECK-NEXT:            %982 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %983 = arith.extui %982 : i32 to i64
//CHECK-NEXT:            %984 = arith.index_cast %983 : i64 to index
//CHECK-NEXT:            %985 = arith.constant 1 : index
//CHECK-NEXT:            %986 = arith.subi %984, %985 : index
//CHECK-NEXT:            %987 = memref.load %5[%986, %981, %976] : memref<?x?x?xf64>
//CHECK-NEXT:            %988 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %989 = arith.extui %988 : i32 to i64
//CHECK-NEXT:            %990 = arith.index_cast %989 : i64 to index
//CHECK-NEXT:            %991 = arith.constant 1 : index
//CHECK-NEXT:            %992 = arith.subi %990, %991 : index
//CHECK-NEXT:            %993 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %994 = arith.constant 1 : i32
//CHECK-NEXT:            %995 = arith.addi %993, %994 : i32
//CHECK-NEXT:            %996 = arith.extui %995 : i32 to i64
//CHECK-NEXT:            %997 = arith.index_cast %996 : i64 to index
//CHECK-NEXT:            %998 = arith.constant 1 : index
//CHECK-NEXT:            %999 = arith.subi %997, %998 : index
//CHECK-NEXT:            %1000 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1001 = arith.extui %1000 : i32 to i64
//CHECK-NEXT:            %1002 = arith.index_cast %1001 : i64 to index
//CHECK-NEXT:            %1003 = arith.constant 1 : index
//CHECK-NEXT:            %1004 = arith.subi %1002, %1003 : index
//CHECK-NEXT:            %1005 = memref.load %5[%1004, %999, %992] : memref<?x?x?xf64>
//CHECK-NEXT:            %1006 = arith.addf %987, %1005 fastmath<contract> : f64
//CHECK-NEXT:            %1007 = arith.mulf %971, %1006 fastmath<contract> : f64
//CHECK-NEXT:            %1008 = arith.subf %946, %1007 fastmath<contract> : f64
//CHECK-NEXT:            %1009 = arith.addf %881, %1008 fastmath<contract> : f64
//CHECK-NEXT:            %1010 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1011 = arith.extui %1010 : i32 to i64
//CHECK-NEXT:            %1012 = arith.index_cast %1011 : i64 to index
//CHECK-NEXT:            %1013 = arith.constant 1 : index
//CHECK-NEXT:            %1014 = arith.subi %1012, %1013 : index
//CHECK-NEXT:            %1015 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1016 = arith.extui %1015 : i32 to i64
//CHECK-NEXT:            %1017 = arith.index_cast %1016 : i64 to index
//CHECK-NEXT:            %1018 = arith.constant 1 : index
//CHECK-NEXT:            %1019 = arith.subi %1017, %1018 : index
//CHECK-NEXT:            %1020 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1021 = arith.extui %1020 : i32 to i64
//CHECK-NEXT:            %1022 = arith.index_cast %1021 : i64 to index
//CHECK-NEXT:            %1023 = arith.constant 1 : index
//CHECK-NEXT:            %1024 = arith.subi %1022, %1023 : index
//CHECK-NEXT:            memref.store %1009, %1[%1024, %1019, %1014] : memref<?x?x?xf64>
//CHECK-NEXT:            %1025 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1026 = arith.extui %1025 : i32 to i64
//CHECK-NEXT:            %1027 = arith.index_cast %1026 : i64 to index
//CHECK-NEXT:            %1028 = arith.constant 1 : index
//CHECK-NEXT:            %1029 = arith.subi %1027, %1028 : index
//CHECK-NEXT:            %1030 = memref.load %8[%1029] : memref<?xf64>
//CHECK-NEXT:            %1031 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1032 = arith.constant 1 : i32
//CHECK-NEXT:            %1033 = arith.subi %1031, %1032 : i32
//CHECK-NEXT:            %1034 = arith.extui %1033 : i32 to i64
//CHECK-NEXT:            %1035 = arith.index_cast %1034 : i64 to index
//CHECK-NEXT:            %1036 = arith.constant 1 : index
//CHECK-NEXT:            %1037 = arith.subi %1035, %1036 : index
//CHECK-NEXT:            %1038 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1039 = arith.extui %1038 : i32 to i64
//CHECK-NEXT:            %1040 = arith.index_cast %1039 : i64 to index
//CHECK-NEXT:            %1041 = arith.constant 1 : index
//CHECK-NEXT:            %1042 = arith.subi %1040, %1041 : index
//CHECK-NEXT:            %1043 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1044 = arith.extui %1043 : i32 to i64
//CHECK-NEXT:            %1045 = arith.index_cast %1044 : i64 to index
//CHECK-NEXT:            %1046 = arith.constant 1 : index
//CHECK-NEXT:            %1047 = arith.subi %1045, %1046 : index
//CHECK-NEXT:            %1048 = memref.load %5[%1047, %1042, %1037] : memref<?x?x?xf64>
//CHECK-NEXT:            %1049 = arith.mulf %1030, %1048 fastmath<contract> : f64
//CHECK-NEXT:            %1050 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1051 = arith.extui %1050 : i32 to i64
//CHECK-NEXT:            %1052 = arith.index_cast %1051 : i64 to index
//CHECK-NEXT:            %1053 = arith.constant 1 : index
//CHECK-NEXT:            %1054 = arith.subi %1052, %1053 : index
//CHECK-NEXT:            %1055 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1056 = arith.extui %1055 : i32 to i64
//CHECK-NEXT:            %1057 = arith.index_cast %1056 : i64 to index
//CHECK-NEXT:            %1058 = arith.constant 1 : index
//CHECK-NEXT:            %1059 = arith.subi %1057, %1058 : index
//CHECK-NEXT:            %1060 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1061 = arith.extui %1060 : i32 to i64
//CHECK-NEXT:            %1062 = arith.index_cast %1061 : i64 to index
//CHECK-NEXT:            %1063 = arith.constant 1 : index
//CHECK-NEXT:            %1064 = arith.subi %1062, %1063 : index
//CHECK-NEXT:            %1065 = memref.load %5[%1064, %1059, %1054] : memref<?x?x?xf64>
//CHECK-NEXT:            %1066 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1067 = arith.constant 1 : i32
//CHECK-NEXT:            %1068 = arith.subi %1066, %1067 : i32
//CHECK-NEXT:            %1069 = arith.extui %1068 : i32 to i64
//CHECK-NEXT:            %1070 = arith.index_cast %1069 : i64 to index
//CHECK-NEXT:            %1071 = arith.constant 1 : index
//CHECK-NEXT:            %1072 = arith.subi %1070, %1071 : index
//CHECK-NEXT:            %1073 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1074 = arith.extui %1073 : i32 to i64
//CHECK-NEXT:            %1075 = arith.index_cast %1074 : i64 to index
//CHECK-NEXT:            %1076 = arith.constant 1 : index
//CHECK-NEXT:            %1077 = arith.subi %1075, %1076 : index
//CHECK-NEXT:            %1078 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1079 = arith.extui %1078 : i32 to i64
//CHECK-NEXT:            %1080 = arith.index_cast %1079 : i64 to index
//CHECK-NEXT:            %1081 = arith.constant 1 : index
//CHECK-NEXT:            %1082 = arith.subi %1080, %1081 : index
//CHECK-NEXT:            %1083 = memref.load %5[%1082, %1077, %1072] : memref<?x?x?xf64>
//CHECK-NEXT:            %1084 = arith.addf %1065, %1083 fastmath<contract> : f64
//CHECK-NEXT:            %1085 = arith.mulf %1049, %1084 fastmath<contract> : f64
//CHECK-NEXT:            %1086 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1087 = arith.extui %1086 : i32 to i64
//CHECK-NEXT:            %1088 = arith.index_cast %1087 : i64 to index
//CHECK-NEXT:            %1089 = arith.constant 1 : index
//CHECK-NEXT:            %1090 = arith.subi %1088, %1089 : index
//CHECK-NEXT:            %1091 = memref.load %9[%1090] : memref<?xf64>
//CHECK-NEXT:            %1092 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1093 = arith.constant 1 : i32
//CHECK-NEXT:            %1094 = arith.addi %1092, %1093 : i32
//CHECK-NEXT:            %1095 = arith.extui %1094 : i32 to i64
//CHECK-NEXT:            %1096 = arith.index_cast %1095 : i64 to index
//CHECK-NEXT:            %1097 = arith.constant 1 : index
//CHECK-NEXT:            %1098 = arith.subi %1096, %1097 : index
//CHECK-NEXT:            %1099 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1100 = arith.extui %1099 : i32 to i64
//CHECK-NEXT:            %1101 = arith.index_cast %1100 : i64 to index
//CHECK-NEXT:            %1102 = arith.constant 1 : index
//CHECK-NEXT:            %1103 = arith.subi %1101, %1102 : index
//CHECK-NEXT:            %1104 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1105 = arith.extui %1104 : i32 to i64
//CHECK-NEXT:            %1106 = arith.index_cast %1105 : i64 to index
//CHECK-NEXT:            %1107 = arith.constant 1 : index
//CHECK-NEXT:            %1108 = arith.subi %1106, %1107 : index
//CHECK-NEXT:            %1109 = memref.load %5[%1108, %1103, %1098] : memref<?x?x?xf64>
//CHECK-NEXT:            %1110 = arith.mulf %1091, %1109 fastmath<contract> : f64
//CHECK-NEXT:            %1111 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1112 = arith.extui %1111 : i32 to i64
//CHECK-NEXT:            %1113 = arith.index_cast %1112 : i64 to index
//CHECK-NEXT:            %1114 = arith.constant 1 : index
//CHECK-NEXT:            %1115 = arith.subi %1113, %1114 : index
//CHECK-NEXT:            %1116 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1117 = arith.extui %1116 : i32 to i64
//CHECK-NEXT:            %1118 = arith.index_cast %1117 : i64 to index
//CHECK-NEXT:            %1119 = arith.constant 1 : index
//CHECK-NEXT:            %1120 = arith.subi %1118, %1119 : index
//CHECK-NEXT:            %1121 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1122 = arith.extui %1121 : i32 to i64
//CHECK-NEXT:            %1123 = arith.index_cast %1122 : i64 to index
//CHECK-NEXT:            %1124 = arith.constant 1 : index
//CHECK-NEXT:            %1125 = arith.subi %1123, %1124 : index
//CHECK-NEXT:            %1126 = memref.load %5[%1125, %1120, %1115] : memref<?x?x?xf64>
//CHECK-NEXT:            %1127 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1128 = arith.constant 1 : i32
//CHECK-NEXT:            %1129 = arith.addi %1127, %1128 : i32
//CHECK-NEXT:            %1130 = arith.extui %1129 : i32 to i64
//CHECK-NEXT:            %1131 = arith.index_cast %1130 : i64 to index
//CHECK-NEXT:            %1132 = arith.constant 1 : index
//CHECK-NEXT:            %1133 = arith.subi %1131, %1132 : index
//CHECK-NEXT:            %1134 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1135 = arith.extui %1134 : i32 to i64
//CHECK-NEXT:            %1136 = arith.index_cast %1135 : i64 to index
//CHECK-NEXT:            %1137 = arith.constant 1 : index
//CHECK-NEXT:            %1138 = arith.subi %1136, %1137 : index
//CHECK-NEXT:            %1139 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1140 = arith.extui %1139 : i32 to i64
//CHECK-NEXT:            %1141 = arith.index_cast %1140 : i64 to index
//CHECK-NEXT:            %1142 = arith.constant 1 : index
//CHECK-NEXT:            %1143 = arith.subi %1141, %1142 : index
//CHECK-NEXT:            %1144 = memref.load %5[%1143, %1138, %1133] : memref<?x?x?xf64>
//CHECK-NEXT:            %1145 = arith.addf %1126, %1144 fastmath<contract> : f64
//CHECK-NEXT:            %1146 = arith.mulf %1110, %1145 fastmath<contract> : f64
//CHECK-NEXT:            %1147 = arith.subf %1085, %1146 fastmath<contract> : f64
//CHECK-NEXT:            %1148 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:            %1149 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1150 = arith.extui %1149 : i32 to i64
//CHECK-NEXT:            %1151 = arith.index_cast %1150 : i64 to index
//CHECK-NEXT:            %1152 = arith.constant 1 : index
//CHECK-NEXT:            %1153 = arith.subi %1151, %1152 : index
//CHECK-NEXT:            %1154 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1155 = arith.extui %1154 : i32 to i64
//CHECK-NEXT:            %1156 = arith.index_cast %1155 : i64 to index
//CHECK-NEXT:            %1157 = arith.constant 1 : index
//CHECK-NEXT:            %1158 = arith.subi %1156, %1157 : index
//CHECK-NEXT:            %1159 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1160 = arith.constant 1 : i32
//CHECK-NEXT:            %1161 = arith.subi %1159, %1160 : i32
//CHECK-NEXT:            %1162 = arith.extui %1161 : i32 to i64
//CHECK-NEXT:            %1163 = arith.index_cast %1162 : i64 to index
//CHECK-NEXT:            %1164 = arith.constant 1 : index
//CHECK-NEXT:            %1165 = arith.subi %1163, %1164 : index
//CHECK-NEXT:            %1166 = memref.load %5[%1165, %1158, %1153] : memref<?x?x?xf64>
//CHECK-NEXT:            %1167 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1168 = arith.extui %1167 : i32 to i64
//CHECK-NEXT:            %1169 = arith.index_cast %1168 : i64 to index
//CHECK-NEXT:            %1170 = arith.constant 1 : index
//CHECK-NEXT:            %1171 = arith.subi %1169, %1170 : index
//CHECK-NEXT:            %1172 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1173 = arith.extui %1172 : i32 to i64
//CHECK-NEXT:            %1174 = arith.index_cast %1173 : i64 to index
//CHECK-NEXT:            %1175 = arith.constant 1 : index
//CHECK-NEXT:            %1176 = arith.subi %1174, %1175 : index
//CHECK-NEXT:            %1177 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1178 = arith.constant 1 : i32
//CHECK-NEXT:            %1179 = arith.subi %1177, %1178 : i32
//CHECK-NEXT:            %1180 = arith.extui %1179 : i32 to i64
//CHECK-NEXT:            %1181 = arith.index_cast %1180 : i64 to index
//CHECK-NEXT:            %1182 = arith.constant 1 : index
//CHECK-NEXT:            %1183 = arith.subi %1181, %1182 : index
//CHECK-NEXT:            %1184 = memref.load %3[%1183, %1176, %1171] : memref<?x?x?xf64>
//CHECK-NEXT:            %1185 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1186 = arith.constant 1 : i32
//CHECK-NEXT:            %1187 = arith.addi %1185, %1186 : i32
//CHECK-NEXT:            %1188 = arith.extui %1187 : i32 to i64
//CHECK-NEXT:            %1189 = arith.index_cast %1188 : i64 to index
//CHECK-NEXT:            %1190 = arith.constant 1 : index
//CHECK-NEXT:            %1191 = arith.subi %1189, %1190 : index
//CHECK-NEXT:            %1192 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1193 = arith.extui %1192 : i32 to i64
//CHECK-NEXT:            %1194 = arith.index_cast %1193 : i64 to index
//CHECK-NEXT:            %1195 = arith.constant 1 : index
//CHECK-NEXT:            %1196 = arith.subi %1194, %1195 : index
//CHECK-NEXT:            %1197 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1198 = arith.constant 1 : i32
//CHECK-NEXT:            %1199 = arith.subi %1197, %1198 : i32
//CHECK-NEXT:            %1200 = arith.extui %1199 : i32 to i64
//CHECK-NEXT:            %1201 = arith.index_cast %1200 : i64 to index
//CHECK-NEXT:            %1202 = arith.constant 1 : index
//CHECK-NEXT:            %1203 = arith.subi %1201, %1202 : index
//CHECK-NEXT:            %1204 = memref.load %3[%1203, %1196, %1191] : memref<?x?x?xf64>
//CHECK-NEXT:            %1205 = arith.addf %1184, %1204 fastmath<contract> : f64
//CHECK-NEXT:            %1206 = arith.mulf %1166, %1205 fastmath<contract> : f64
//CHECK-NEXT:            %1207 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1208 = arith.extui %1207 : i32 to i64
//CHECK-NEXT:            %1209 = arith.index_cast %1208 : i64 to index
//CHECK-NEXT:            %1210 = arith.constant 1 : index
//CHECK-NEXT:            %1211 = arith.subi %1209, %1210 : index
//CHECK-NEXT:            %1212 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1213 = arith.extui %1212 : i32 to i64
//CHECK-NEXT:            %1214 = arith.index_cast %1213 : i64 to index
//CHECK-NEXT:            %1215 = arith.constant 1 : index
//CHECK-NEXT:            %1216 = arith.subi %1214, %1215 : index
//CHECK-NEXT:            %1217 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1218 = arith.constant 1 : i32
//CHECK-NEXT:            %1219 = arith.addi %1217, %1218 : i32
//CHECK-NEXT:            %1220 = arith.extui %1219 : i32 to i64
//CHECK-NEXT:            %1221 = arith.index_cast %1220 : i64 to index
//CHECK-NEXT:            %1222 = arith.constant 1 : index
//CHECK-NEXT:            %1223 = arith.subi %1221, %1222 : index
//CHECK-NEXT:            %1224 = memref.load %5[%1223, %1216, %1211] : memref<?x?x?xf64>
//CHECK-NEXT:            %1225 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1226 = arith.extui %1225 : i32 to i64
//CHECK-NEXT:            %1227 = arith.index_cast %1226 : i64 to index
//CHECK-NEXT:            %1228 = arith.constant 1 : index
//CHECK-NEXT:            %1229 = arith.subi %1227, %1228 : index
//CHECK-NEXT:            %1230 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1231 = arith.extui %1230 : i32 to i64
//CHECK-NEXT:            %1232 = arith.index_cast %1231 : i64 to index
//CHECK-NEXT:            %1233 = arith.constant 1 : index
//CHECK-NEXT:            %1234 = arith.subi %1232, %1233 : index
//CHECK-NEXT:            %1235 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1236 = arith.extui %1235 : i32 to i64
//CHECK-NEXT:            %1237 = arith.index_cast %1236 : i64 to index
//CHECK-NEXT:            %1238 = arith.constant 1 : index
//CHECK-NEXT:            %1239 = arith.subi %1237, %1238 : index
//CHECK-NEXT:            %1240 = memref.load %3[%1239, %1234, %1229] : memref<?x?x?xf64>
//CHECK-NEXT:            %1241 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1242 = arith.constant 1 : i32
//CHECK-NEXT:            %1243 = arith.addi %1241, %1242 : i32
//CHECK-NEXT:            %1244 = arith.extui %1243 : i32 to i64
//CHECK-NEXT:            %1245 = arith.index_cast %1244 : i64 to index
//CHECK-NEXT:            %1246 = arith.constant 1 : index
//CHECK-NEXT:            %1247 = arith.subi %1245, %1246 : index
//CHECK-NEXT:            %1248 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1249 = arith.extui %1248 : i32 to i64
//CHECK-NEXT:            %1250 = arith.index_cast %1249 : i64 to index
//CHECK-NEXT:            %1251 = arith.constant 1 : index
//CHECK-NEXT:            %1252 = arith.subi %1250, %1251 : index
//CHECK-NEXT:            %1253 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1254 = arith.extui %1253 : i32 to i64
//CHECK-NEXT:            %1255 = arith.index_cast %1254 : i64 to index
//CHECK-NEXT:            %1256 = arith.constant 1 : index
//CHECK-NEXT:            %1257 = arith.subi %1255, %1256 : index
//CHECK-NEXT:            %1258 = memref.load %3[%1257, %1252, %1247] : memref<?x?x?xf64>
//CHECK-NEXT:            %1259 = arith.addf %1240, %1258 fastmath<contract> : f64
//CHECK-NEXT:            %1260 = arith.mulf %1224, %1259 fastmath<contract> : f64
//CHECK-NEXT:            %1261 = arith.subf %1206, %1260 fastmath<contract> : f64
//CHECK-NEXT:            %1262 = arith.mulf %1148, %1261 fastmath<contract> : f64
//CHECK-NEXT:            %1263 = arith.addf %1147, %1262 fastmath<contract> : f64
//CHECK-NEXT:            %1264 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:            %1265 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1266 = arith.extui %1265 : i32 to i64
//CHECK-NEXT:            %1267 = arith.index_cast %1266 : i64 to index
//CHECK-NEXT:            %1268 = arith.constant 1 : index
//CHECK-NEXT:            %1269 = arith.subi %1267, %1268 : index
//CHECK-NEXT:            %1270 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1271 = arith.constant 1 : i32
//CHECK-NEXT:            %1272 = arith.subi %1270, %1271 : i32
//CHECK-NEXT:            %1273 = arith.extui %1272 : i32 to i64
//CHECK-NEXT:            %1274 = arith.index_cast %1273 : i64 to index
//CHECK-NEXT:            %1275 = arith.constant 1 : index
//CHECK-NEXT:            %1276 = arith.subi %1274, %1275 : index
//CHECK-NEXT:            %1277 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1278 = arith.extui %1277 : i32 to i64
//CHECK-NEXT:            %1279 = arith.index_cast %1278 : i64 to index
//CHECK-NEXT:            %1280 = arith.constant 1 : index
//CHECK-NEXT:            %1281 = arith.subi %1279, %1280 : index
//CHECK-NEXT:            %1282 = memref.load %5[%1281, %1276, %1269] : memref<?x?x?xf64>
//CHECK-NEXT:            %1283 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1284 = arith.extui %1283 : i32 to i64
//CHECK-NEXT:            %1285 = arith.index_cast %1284 : i64 to index
//CHECK-NEXT:            %1286 = arith.constant 1 : index
//CHECK-NEXT:            %1287 = arith.subi %1285, %1286 : index
//CHECK-NEXT:            %1288 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1289 = arith.constant 1 : i32
//CHECK-NEXT:            %1290 = arith.subi %1288, %1289 : i32
//CHECK-NEXT:            %1291 = arith.extui %1290 : i32 to i64
//CHECK-NEXT:            %1292 = arith.index_cast %1291 : i64 to index
//CHECK-NEXT:            %1293 = arith.constant 1 : index
//CHECK-NEXT:            %1294 = arith.subi %1292, %1293 : index
//CHECK-NEXT:            %1295 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1296 = arith.extui %1295 : i32 to i64
//CHECK-NEXT:            %1297 = arith.index_cast %1296 : i64 to index
//CHECK-NEXT:            %1298 = arith.constant 1 : index
//CHECK-NEXT:            %1299 = arith.subi %1297, %1298 : index
//CHECK-NEXT:            %1300 = memref.load %4[%1299, %1294, %1287] : memref<?x?x?xf64>
//CHECK-NEXT:            %1301 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1302 = arith.constant 1 : i32
//CHECK-NEXT:            %1303 = arith.addi %1301, %1302 : i32
//CHECK-NEXT:            %1304 = arith.extui %1303 : i32 to i64
//CHECK-NEXT:            %1305 = arith.index_cast %1304 : i64 to index
//CHECK-NEXT:            %1306 = arith.constant 1 : index
//CHECK-NEXT:            %1307 = arith.subi %1305, %1306 : index
//CHECK-NEXT:            %1308 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1309 = arith.constant 1 : i32
//CHECK-NEXT:            %1310 = arith.subi %1308, %1309 : i32
//CHECK-NEXT:            %1311 = arith.extui %1310 : i32 to i64
//CHECK-NEXT:            %1312 = arith.index_cast %1311 : i64 to index
//CHECK-NEXT:            %1313 = arith.constant 1 : index
//CHECK-NEXT:            %1314 = arith.subi %1312, %1313 : index
//CHECK-NEXT:            %1315 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1316 = arith.extui %1315 : i32 to i64
//CHECK-NEXT:            %1317 = arith.index_cast %1316 : i64 to index
//CHECK-NEXT:            %1318 = arith.constant 1 : index
//CHECK-NEXT:            %1319 = arith.subi %1317, %1318 : index
//CHECK-NEXT:            %1320 = memref.load %4[%1319, %1314, %1307] : memref<?x?x?xf64>
//CHECK-NEXT:            %1321 = arith.addf %1300, %1320 fastmath<contract> : f64
//CHECK-NEXT:            %1322 = arith.mulf %1282, %1321 fastmath<contract> : f64
//CHECK-NEXT:            %1323 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1324 = arith.extui %1323 : i32 to i64
//CHECK-NEXT:            %1325 = arith.index_cast %1324 : i64 to index
//CHECK-NEXT:            %1326 = arith.constant 1 : index
//CHECK-NEXT:            %1327 = arith.subi %1325, %1326 : index
//CHECK-NEXT:            %1328 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1329 = arith.constant 1 : i32
//CHECK-NEXT:            %1330 = arith.addi %1328, %1329 : i32
//CHECK-NEXT:            %1331 = arith.extui %1330 : i32 to i64
//CHECK-NEXT:            %1332 = arith.index_cast %1331 : i64 to index
//CHECK-NEXT:            %1333 = arith.constant 1 : index
//CHECK-NEXT:            %1334 = arith.subi %1332, %1333 : index
//CHECK-NEXT:            %1335 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1336 = arith.extui %1335 : i32 to i64
//CHECK-NEXT:            %1337 = arith.index_cast %1336 : i64 to index
//CHECK-NEXT:            %1338 = arith.constant 1 : index
//CHECK-NEXT:            %1339 = arith.subi %1337, %1338 : index
//CHECK-NEXT:            %1340 = memref.load %5[%1339, %1334, %1327] : memref<?x?x?xf64>
//CHECK-NEXT:            %1341 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1342 = arith.extui %1341 : i32 to i64
//CHECK-NEXT:            %1343 = arith.index_cast %1342 : i64 to index
//CHECK-NEXT:            %1344 = arith.constant 1 : index
//CHECK-NEXT:            %1345 = arith.subi %1343, %1344 : index
//CHECK-NEXT:            %1346 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1347 = arith.extui %1346 : i32 to i64
//CHECK-NEXT:            %1348 = arith.index_cast %1347 : i64 to index
//CHECK-NEXT:            %1349 = arith.constant 1 : index
//CHECK-NEXT:            %1350 = arith.subi %1348, %1349 : index
//CHECK-NEXT:            %1351 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1352 = arith.extui %1351 : i32 to i64
//CHECK-NEXT:            %1353 = arith.index_cast %1352 : i64 to index
//CHECK-NEXT:            %1354 = arith.constant 1 : index
//CHECK-NEXT:            %1355 = arith.subi %1353, %1354 : index
//CHECK-NEXT:            %1356 = memref.load %4[%1355, %1350, %1345] : memref<?x?x?xf64>
//CHECK-NEXT:            %1357 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1358 = arith.constant 1 : i32
//CHECK-NEXT:            %1359 = arith.addi %1357, %1358 : i32
//CHECK-NEXT:            %1360 = arith.extui %1359 : i32 to i64
//CHECK-NEXT:            %1361 = arith.index_cast %1360 : i64 to index
//CHECK-NEXT:            %1362 = arith.constant 1 : index
//CHECK-NEXT:            %1363 = arith.subi %1361, %1362 : index
//CHECK-NEXT:            %1364 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1365 = arith.extui %1364 : i32 to i64
//CHECK-NEXT:            %1366 = arith.index_cast %1365 : i64 to index
//CHECK-NEXT:            %1367 = arith.constant 1 : index
//CHECK-NEXT:            %1368 = arith.subi %1366, %1367 : index
//CHECK-NEXT:            %1369 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1370 = arith.extui %1369 : i32 to i64
//CHECK-NEXT:            %1371 = arith.index_cast %1370 : i64 to index
//CHECK-NEXT:            %1372 = arith.constant 1 : index
//CHECK-NEXT:            %1373 = arith.subi %1371, %1372 : index
//CHECK-NEXT:            %1374 = memref.load %4[%1373, %1368, %1363] : memref<?x?x?xf64>
//CHECK-NEXT:            %1375 = arith.addf %1356, %1374 fastmath<contract> : f64
//CHECK-NEXT:            %1376 = arith.mulf %1340, %1375 fastmath<contract> : f64
//CHECK-NEXT:            %1377 = arith.subf %1322, %1376 fastmath<contract> : f64
//CHECK-NEXT:            %1378 = arith.mulf %1264, %1377 fastmath<contract> : f64
//CHECK-NEXT:            %1379 = arith.addf %1263, %1378 fastmath<contract> : f64
//CHECK-NEXT:            %1380 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1381 = arith.extui %1380 : i32 to i64
//CHECK-NEXT:            %1382 = arith.index_cast %1381 : i64 to index
//CHECK-NEXT:            %1383 = arith.constant 1 : index
//CHECK-NEXT:            %1384 = arith.subi %1382, %1383 : index
//CHECK-NEXT:            %1385 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %1386 = arith.extui %1385 : i32 to i64
//CHECK-NEXT:            %1387 = arith.index_cast %1386 : i64 to index
//CHECK-NEXT:            %1388 = arith.constant 1 : index
//CHECK-NEXT:            %1389 = arith.subi %1387, %1388 : index
//CHECK-NEXT:            %1390 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %1391 = arith.extui %1390 : i32 to i64
//CHECK-NEXT:            %1392 = arith.index_cast %1391 : i64 to index
//CHECK-NEXT:            %1393 = arith.constant 1 : index
//CHECK-NEXT:            %1394 = arith.subi %1392, %1393 : index
//CHECK-NEXT:            memref.store %1379, %2[%1394, %1389, %1384] : memref<?x?x?xf64>
//CHECK-NEXT:            %1395 = arith.addi %283, %278 : index
//CHECK-NEXT:            %1396 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %1397 = arith.index_cast %278 : index to i32
//CHECK-NEXT:            %1398 = arith.addi %1396, %1397 : i32
//CHECK-NEXT:            scf.yield %1398 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %282, %15[] : memref<i32>
//CHECK-NEXT:          %1399 = arith.addi %270, %265 : index
//CHECK-NEXT:          %1400 = memref.load %14[] : memref<i32>
//CHECK-NEXT:          %1401 = arith.index_cast %265 : index to i32
//CHECK-NEXT:          %1402 = arith.addi %1400, %1401 : i32
//CHECK-NEXT:          scf.yield %1402 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %269, %14[] : memref<i32>
//CHECK-NEXT:        %1403 = arith.addi %257, %252 : index
//CHECK-NEXT:        %1404 = memref.load %13[] : memref<i32>
//CHECK-NEXT:        %1405 = arith.index_cast %252 : index to i32
//CHECK-NEXT:        %1406 = arith.addi %1404, %1405 : i32
//CHECK-NEXT:        scf.yield %1406 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %256, %13[] : memref<i32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %0 = arith.constant 512 : i32
//CHECK-NEXT:        %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %0, %1[] : memref<i32>
//CHECK-NEXT:        %2 = arith.constant 512 : i32
//CHECK-NEXT:        %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %2, %3[] : memref<i32>
//CHECK-NEXT:        %4 = arith.constant 512 : i32
//CHECK-NEXT:        %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %4, %5[] : memref<i32>
//CHECK-NEXT:        func.call @_QMpwadvectionPwrapper(%1, %3, %5) : (memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioBeginExternalListOutput(i32, !llvm.ptr, i32) -> !llvm.ptr 
//CHECK-NEXT:    func.func private @_FortranAioOutputAscii(!llvm.ptr, !llvm.ptr, i64) -> i1 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<10 x i8>, sym_name = "_QQclX496E697469616C697365", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "Initialise", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioEndIoStatement(!llvm.ptr) -> i32 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<9 x i8>, sym_name = "_QQclX43616C63756C617465", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "Calculate", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
