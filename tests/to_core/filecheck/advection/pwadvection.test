// RUN: xftn %S/../../../../examples/advection/pwadvection.F90 --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    func.func @_QMpwadvectionPwrapper(%0 : memref<i32> {fir.bindc_name = "nz"}, %1 : memref<i32> {fir.bindc_name = "ny"}, %2 : memref<i32> {fir.bindc_name = "nx"}) {
//CHECK-NEXT:      %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %4 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %5 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %6 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %7 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %8 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %9 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?xf64>>
//CHECK-NEXT:      %10 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %11 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %12 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %13 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %14 = arith.index_cast %13 : i32 to index
//CHECK-NEXT:      %15 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %16 = arith.index_cast %15 : i32 to index
//CHECK-NEXT:      %17 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %18 = arith.index_cast %17 : i32 to index
//CHECK-NEXT:      %19 = memref.alloc(%18, %16, %14) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %19, %3[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %20 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %21 = arith.index_cast %20 : i32 to index
//CHECK-NEXT:      %22 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %23 = arith.index_cast %22 : i32 to index
//CHECK-NEXT:      %24 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %25 = arith.index_cast %24 : i32 to index
//CHECK-NEXT:      %26 = memref.alloc(%25, %23, %21) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %26, %4[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %27 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %28 = arith.index_cast %27 : i32 to index
//CHECK-NEXT:      %29 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %30 = arith.index_cast %29 : i32 to index
//CHECK-NEXT:      %31 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %32 = arith.index_cast %31 : i32 to index
//CHECK-NEXT:      %33 = memref.alloc(%32, %30, %28) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %33, %5[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %34 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %35 = arith.index_cast %34 : i32 to index
//CHECK-NEXT:      %36 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %37 = arith.index_cast %36 : i32 to index
//CHECK-NEXT:      %38 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %39 = arith.index_cast %38 : i32 to index
//CHECK-NEXT:      %40 = memref.alloc(%39, %37, %35) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %40, %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %41 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %42 = arith.index_cast %41 : i32 to index
//CHECK-NEXT:      %43 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %44 = arith.index_cast %43 : i32 to index
//CHECK-NEXT:      %45 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %46 = arith.index_cast %45 : i32 to index
//CHECK-NEXT:      %47 = memref.alloc(%46, %44, %42) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %47, %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %48 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %49 = arith.index_cast %48 : i32 to index
//CHECK-NEXT:      %50 = memref.load %1[] : memref<i32>
//CHECK-NEXT:      %51 = arith.index_cast %50 : i32 to index
//CHECK-NEXT:      %52 = memref.load %2[] : memref<i32>
//CHECK-NEXT:      %53 = arith.index_cast %52 : i32 to index
//CHECK-NEXT:      %54 = memref.alloc(%53, %51, %49) : memref<?x?x?xf64>
//CHECK-NEXT:      memref.store %54, %12[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      %55 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %56 = arith.index_cast %55 : i32 to index
//CHECK-NEXT:      %57 = memref.alloc(%56) : memref<?xf64>
//CHECK-NEXT:      memref.store %57, %6[] : memref<memref<?xf64>>
//CHECK-NEXT:      %58 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %59 = arith.index_cast %58 : i32 to index
//CHECK-NEXT:      %60 = memref.alloc(%59) : memref<?xf64>
//CHECK-NEXT:      memref.store %60, %7[] : memref<memref<?xf64>>
//CHECK-NEXT:      %61 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %62 = arith.index_cast %61 : i32 to index
//CHECK-NEXT:      %63 = memref.alloc(%62) : memref<?xf64>
//CHECK-NEXT:      memref.store %63, %8[] : memref<memref<?xf64>>
//CHECK-NEXT:      %64 = memref.load %0[] : memref<i32>
//CHECK-NEXT:      %65 = arith.index_cast %64 : i32 to index
//CHECK-NEXT:      %66 = memref.alloc(%65) : memref<?xf64>
//CHECK-NEXT:      memref.store %66, %9[] : memref<memref<?xf64>>
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %67 = memref.load %3[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %68 = memref.load %4[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %69 = memref.load %5[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %70 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %71 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %72 = memref.load %12[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:        %73 = memref.load %6[] : memref<memref<?xf64>>
//CHECK-NEXT:        %74 = memref.load %7[] : memref<memref<?xf64>>
//CHECK-NEXT:        %75 = memref.load %8[] : memref<memref<?xf64>>
//CHECK-NEXT:        %76 = memref.load %9[] : memref<memref<?xf64>>
//CHECK-NEXT:        func.call @_QMpwadvectionPcalc(%67, %68, %69, %70, %71, %72, %73, %74, %75, %76, %0, %1, %2) : (memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?x?x?xf64>, memref<?xf64>, memref<?xf64>, memref<?xf64>, memref<?xf64>, memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      %77 = memref.load %3[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %77 : memref<?x?x?xf64>
//CHECK-NEXT:      %78 = memref.load %4[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %78 : memref<?x?x?xf64>
//CHECK-NEXT:      %79 = memref.load %5[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %79 : memref<?x?x?xf64>
//CHECK-NEXT:      %80 = memref.load %10[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %80 : memref<?x?x?xf64>
//CHECK-NEXT:      %81 = memref.load %11[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %81 : memref<?x?x?xf64>
//CHECK-NEXT:      %82 = memref.load %12[] : memref<memref<?x?x?xf64>>
//CHECK-NEXT:      memref.dealloc %82 : memref<?x?x?xf64>
//CHECK-NEXT:      %83 = memref.load %6[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %83 : memref<?xf64>
//CHECK-NEXT:      %84 = memref.load %7[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %84 : memref<?xf64>
//CHECK-NEXT:      %85 = memref.load %8[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %85 : memref<?xf64>
//CHECK-NEXT:      %86 = memref.load %9[] : memref<memref<?xf64>>
//CHECK-NEXT:      memref.dealloc %86 : memref<?xf64>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMpwadvectionPcalc(%0 : memref<?x?x?xf64> {fir.bindc_name = "su"}, %1 : memref<?x?x?xf64> {fir.bindc_name = "sv"}, %2 : memref<?x?x?xf64> {fir.bindc_name = "sw"}, %3 : memref<?x?x?xf64> {fir.bindc_name = "u"}, %4 : memref<?x?x?xf64> {fir.bindc_name = "v"}, %5 : memref<?x?x?xf64> {fir.bindc_name = "w"}, %6 : memref<?xf64> {fir.bindc_name = "tzc1"}, %7 : memref<?xf64> {fir.bindc_name = "tzc2"}, %8 : memref<?xf64> {fir.bindc_name = "tzd1"}, %9 : memref<?xf64> {fir.bindc_name = "tzd2"}, %10 : memref<i32> {fir.bindc_name = "nz"}, %11 : memref<i32> {fir.bindc_name = "ny"}, %12 : memref<i32> {fir.bindc_name = "nx"}) {
//CHECK-NEXT:      %13 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %14 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %15 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:      %16 = arith.constant 6 : i32
//CHECK-NEXT:      %17 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %18 = "llvm.getelementptr"(%17) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %19 = arith.constant 45 : i32
//CHECK-NEXT:      %20 = func.call @_FortranAioBeginExternalListOutput(%16, %18, %19) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:      %21 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %22 = "llvm.getelementptr"(%21) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %23 = arith.constant 10 : index
//CHECK-NEXT:      %24 = arith.index_cast %23 : index to i64
//CHECK-NEXT:      %25 = func.call @_FortranAioOutputAscii(%20, %22, %24) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:      %26 = func.call @_FortranAioEndIoStatement(%20) : (!llvm.ptr) -> i32
//CHECK-NEXT:      %27 = arith.constant 1 : i32
//CHECK-NEXT:      %28 = arith.index_cast %27 : i32 to index
//CHECK-NEXT:      %29 = memref.load %12[] : memref<i32>
//CHECK-NEXT:      %30 = arith.index_cast %29 : i32 to index
//CHECK-NEXT:      %31 = arith.constant 1 : index
//CHECK-NEXT:      %32 = arith.index_cast %28 : index to i32
//CHECK-NEXT:      %33 = arith.addi %30, %31 : index
//CHECK-NEXT:      %34 = arith.constant 1.000000e+01 : f64
//CHECK-NEXT:      %35 = arith.constant 2.000000e+01 : f64
//CHECK-NEXT:      %36 = arith.constant 3.000000e+01 : f64
//CHECK-NEXT:      %37 = scf.for %38 = %28 to %33 step %31 iter_args(%39 = %32) -> (i32) {
//CHECK-NEXT:        memref.store %39, %13[] : memref<i32>
//CHECK-NEXT:        %40 = memref.load %11[] : memref<i32>
//CHECK-NEXT:        %41 = arith.index_cast %40 : i32 to index
//CHECK-NEXT:        %42 = arith.addi %41, %31 : index
//CHECK-NEXT:        %43 = scf.for %44 = %28 to %42 step %31 iter_args(%45 = %32) -> (i32) {
//CHECK-NEXT:          memref.store %45, %14[] : memref<i32>
//CHECK-NEXT:          %46 = memref.load %10[] : memref<i32>
//CHECK-NEXT:          %47 = arith.index_cast %46 : i32 to index
//CHECK-NEXT:          %48 = arith.addi %47, %31 : index
//CHECK-NEXT:          %49 = scf.for %50 = %28 to %48 step %31 iter_args(%51 = %32) -> (i32) {
//CHECK-NEXT:            memref.store %51, %15[] : memref<i32>
//CHECK-NEXT:            %52 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %53 = arith.extui %52 : i32 to i64
//CHECK-NEXT:            %54 = arith.index_cast %53 : i64 to index
//CHECK-NEXT:            %55 = arith.subi %54, %31 : index
//CHECK-NEXT:            %56 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %57 = arith.extui %56 : i32 to i64
//CHECK-NEXT:            %58 = arith.index_cast %57 : i64 to index
//CHECK-NEXT:            %59 = arith.subi %58, %31 : index
//CHECK-NEXT:            %60 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %61 = arith.extui %60 : i32 to i64
//CHECK-NEXT:            %62 = arith.index_cast %61 : i64 to index
//CHECK-NEXT:            %63 = arith.subi %62, %31 : index
//CHECK-NEXT:            memref.store %34, %3[%63, %59, %55] : memref<?x?x?xf64>
//CHECK-NEXT:            %64 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %65 = arith.extui %64 : i32 to i64
//CHECK-NEXT:            %66 = arith.index_cast %65 : i64 to index
//CHECK-NEXT:            %67 = arith.subi %66, %31 : index
//CHECK-NEXT:            %68 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %69 = arith.extui %68 : i32 to i64
//CHECK-NEXT:            %70 = arith.index_cast %69 : i64 to index
//CHECK-NEXT:            %71 = arith.subi %70, %31 : index
//CHECK-NEXT:            %72 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %73 = arith.extui %72 : i32 to i64
//CHECK-NEXT:            %74 = arith.index_cast %73 : i64 to index
//CHECK-NEXT:            %75 = arith.subi %74, %31 : index
//CHECK-NEXT:            memref.store %35, %4[%75, %71, %67] : memref<?x?x?xf64>
//CHECK-NEXT:            %76 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %77 = arith.extui %76 : i32 to i64
//CHECK-NEXT:            %78 = arith.index_cast %77 : i64 to index
//CHECK-NEXT:            %79 = arith.subi %78, %31 : index
//CHECK-NEXT:            %80 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %81 = arith.extui %80 : i32 to i64
//CHECK-NEXT:            %82 = arith.index_cast %81 : i64 to index
//CHECK-NEXT:            %83 = arith.subi %82, %31 : index
//CHECK-NEXT:            %84 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %85 = arith.extui %84 : i32 to i64
//CHECK-NEXT:            %86 = arith.index_cast %85 : i64 to index
//CHECK-NEXT:            %87 = arith.subi %86, %31 : index
//CHECK-NEXT:            memref.store %36, %5[%87, %83, %79] : memref<?x?x?xf64>
//CHECK-NEXT:            %88 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %89 = arith.index_cast %31 : index to i32
//CHECK-NEXT:            %90 = arith.addi %88, %89 : i32
//CHECK-NEXT:            scf.yield %90 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %49, %15[] : memref<i32>
//CHECK-NEXT:          %91 = memref.load %14[] : memref<i32>
//CHECK-NEXT:          %92 = arith.index_cast %31 : index to i32
//CHECK-NEXT:          %93 = arith.addi %91, %92 : i32
//CHECK-NEXT:          scf.yield %93 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %43, %14[] : memref<i32>
//CHECK-NEXT:        %94 = memref.load %13[] : memref<i32>
//CHECK-NEXT:        %95 = arith.index_cast %31 : index to i32
//CHECK-NEXT:        %96 = arith.addi %94, %95 : i32
//CHECK-NEXT:        scf.yield %96 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %37, %13[] : memref<i32>
//CHECK-NEXT:      %97 = memref.load %10[] : memref<i32>
//CHECK-NEXT:      %98 = arith.index_cast %97 : i32 to index
//CHECK-NEXT:      %99 = arith.addi %98, %31 : index
//CHECK-NEXT:      %100 = arith.constant 5.000000e+01 : f64
//CHECK-NEXT:      %101 = arith.constant 1.500000e+01 : f64
//CHECK-NEXT:      %102 = arith.constant 1.000000e+02 : f64
//CHECK-NEXT:      %103 = arith.constant 5.000000e+00 : f64
//CHECK-NEXT:      %104 = scf.for %105 = %28 to %99 step %31 iter_args(%106 = %32) -> (i32) {
//CHECK-NEXT:        memref.store %106, %15[] : memref<i32>
//CHECK-NEXT:        %107 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %108 = arith.extui %107 : i32 to i64
//CHECK-NEXT:        %109 = arith.index_cast %108 : i64 to index
//CHECK-NEXT:        %110 = arith.subi %109, %31 : index
//CHECK-NEXT:        memref.store %100, %6[%110] : memref<?xf64>
//CHECK-NEXT:        %111 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %112 = arith.extui %111 : i32 to i64
//CHECK-NEXT:        %113 = arith.index_cast %112 : i64 to index
//CHECK-NEXT:        %114 = arith.subi %113, %31 : index
//CHECK-NEXT:        memref.store %101, %7[%114] : memref<?xf64>
//CHECK-NEXT:        %115 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %116 = arith.extui %115 : i32 to i64
//CHECK-NEXT:        %117 = arith.index_cast %116 : i64 to index
//CHECK-NEXT:        %118 = arith.subi %117, %31 : index
//CHECK-NEXT:        memref.store %102, %8[%118] : memref<?xf64>
//CHECK-NEXT:        %119 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %120 = arith.extui %119 : i32 to i64
//CHECK-NEXT:        %121 = arith.index_cast %120 : i64 to index
//CHECK-NEXT:        %122 = arith.subi %121, %31 : index
//CHECK-NEXT:        memref.store %103, %9[%122] : memref<?xf64>
//CHECK-NEXT:        %123 = memref.load %15[] : memref<i32>
//CHECK-NEXT:        %124 = arith.index_cast %31 : index to i32
//CHECK-NEXT:        %125 = arith.addi %123, %124 : i32
//CHECK-NEXT:        scf.yield %125 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %104, %15[] : memref<i32>
//CHECK-NEXT:      %126 = arith.constant 64 : i32
//CHECK-NEXT:      %127 = func.call @_FortranAioBeginExternalListOutput(%16, %18, %126) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:      %128 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %129 = "llvm.getelementptr"(%128) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:      %130 = arith.constant 9 : index
//CHECK-NEXT:      %131 = arith.index_cast %130 : index to i64
//CHECK-NEXT:      %132 = func.call @_FortranAioOutputAscii(%127, %129, %131) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:      %133 = func.call @_FortranAioEndIoStatement(%127) : (!llvm.ptr) -> i32
//CHECK-NEXT:      %134 = arith.constant 2 : i32
//CHECK-NEXT:      %135 = arith.index_cast %134 : i32 to index
//CHECK-NEXT:      %136 = memref.load %12[] : memref<i32>
//CHECK-NEXT:      %137 = arith.subi %136, %27 : i32
//CHECK-NEXT:      %138 = arith.index_cast %137 : i32 to index
//CHECK-NEXT:      %139 = arith.index_cast %135 : index to i32
//CHECK-NEXT:      %140 = arith.addi %138, %31 : index
//CHECK-NEXT:      %141 = arith.constant 2.000000e+00 : f64
//CHECK-NEXT:      %142 = arith.constant 1.000000e+00 : f64
//CHECK-NEXT:      %143 = scf.for %144 = %135 to %140 step %31 iter_args(%145 = %139) -> (i32) {
//CHECK-NEXT:        memref.store %145, %13[] : memref<i32>
//CHECK-NEXT:        %146 = memref.load %11[] : memref<i32>
//CHECK-NEXT:        %147 = arith.subi %146, %27 : i32
//CHECK-NEXT:        %148 = arith.index_cast %147 : i32 to index
//CHECK-NEXT:        %149 = arith.addi %148, %31 : index
//CHECK-NEXT:        %150 = scf.for %151 = %135 to %149 step %31 iter_args(%152 = %139) -> (i32) {
//CHECK-NEXT:          memref.store %152, %14[] : memref<i32>
//CHECK-NEXT:          %153 = memref.load %10[] : memref<i32>
//CHECK-NEXT:          %154 = arith.subi %153, %27 : i32
//CHECK-NEXT:          %155 = arith.index_cast %154 : i32 to index
//CHECK-NEXT:          %156 = arith.addi %155, %31 : index
//CHECK-NEXT:          %157 = scf.for %158 = %135 to %156 step %31 iter_args(%159 = %139) -> (i32) {
//CHECK-NEXT:            memref.store %159, %15[] : memref<i32>
//CHECK-NEXT:            %160 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %161 = arith.extui %160 : i32 to i64
//CHECK-NEXT:            %162 = arith.index_cast %161 : i64 to index
//CHECK-NEXT:            %163 = arith.subi %162, %31 : index
//CHECK-NEXT:            %164 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %165 = arith.extui %164 : i32 to i64
//CHECK-NEXT:            %166 = arith.index_cast %165 : i64 to index
//CHECK-NEXT:            %167 = arith.subi %166, %31 : index
//CHECK-NEXT:            %168 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %169 = arith.subi %168, %27 : i32
//CHECK-NEXT:            %170 = arith.extui %169 : i32 to i64
//CHECK-NEXT:            %171 = arith.index_cast %170 : i64 to index
//CHECK-NEXT:            %172 = arith.subi %171, %31 : index
//CHECK-NEXT:            %173 = memref.load %3[%172, %167, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %174 = arith.extui %168 : i32 to i64
//CHECK-NEXT:            %175 = arith.index_cast %174 : i64 to index
//CHECK-NEXT:            %176 = arith.subi %175, %31 : index
//CHECK-NEXT:            %177 = memref.load %3[%176, %167, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %178 = arith.addf %177, %173 fastmath<contract> : f64
//CHECK-NEXT:            %179 = arith.mulf %173, %178 fastmath<contract> : f64
//CHECK-NEXT:            %180 = arith.addi %168, %27 : i32
//CHECK-NEXT:            %181 = arith.extui %180 : i32 to i64
//CHECK-NEXT:            %182 = arith.index_cast %181 : i64 to index
//CHECK-NEXT:            %183 = arith.subi %182, %31 : index
//CHECK-NEXT:            %184 = memref.load %3[%183, %167, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %185 = arith.addf %177, %184 fastmath<contract> : f64
//CHECK-NEXT:            %186 = arith.mulf %184, %185 fastmath<contract> : f64
//CHECK-NEXT:            %187 = arith.subf %179, %186 fastmath<contract> : f64
//CHECK-NEXT:            %188 = arith.mulf %141, %187 fastmath<contract> : f64
//CHECK-NEXT:            %189 = arith.subi %164, %27 : i32
//CHECK-NEXT:            %190 = arith.extui %189 : i32 to i64
//CHECK-NEXT:            %191 = arith.index_cast %190 : i64 to index
//CHECK-NEXT:            %192 = arith.subi %191, %31 : index
//CHECK-NEXT:            %193 = memref.load %3[%176, %192, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %194 = memref.load %4[%176, %192, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %195 = memref.load %4[%183, %192, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %196 = arith.addf %194, %195 fastmath<contract> : f64
//CHECK-NEXT:            %197 = arith.mulf %193, %196 fastmath<contract> : f64
//CHECK-NEXT:            %198 = arith.addi %164, %27 : i32
//CHECK-NEXT:            %199 = arith.extui %198 : i32 to i64
//CHECK-NEXT:            %200 = arith.index_cast %199 : i64 to index
//CHECK-NEXT:            %201 = arith.subi %200, %31 : index
//CHECK-NEXT:            %202 = memref.load %3[%176, %201, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %203 = memref.load %4[%176, %167, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %204 = memref.load %4[%183, %167, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %205 = arith.addf %203, %204 fastmath<contract> : f64
//CHECK-NEXT:            %206 = arith.mulf %202, %205 fastmath<contract> : f64
//CHECK-NEXT:            %207 = arith.subf %197, %206 fastmath<contract> : f64
//CHECK-NEXT:            %208 = arith.mulf %142, %207 fastmath<contract> : f64
//CHECK-NEXT:            %209 = arith.addf %188, %208 fastmath<contract> : f64
//CHECK-NEXT:            %210 = memref.load %6[%163] : memref<?xf64>
//CHECK-NEXT:            %211 = arith.subi %160, %27 : i32
//CHECK-NEXT:            %212 = arith.extui %211 : i32 to i64
//CHECK-NEXT:            %213 = arith.index_cast %212 : i64 to index
//CHECK-NEXT:            %214 = arith.subi %213, %31 : index
//CHECK-NEXT:            %215 = memref.load %3[%176, %167, %214] : memref<?x?x?xf64>
//CHECK-NEXT:            %216 = arith.mulf %210, %215 fastmath<contract> : f64
//CHECK-NEXT:            %217 = memref.load %5[%176, %167, %214] : memref<?x?x?xf64>
//CHECK-NEXT:            %218 = memref.load %5[%183, %167, %214] : memref<?x?x?xf64>
//CHECK-NEXT:            %219 = arith.addf %217, %218 fastmath<contract> : f64
//CHECK-NEXT:            %220 = arith.mulf %216, %219 fastmath<contract> : f64
//CHECK-NEXT:            %221 = memref.load %7[%163] : memref<?xf64>
//CHECK-NEXT:            %222 = arith.addi %160, %27 : i32
//CHECK-NEXT:            %223 = arith.extui %222 : i32 to i64
//CHECK-NEXT:            %224 = arith.index_cast %223 : i64 to index
//CHECK-NEXT:            %225 = arith.subi %224, %31 : index
//CHECK-NEXT:            %226 = memref.load %3[%176, %167, %225] : memref<?x?x?xf64>
//CHECK-NEXT:            %227 = arith.mulf %221, %226 fastmath<contract> : f64
//CHECK-NEXT:            %228 = memref.load %5[%176, %167, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %229 = memref.load %5[%183, %167, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %230 = arith.addf %228, %229 fastmath<contract> : f64
//CHECK-NEXT:            %231 = arith.mulf %227, %230 fastmath<contract> : f64
//CHECK-NEXT:            %232 = arith.subf %220, %231 fastmath<contract> : f64
//CHECK-NEXT:            %233 = arith.addf %209, %232 fastmath<contract> : f64
//CHECK-NEXT:            memref.store %233, %0[%176, %167, %163] : memref<?x?x?xf64>
//CHECK-NEXT:            %234 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %235 = arith.extui %234 : i32 to i64
//CHECK-NEXT:            %236 = arith.index_cast %235 : i64 to index
//CHECK-NEXT:            %237 = arith.subi %236, %31 : index
//CHECK-NEXT:            %238 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %239 = arith.subi %238, %27 : i32
//CHECK-NEXT:            %240 = arith.extui %239 : i32 to i64
//CHECK-NEXT:            %241 = arith.index_cast %240 : i64 to index
//CHECK-NEXT:            %242 = arith.subi %241, %31 : index
//CHECK-NEXT:            %243 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %244 = arith.extui %243 : i32 to i64
//CHECK-NEXT:            %245 = arith.index_cast %244 : i64 to index
//CHECK-NEXT:            %246 = arith.subi %245, %31 : index
//CHECK-NEXT:            %247 = memref.load %4[%246, %242, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %248 = arith.extui %238 : i32 to i64
//CHECK-NEXT:            %249 = arith.index_cast %248 : i64 to index
//CHECK-NEXT:            %250 = arith.subi %249, %31 : index
//CHECK-NEXT:            %251 = memref.load %4[%246, %250, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %252 = arith.addf %251, %247 fastmath<contract> : f64
//CHECK-NEXT:            %253 = arith.mulf %247, %252 fastmath<contract> : f64
//CHECK-NEXT:            %254 = arith.addi %238, %27 : i32
//CHECK-NEXT:            %255 = arith.extui %254 : i32 to i64
//CHECK-NEXT:            %256 = arith.index_cast %255 : i64 to index
//CHECK-NEXT:            %257 = arith.subi %256, %31 : index
//CHECK-NEXT:            %258 = memref.load %4[%246, %257, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %259 = arith.addf %251, %258 fastmath<contract> : f64
//CHECK-NEXT:            %260 = arith.mulf %258, %259 fastmath<contract> : f64
//CHECK-NEXT:            %261 = arith.subf %253, %260 fastmath<contract> : f64
//CHECK-NEXT:            %262 = arith.mulf %141, %261 fastmath<contract> : f64
//CHECK-NEXT:            %263 = arith.subi %243, %27 : i32
//CHECK-NEXT:            %264 = arith.extui %263 : i32 to i64
//CHECK-NEXT:            %265 = arith.index_cast %264 : i64 to index
//CHECK-NEXT:            %266 = arith.subi %265, %31 : index
//CHECK-NEXT:            %267 = memref.load %4[%266, %250, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %268 = memref.load %3[%266, %250, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %269 = memref.load %3[%266, %257, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %270 = arith.addf %268, %269 fastmath<contract> : f64
//CHECK-NEXT:            %271 = arith.mulf %267, %270 fastmath<contract> : f64
//CHECK-NEXT:            %272 = arith.addi %243, %27 : i32
//CHECK-NEXT:            %273 = arith.extui %272 : i32 to i64
//CHECK-NEXT:            %274 = arith.index_cast %273 : i64 to index
//CHECK-NEXT:            %275 = arith.subi %274, %31 : index
//CHECK-NEXT:            %276 = memref.load %4[%275, %250, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %277 = memref.load %3[%246, %250, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %278 = memref.load %3[%246, %257, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %279 = arith.addf %277, %278 fastmath<contract> : f64
//CHECK-NEXT:            %280 = arith.mulf %276, %279 fastmath<contract> : f64
//CHECK-NEXT:            %281 = arith.subf %271, %280 fastmath<contract> : f64
//CHECK-NEXT:            %282 = arith.mulf %141, %281 fastmath<contract> : f64
//CHECK-NEXT:            %283 = arith.addf %262, %282 fastmath<contract> : f64
//CHECK-NEXT:            %284 = memref.load %6[%237] : memref<?xf64>
//CHECK-NEXT:            %285 = arith.subi %234, %27 : i32
//CHECK-NEXT:            %286 = arith.extui %285 : i32 to i64
//CHECK-NEXT:            %287 = arith.index_cast %286 : i64 to index
//CHECK-NEXT:            %288 = arith.subi %287, %31 : index
//CHECK-NEXT:            %289 = memref.load %4[%246, %250, %288] : memref<?x?x?xf64>
//CHECK-NEXT:            %290 = arith.mulf %284, %289 fastmath<contract> : f64
//CHECK-NEXT:            %291 = memref.load %5[%246, %250, %288] : memref<?x?x?xf64>
//CHECK-NEXT:            %292 = memref.load %5[%246, %257, %288] : memref<?x?x?xf64>
//CHECK-NEXT:            %293 = arith.addf %291, %292 fastmath<contract> : f64
//CHECK-NEXT:            %294 = arith.mulf %290, %293 fastmath<contract> : f64
//CHECK-NEXT:            %295 = memref.load %7[%237] : memref<?xf64>
//CHECK-NEXT:            %296 = arith.addi %234, %27 : i32
//CHECK-NEXT:            %297 = arith.extui %296 : i32 to i64
//CHECK-NEXT:            %298 = arith.index_cast %297 : i64 to index
//CHECK-NEXT:            %299 = arith.subi %298, %31 : index
//CHECK-NEXT:            %300 = memref.load %4[%246, %250, %299] : memref<?x?x?xf64>
//CHECK-NEXT:            %301 = arith.mulf %295, %300 fastmath<contract> : f64
//CHECK-NEXT:            %302 = memref.load %5[%246, %250, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %303 = memref.load %5[%246, %257, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %304 = arith.addf %302, %303 fastmath<contract> : f64
//CHECK-NEXT:            %305 = arith.mulf %301, %304 fastmath<contract> : f64
//CHECK-NEXT:            %306 = arith.subf %294, %305 fastmath<contract> : f64
//CHECK-NEXT:            %307 = arith.addf %283, %306 fastmath<contract> : f64
//CHECK-NEXT:            memref.store %307, %1[%246, %250, %237] : memref<?x?x?xf64>
//CHECK-NEXT:            %308 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %309 = arith.extui %308 : i32 to i64
//CHECK-NEXT:            %310 = arith.index_cast %309 : i64 to index
//CHECK-NEXT:            %311 = arith.subi %310, %31 : index
//CHECK-NEXT:            %312 = memref.load %8[%311] : memref<?xf64>
//CHECK-NEXT:            %313 = arith.subi %308, %27 : i32
//CHECK-NEXT:            %314 = arith.extui %313 : i32 to i64
//CHECK-NEXT:            %315 = arith.index_cast %314 : i64 to index
//CHECK-NEXT:            %316 = arith.subi %315, %31 : index
//CHECK-NEXT:            %317 = memref.load %14[] : memref<i32>
//CHECK-NEXT:            %318 = arith.extui %317 : i32 to i64
//CHECK-NEXT:            %319 = arith.index_cast %318 : i64 to index
//CHECK-NEXT:            %320 = arith.subi %319, %31 : index
//CHECK-NEXT:            %321 = memref.load %13[] : memref<i32>
//CHECK-NEXT:            %322 = arith.extui %321 : i32 to i64
//CHECK-NEXT:            %323 = arith.index_cast %322 : i64 to index
//CHECK-NEXT:            %324 = arith.subi %323, %31 : index
//CHECK-NEXT:            %325 = memref.load %5[%324, %320, %316] : memref<?x?x?xf64>
//CHECK-NEXT:            %326 = arith.mulf %312, %325 fastmath<contract> : f64
//CHECK-NEXT:            %327 = memref.load %5[%324, %320, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %328 = arith.addf %327, %325 fastmath<contract> : f64
//CHECK-NEXT:            %329 = arith.mulf %326, %328 fastmath<contract> : f64
//CHECK-NEXT:            %330 = memref.load %9[%311] : memref<?xf64>
//CHECK-NEXT:            %331 = arith.addi %308, %27 : i32
//CHECK-NEXT:            %332 = arith.extui %331 : i32 to i64
//CHECK-NEXT:            %333 = arith.index_cast %332 : i64 to index
//CHECK-NEXT:            %334 = arith.subi %333, %31 : index
//CHECK-NEXT:            %335 = memref.load %5[%324, %320, %334] : memref<?x?x?xf64>
//CHECK-NEXT:            %336 = arith.mulf %330, %335 fastmath<contract> : f64
//CHECK-NEXT:            %337 = arith.addf %327, %335 fastmath<contract> : f64
//CHECK-NEXT:            %338 = arith.mulf %336, %337 fastmath<contract> : f64
//CHECK-NEXT:            %339 = arith.subf %329, %338 fastmath<contract> : f64
//CHECK-NEXT:            %340 = arith.subi %321, %27 : i32
//CHECK-NEXT:            %341 = arith.extui %340 : i32 to i64
//CHECK-NEXT:            %342 = arith.index_cast %341 : i64 to index
//CHECK-NEXT:            %343 = arith.subi %342, %31 : index
//CHECK-NEXT:            %344 = memref.load %5[%343, %320, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %345 = memref.load %3[%343, %320, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %346 = memref.load %3[%343, %320, %334] : memref<?x?x?xf64>
//CHECK-NEXT:            %347 = arith.addf %345, %346 fastmath<contract> : f64
//CHECK-NEXT:            %348 = arith.mulf %344, %347 fastmath<contract> : f64
//CHECK-NEXT:            %349 = arith.addi %321, %27 : i32
//CHECK-NEXT:            %350 = arith.extui %349 : i32 to i64
//CHECK-NEXT:            %351 = arith.index_cast %350 : i64 to index
//CHECK-NEXT:            %352 = arith.subi %351, %31 : index
//CHECK-NEXT:            %353 = memref.load %5[%352, %320, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %354 = memref.load %3[%324, %320, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %355 = memref.load %3[%324, %320, %334] : memref<?x?x?xf64>
//CHECK-NEXT:            %356 = arith.addf %354, %355 fastmath<contract> : f64
//CHECK-NEXT:            %357 = arith.mulf %353, %356 fastmath<contract> : f64
//CHECK-NEXT:            %358 = arith.subf %348, %357 fastmath<contract> : f64
//CHECK-NEXT:            %359 = arith.mulf %141, %358 fastmath<contract> : f64
//CHECK-NEXT:            %360 = arith.addf %339, %359 fastmath<contract> : f64
//CHECK-NEXT:            %361 = arith.subi %317, %27 : i32
//CHECK-NEXT:            %362 = arith.extui %361 : i32 to i64
//CHECK-NEXT:            %363 = arith.index_cast %362 : i64 to index
//CHECK-NEXT:            %364 = arith.subi %363, %31 : index
//CHECK-NEXT:            %365 = memref.load %5[%324, %364, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %366 = memref.load %4[%324, %364, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %367 = memref.load %4[%324, %364, %334] : memref<?x?x?xf64>
//CHECK-NEXT:            %368 = arith.addf %366, %367 fastmath<contract> : f64
//CHECK-NEXT:            %369 = arith.mulf %365, %368 fastmath<contract> : f64
//CHECK-NEXT:            %370 = arith.addi %317, %27 : i32
//CHECK-NEXT:            %371 = arith.extui %370 : i32 to i64
//CHECK-NEXT:            %372 = arith.index_cast %371 : i64 to index
//CHECK-NEXT:            %373 = arith.subi %372, %31 : index
//CHECK-NEXT:            %374 = memref.load %5[%324, %373, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %375 = memref.load %4[%324, %320, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %376 = memref.load %4[%324, %320, %334] : memref<?x?x?xf64>
//CHECK-NEXT:            %377 = arith.addf %375, %376 fastmath<contract> : f64
//CHECK-NEXT:            %378 = arith.mulf %374, %377 fastmath<contract> : f64
//CHECK-NEXT:            %379 = arith.subf %369, %378 fastmath<contract> : f64
//CHECK-NEXT:            %380 = arith.mulf %141, %379 fastmath<contract> : f64
//CHECK-NEXT:            %381 = arith.addf %360, %380 fastmath<contract> : f64
//CHECK-NEXT:            memref.store %381, %2[%324, %320, %311] : memref<?x?x?xf64>
//CHECK-NEXT:            %382 = memref.load %15[] : memref<i32>
//CHECK-NEXT:            %383 = arith.index_cast %31 : index to i32
//CHECK-NEXT:            %384 = arith.addi %382, %383 : i32
//CHECK-NEXT:            scf.yield %384 : i32
//CHECK-NEXT:          }
//CHECK-NEXT:          memref.store %157, %15[] : memref<i32>
//CHECK-NEXT:          %385 = memref.load %14[] : memref<i32>
//CHECK-NEXT:          %386 = arith.index_cast %31 : index to i32
//CHECK-NEXT:          %387 = arith.addi %385, %386 : i32
//CHECK-NEXT:          scf.yield %387 : i32
//CHECK-NEXT:        }
//CHECK-NEXT:        memref.store %150, %14[] : memref<i32>
//CHECK-NEXT:        %388 = memref.load %13[] : memref<i32>
//CHECK-NEXT:        %389 = arith.index_cast %31 : index to i32
//CHECK-NEXT:        %390 = arith.addi %388, %389 : i32
//CHECK-NEXT:        scf.yield %390 : i32
//CHECK-NEXT:      }
//CHECK-NEXT:      memref.store %143, %13[] : memref<i32>
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QQmain() {
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        %0 = arith.constant 512 : i32
//CHECK-NEXT:        %1 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %0, %1[] : memref<i32>
//CHECK-NEXT:        %2 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %0, %2[] : memref<i32>
//CHECK-NEXT:        %3 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i32>
//CHECK-NEXT:        memref.store %0, %3[] : memref<i32>
//CHECK-NEXT:        func.call @_QMpwadvectionPwrapper(%1, %2, %3) : (memref<i32>, memref<i32>, memref<i32>) -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioBeginExternalListOutput(i32, !llvm.ptr, i32) -> !llvm.ptr 
//CHECK-NEXT:    func.func private @_FortranAioOutputAscii(!llvm.ptr, !llvm.ptr, i64) -> i1 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<10 x i8>, sym_name = "_QQclX496E697469616C697365", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "Initialise", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioEndIoStatement(!llvm.ptr) -> i32 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<9 x i8>, sym_name = "_QQclX43616C63756C617465", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "Calculate", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAProgramStart(i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> () 
//CHECK-NEXT:    func.func private @_FortranAProgramEndStatement() -> () 
//CHECK-NEXT:    func.func @main(%0 : i32, %1 : !llvm.ptr, %2 : !llvm.ptr) -> i32 {
//CHECK-NEXT:      %3 = memref.alloc() : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %4 = arith.constant 0 : index
//CHECK-NEXT:      %5 = memref.load %3[%4] : memref<1xmemref<memref<1xmemref<i8>>>>
//CHECK-NEXT:      %6 = "memref.extract_aligned_pointer_as_index"(%5) : (memref<memref<1xmemref<i8>>>) -> index
//CHECK-NEXT:      %7 = arith.index_cast %6 : index to i64
//CHECK-NEXT:      %8 = "llvm.inttoptr"(%7) : (i64) -> !llvm.ptr
//CHECK-NEXT:      func.call @_FortranAProgramStart(%0, %1, %2, %8) : (i32, !llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
//CHECK-NEXT:      "memref.alloca_scope"() ({
//CHECK-NEXT:        func.call @_QQmain() : () -> ()
//CHECK-NEXT:        "memref.alloca_scope.return"() : () -> ()
//CHECK-NEXT:      }) : () -> ()
//CHECK-NEXT:      func.call @_FortranAProgramEndStatement() : () -> ()
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      func.return %9 : i32
//CHECK-NEXT:    }
//CHECK-NEXT:  }
//CHECK-EMPTY:  
