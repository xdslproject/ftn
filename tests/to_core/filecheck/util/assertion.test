// RUN: xftn %S/../../../../examples/util/assertion.F90 --stdout -t %S/tmp --cleanup --stages=flang,pre,ftn -v0 | FileCheck %s 
//CHECK:       builtin.module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128", llvm.ident = "flang version 20.1.7 (https://github.com/llvm/llvm-project 6146a88f60492b520a36f8f8f3231e15f3cc6082)", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = i1, sym_name = "_QMassertionEfail_on_error", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32}> ({
//CHECK-NEXT:      %0 = arith.constant true
//CHECK-NEXT:      "llvm.return"(%0) : (i1) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = i32, sym_name = "_QMassertionEfailed_tests", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32}> ({
//CHECK-NEXT:      %1 = arith.constant 0 : i32
//CHECK-NEXT:      "llvm.return"(%1) : (i32) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = i32, sym_name = "_QMassertionEpassed_tests", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32}> ({
//CHECK-NEXT:      %2 = arith.constant 0 : i32
//CHECK-NEXT:      "llvm.return"(%2) : (i32) -> ()
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func @_QMassertionPassert(%3 : memref<i1> {fir.bindc_name = "condition"}, %4 : !llvm.struct<(!llvm.ptr, i64)> {fir.bindc_name = "file"}, %5 : memref<i32> {fir.bindc_name = "line"}) {
//CHECK-NEXT:      %6 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %7 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %8 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %9 = "llvm.extractvalue"(%4) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>) -> !llvm.ptr
//CHECK-NEXT:      %10 = "llvm.extractvalue"(%4) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>) -> i64
//CHECK-NEXT:      %11 = memref.load %3[] : memref<i1>
//CHECK-NEXT:      %12 = arith.constant true
//CHECK-NEXT:      %13 = arith.xori %11, %12 : i1
//CHECK-NEXT:      scf.if %13 {
//CHECK-NEXT:        %14 = arith.constant 6 : i32
//CHECK-NEXT:        %15 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %16 = "llvm.getelementptr"(%15) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %17 = arith.constant 18 : i32
//CHECK-NEXT:        %18 = func.call @_FortranAioBeginExternalListOutput(%14, %16, %17) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:        %19 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %20 = "llvm.getelementptr"(%19) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %21 = arith.constant 10 : index
//CHECK-NEXT:        %22 = arith.index_cast %21 : index to i64
//CHECK-NEXT:        %23 = func.call @_FortranAioOutputAscii(%18, %20, %22) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %24 = "llvm.getelementptr"(%9) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %25 = func.call @_FortranAioOutputAscii(%18, %24, %10) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %26 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %27 = "llvm.getelementptr"(%26) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %28 = func.call @_FortranAioOutputAscii(%18, %27, %22) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %29 = memref.load %5[] : memref<i32>
//CHECK-NEXT:        %30 = func.call @_FortranAioOutputInteger32(%18, %29) : (!llvm.ptr, i32) -> i1
//CHECK-NEXT:        %31 = func.call @_FortranAioEndIoStatement(%18) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %32 = "llvm.load"(%6) : (!llvm.ptr) -> i1
//CHECK-NEXT:        scf.if %32 {
//CHECK-NEXT:          %33 = arith.constant -1 : i32
//CHECK-NEXT:          func.call @_FortranAExit(%33) : (i32) -> ()
//CHECK-NEXT:        } else {
//CHECK-NEXT:          %34 = "llvm.load"(%7) : (!llvm.ptr) -> i32
//CHECK-NEXT:          %35 = arith.constant 1 : i32
//CHECK-NEXT:          %36 = arith.addi %34, %35 : i32
//CHECK-NEXT:          "llvm.store"(%36, %7) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:        }
//CHECK-NEXT:      } else {
//CHECK-NEXT:        %37 = "llvm.load"(%8) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %38 = arith.constant 1 : i32
//CHECK-NEXT:        %39 = arith.addi %37, %38 : i32
//CHECK-NEXT:        "llvm.store"(%39, %8) <{ordering = 0 : i64}> : (i32, !llvm.ptr) -> ()
//CHECK-NEXT:      }
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMassertionPassert_init(%3 : memref<i1> {fir.bindc_name = "raise_error_on_fail"}) {
//CHECK-NEXT:      %4 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %5 = memref.load %3[] : memref<i1>
//CHECK-NEXT:      "llvm.store"(%5, %4) <{ordering = 0 : i64}> : (i1, !llvm.ptr) -> ()
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func @_QMassertionPassert_finalize(%3 : !llvm.struct<(!llvm.ptr, i64)> {fir.bindc_name = "file"}) {
//CHECK-NEXT:      %4 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %5 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:      %6 = "llvm.extractvalue"(%3) <{position = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, i64)>) -> !llvm.ptr
//CHECK-NEXT:      %7 = "llvm.extractvalue"(%3) <{position = array<i64: 1>}> : (!llvm.struct<(!llvm.ptr, i64)>) -> i64
//CHECK-NEXT:      %8 = "llvm.load"(%4) : (!llvm.ptr) -> i32
//CHECK-NEXT:      %9 = arith.constant 0 : i32
//CHECK-NEXT:      %10 = arith.cmpi sgt, %8, %9 : i32
//CHECK-NEXT:      scf.if %10 {
//CHECK-NEXT:        %11 = arith.constant 6 : i32
//CHECK-NEXT:        %12 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %13 = "llvm.getelementptr"(%12) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %14 = arith.constant 39 : i32
//CHECK-NEXT:        %15 = func.call @_FortranAioBeginExternalListOutput(%11, %13, %14) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:        %16 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %17 = "llvm.getelementptr"(%16) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %18 = arith.constant 8 : index
//CHECK-NEXT:        %19 = arith.index_cast %18 : index to i64
//CHECK-NEXT:        %20 = func.call @_FortranAioOutputAscii(%15, %17, %19) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %21 = "llvm.getelementptr"(%6) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %22 = func.call @_FortranAioOutputAscii(%15, %21, %7) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %23 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %24 = "llvm.getelementptr"(%23) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %25 = arith.constant 10 : index
//CHECK-NEXT:        %26 = arith.index_cast %25 : index to i64
//CHECK-NEXT:        %27 = func.call @_FortranAioOutputAscii(%15, %24, %26) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %28 = "llvm.load"(%5) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %29 = func.call @_FortranAioOutputInteger32(%15, %28) : (!llvm.ptr, i32) -> i1
//CHECK-NEXT:        %30 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %31 = "llvm.getelementptr"(%30) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %32 = arith.constant 7 : index
//CHECK-NEXT:        %33 = arith.index_cast %32 : index to i64
//CHECK-NEXT:        %34 = func.call @_FortranAioOutputAscii(%15, %31, %33) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %35 = "llvm.load"(%4) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %36 = func.call @_FortranAioOutputInteger32(%15, %35) : (!llvm.ptr, i32) -> i1
//CHECK-NEXT:        %37 = func.call @_FortranAioEndIoStatement(%15) : (!llvm.ptr) -> i32
//CHECK-NEXT:      } else {
//CHECK-NEXT:        %38 = arith.constant 6 : i32
//CHECK-NEXT:        %39 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %40 = "llvm.getelementptr"(%39) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %41 = arith.constant 41 : i32
//CHECK-NEXT:        %42 = func.call @_FortranAioBeginExternalListOutput(%38, %40, %41) : (i32, !llvm.ptr, i32) -> !llvm.ptr
//CHECK-NEXT:        %43 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %44 = "llvm.getelementptr"(%43) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %45 = arith.constant 8 : index
//CHECK-NEXT:        %46 = arith.index_cast %45 : index to i64
//CHECK-NEXT:        %47 = func.call @_FortranAioOutputAscii(%42, %44, %46) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %48 = "llvm.getelementptr"(%6) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %49 = func.call @_FortranAioOutputAscii(%42, %48, %7) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %50 = "llvm.mlir.addressof"() <{global_name = @{{.*}}}> : () -> !llvm.ptr
//CHECK-NEXT:        %51 = "llvm.getelementptr"(%50) <{rawConstantIndices = array<i32: 0, 0>, elem_type = !llvm.array<1 x i8>}> : (!llvm.ptr) -> !llvm.ptr
//CHECK-NEXT:        %52 = arith.constant 10 : index
//CHECK-NEXT:        %53 = arith.index_cast %52 : index to i64
//CHECK-NEXT:        %54 = func.call @_FortranAioOutputAscii(%42, %51, %53) : (!llvm.ptr, !llvm.ptr, i64) -> i1
//CHECK-NEXT:        %55 = "llvm.load"(%5) : (!llvm.ptr) -> i32
//CHECK-NEXT:        %56 = func.call @_FortranAioOutputInteger32(%42, %55) : (!llvm.ptr, i32) -> i1
//CHECK-NEXT:        %57 = func.call @_FortranAioEndIoStatement(%42) : (!llvm.ptr) -> i32
//CHECK-NEXT:      }
//CHECK-NEXT:      func.return
//CHECK-NEXT:    }
//CHECK-NEXT:    func.func private @_FortranAioBeginExternalListOutput(i32, !llvm.ptr, i32) -> !llvm.ptr 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<{{[0-9]+}} x i8>, sym_name = "_{{.*}}", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "{{.*}}", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioOutputAscii(!llvm.ptr, !llvm.ptr, i64) -> i1 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<10 x i8>, sym_name = "_QQclX4572726F7220696E2027", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "Error in '", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<10 x i8>, sym_name = "_QQclX27206174206C696E6520", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "' at line ", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    func.func private @_FortranAioOutputInteger32(!llvm.ptr, i32) -> i1 
//CHECK-NEXT:    func.func private @_FortranAioEndIoStatement(!llvm.ptr) -> i32 
//CHECK-NEXT:    func.func private @_FortranAExit(i32) -> () 
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<8 x i8>, sym_name = "_QQclX5B4641494C5D2027", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "[FAIL] '", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<10 x i8>, sym_name = "_QQclX27205061737365733A20", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "' Passes: ", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<7 x i8>, sym_name = "_QQclX4661696C733A20", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "Fails: ", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:    "llvm.mlir.global"() <{global_type = !llvm.array<8 x i8>, sym_name = "_QQclX5B504153535D2027", linkage = #llvm.linkage<"internal">, addr_space = 0 : i32, constant, value = "[PASS] '", unnamed_addr = 0 : i64}> ({
//CHECK-NEXT:    }) : () -> ()
//CHECK-NEXT:  }
//CHECK-EMPTY:  
